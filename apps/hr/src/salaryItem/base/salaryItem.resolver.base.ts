/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalaryItem } from "./SalaryItem";
import { SalaryItemCountArgs } from "./SalaryItemCountArgs";
import { SalaryItemFindManyArgs } from "./SalaryItemFindManyArgs";
import { SalaryItemFindUniqueArgs } from "./SalaryItemFindUniqueArgs";
import { CreateSalaryItemArgs } from "./CreateSalaryItemArgs";
import { UpdateSalaryItemArgs } from "./UpdateSalaryItemArgs";
import { DeleteSalaryItemArgs } from "./DeleteSalaryItemArgs";
import { EmployeeClassSalaryItemValueFindManyArgs } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValueFindManyArgs";
import { EmployeeClassSalaryItemValue } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValue";
import { EmployeeSalaryDetailFindManyArgs } from "../../employeeSalaryDetail/base/EmployeeSalaryDetailFindManyArgs";
import { EmployeeSalaryDetail } from "../../employeeSalaryDetail/base/EmployeeSalaryDetail";
import { SalaryItemService } from "../salaryItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalaryItem)
export class SalaryItemResolverBase {
  constructor(
    protected readonly service: SalaryItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async _salaryItemsMeta(
    @graphql.Args() args: SalaryItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalaryItem])
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async salaryItems(
    @graphql.Args() args: SalaryItemFindManyArgs
  ): Promise<SalaryItem[]> {
    return this.service.salaryItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalaryItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "own",
  })
  async salaryItem(
    @graphql.Args() args: SalaryItemFindUniqueArgs
  ): Promise<SalaryItem | null> {
    const result = await this.service.salaryItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItem)
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "create",
    possession: "any",
  })
  async createSalaryItem(
    @graphql.Args() args: CreateSalaryItemArgs
  ): Promise<SalaryItem> {
    return await this.service.createSalaryItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItem)
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "update",
    possession: "any",
  })
  async updateSalaryItem(
    @graphql.Args() args: UpdateSalaryItemArgs
  ): Promise<SalaryItem | null> {
    try {
      return await this.service.updateSalaryItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalaryItem)
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "delete",
    possession: "any",
  })
  async deleteSalaryItem(
    @graphql.Args() args: DeleteSalaryItemArgs
  ): Promise<SalaryItem | null> {
    try {
      return await this.service.deleteSalaryItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeClassSalaryItemValue], {
    name: "employeeClassSalaryItemValues",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "any",
  })
  async findEmployeeClassSalaryItemValues(
    @graphql.Parent() parent: SalaryItem,
    @graphql.Args() args: EmployeeClassSalaryItemValueFindManyArgs
  ): Promise<EmployeeClassSalaryItemValue[]> {
    const results = await this.service.findEmployeeClassSalaryItemValues(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeSalaryDetail], {
    name: "employeeSalaryDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "any",
  })
  async findEmployeeSalaryDetails(
    @graphql.Parent() parent: SalaryItem,
    @graphql.Args() args: EmployeeSalaryDetailFindManyArgs
  ): Promise<EmployeeSalaryDetail[]> {
    const results = await this.service.findEmployeeSalaryDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
