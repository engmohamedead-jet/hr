/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MaintenanceContract } from "./MaintenanceContract";
import { MaintenanceContractCountArgs } from "./MaintenanceContractCountArgs";
import { MaintenanceContractFindManyArgs } from "./MaintenanceContractFindManyArgs";
import { MaintenanceContractFindUniqueArgs } from "./MaintenanceContractFindUniqueArgs";
import { CreateMaintenanceContractArgs } from "./CreateMaintenanceContractArgs";
import { UpdateMaintenanceContractArgs } from "./UpdateMaintenanceContractArgs";
import { DeleteMaintenanceContractArgs } from "./DeleteMaintenanceContractArgs";
import { ContractPeriod } from "../../contractPeriod/base/ContractPeriod";
import { Customer } from "../../customer/base/Customer";
import { CustomerUser } from "../../customerUser/base/CustomerUser";
import { Elevator } from "../../elevator/base/Elevator";
import { Store } from "../../store/base/Store";
import { MaintenanceContractService } from "../maintenanceContract.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MaintenanceContract)
export class MaintenanceContractResolverBase {
  constructor(
    protected readonly service: MaintenanceContractService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async _maintenanceContractsMeta(
    @graphql.Args() args: MaintenanceContractCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MaintenanceContract])
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async maintenanceContracts(
    @graphql.Args() args: MaintenanceContractFindManyArgs
  ): Promise<MaintenanceContract[]> {
    return this.service.maintenanceContracts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MaintenanceContract, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "own",
  })
  async maintenanceContract(
    @graphql.Args() args: MaintenanceContractFindUniqueArgs
  ): Promise<MaintenanceContract | null> {
    const result = await this.service.maintenanceContract(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceContract)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "create",
    possession: "any",
  })
  async createMaintenanceContract(
    @graphql.Args() args: CreateMaintenanceContractArgs
  ): Promise<MaintenanceContract> {
    return await this.service.createMaintenanceContract({
      ...args,
      data: {
        ...args.data,

        contractPeriodId: {
          connect: args.data.contractPeriodId,
        },

        customerId: {
          connect: args.data.customerId,
        },

        customerUserId: args.data.customerUserId
          ? {
              connect: args.data.customerUserId,
            }
          : undefined,

        elevatorId: {
          connect: args.data.elevatorId,
        },

        storeId: args.data.storeId
          ? {
              connect: args.data.storeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceContract)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceContract(
    @graphql.Args() args: UpdateMaintenanceContractArgs
  ): Promise<MaintenanceContract | null> {
    try {
      return await this.service.updateMaintenanceContract({
        ...args,
        data: {
          ...args.data,

          contractPeriodId: {
            connect: args.data.contractPeriodId,
          },

          customerId: {
            connect: args.data.customerId,
          },

          customerUserId: args.data.customerUserId
            ? {
                connect: args.data.customerUserId,
              }
            : undefined,

          elevatorId: {
            connect: args.data.elevatorId,
          },

          storeId: args.data.storeId
            ? {
                connect: args.data.storeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceContract)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "delete",
    possession: "any",
  })
  async deleteMaintenanceContract(
    @graphql.Args() args: DeleteMaintenanceContractArgs
  ): Promise<MaintenanceContract | null> {
    try {
      return await this.service.deleteMaintenanceContract(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ContractPeriod, {
    nullable: true,
    name: "contractPeriodId",
  })
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "read",
    possession: "any",
  })
  async getContractPeriodId(
    @graphql.Parent() parent: MaintenanceContract
  ): Promise<ContractPeriod | null> {
    const result = await this.service.getContractPeriodId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customerId",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomerId(
    @graphql.Parent() parent: MaintenanceContract
  ): Promise<Customer | null> {
    const result = await this.service.getCustomerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerUser, {
    nullable: true,
    name: "customerUserId",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  async getCustomerUserId(
    @graphql.Parent() parent: MaintenanceContract
  ): Promise<CustomerUser | null> {
    const result = await this.service.getCustomerUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Elevator, {
    nullable: true,
    name: "elevatorId",
  })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async getElevatorId(
    @graphql.Parent() parent: MaintenanceContract
  ): Promise<Elevator | null> {
    const result = await this.service.getElevatorId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: MaintenanceContract
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
