/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentVoucher } from "./PaymentVoucher";
import { PaymentVoucherCountArgs } from "./PaymentVoucherCountArgs";
import { PaymentVoucherFindManyArgs } from "./PaymentVoucherFindManyArgs";
import { PaymentVoucherFindUniqueArgs } from "./PaymentVoucherFindUniqueArgs";
import { CreatePaymentVoucherArgs } from "./CreatePaymentVoucherArgs";
import { UpdatePaymentVoucherArgs } from "./UpdatePaymentVoucherArgs";
import { DeletePaymentVoucherArgs } from "./DeletePaymentVoucherArgs";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { Currency } from "../../currency/base/Currency";
import { Employee } from "../../employee/base/Employee";
import { ExpenseItem } from "../../expenseItem/base/ExpenseItem";
import { Supplier } from "../../supplier/base/Supplier";
import { Tenant } from "../../tenant/base/Tenant";
import { VoucherType } from "../../voucherType/base/VoucherType";
import { PaymentVoucherService } from "../paymentVoucher.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentVoucher)
export class PaymentVoucherResolverBase {
  constructor(
    protected readonly service: PaymentVoucherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "any",
  })
  async _paymentVouchersMeta(
    @graphql.Args() args: PaymentVoucherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentVoucher])
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "any",
  })
  async paymentVouchers(
    @graphql.Args() args: PaymentVoucherFindManyArgs
  ): Promise<PaymentVoucher[]> {
    return this.service.paymentVouchers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentVoucher, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "own",
  })
  async paymentVoucher(
    @graphql.Args() args: PaymentVoucherFindUniqueArgs
  ): Promise<PaymentVoucher | null> {
    const result = await this.service.paymentVoucher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentVoucher)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "create",
    possession: "any",
  })
  async createPaymentVoucher(
    @graphql.Args() args: CreatePaymentVoucherArgs
  ): Promise<PaymentVoucher> {
    return await this.service.createPaymentVoucher({
      ...args,
      data: {
        ...args.data,

        accountTransactionId: args.data.accountTransactionId
          ? {
              connect: args.data.accountTransactionId,
            }
          : undefined,

        cashRepositoryId: {
          connect: args.data.cashRepositoryId,
        },

        currency: {
          connect: args.data.currency,
        },

        employeeId: args.data.employeeId
          ? {
              connect: args.data.employeeId,
            }
          : undefined,

        expenseItemId: args.data.expenseItemId
          ? {
              connect: args.data.expenseItemId,
            }
          : undefined,

        supplier: args.data.supplier
          ? {
              connect: args.data.supplier,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        voucherTypeId: args.data.voucherTypeId
          ? {
              connect: args.data.voucherTypeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentVoucher)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "update",
    possession: "any",
  })
  async updatePaymentVoucher(
    @graphql.Args() args: UpdatePaymentVoucherArgs
  ): Promise<PaymentVoucher | null> {
    try {
      return await this.service.updatePaymentVoucher({
        ...args,
        data: {
          ...args.data,

          accountTransactionId: args.data.accountTransactionId
            ? {
                connect: args.data.accountTransactionId,
              }
            : undefined,

          cashRepositoryId: {
            connect: args.data.cashRepositoryId,
          },

          currency: {
            connect: args.data.currency,
          },

          employeeId: args.data.employeeId
            ? {
                connect: args.data.employeeId,
              }
            : undefined,

          expenseItemId: args.data.expenseItemId
            ? {
                connect: args.data.expenseItemId,
              }
            : undefined,

          supplier: args.data.supplier
            ? {
                connect: args.data.supplier,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          voucherTypeId: args.data.voucherTypeId
            ? {
                connect: args.data.voucherTypeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentVoucher)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "delete",
    possession: "any",
  })
  async deletePaymentVoucher(
    @graphql.Args() args: DeletePaymentVoucherArgs
  ): Promise<PaymentVoucher | null> {
    try {
      return await this.service.deletePaymentVoucher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AccountTransaction, {
    nullable: true,
    name: "accountTransactionId",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async getAccountTransactionId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<AccountTransaction | null> {
    const result = await this.service.getAccountTransactionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CashRepository, {
    nullable: true,
    name: "cashRepositoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async getCashRepositoryId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<CashRepository | null> {
    const result = await this.service.getCashRepositoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, {
    nullable: true,
    name: "currency",
  })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async getCurrency(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<Currency | null> {
    const result = await this.service.getCurrency(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployeeId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ExpenseItem, {
    nullable: true,
    name: "expenseItemId",
  })
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "read",
    possession: "any",
  })
  async getExpenseItemId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<ExpenseItem | null> {
    const result = await this.service.getExpenseItemId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplier",
  })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async getSupplier(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplier(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoucherType, {
    nullable: true,
    name: "voucherTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "read",
    possession: "any",
  })
  async getVoucherTypeId(
    @graphql.Parent() parent: PaymentVoucher
  ): Promise<VoucherType | null> {
    const result = await this.service.getVoucherTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
