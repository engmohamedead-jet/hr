/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BillOfMaterial } from "./BillOfMaterial";
import { BillOfMaterialCountArgs } from "./BillOfMaterialCountArgs";
import { BillOfMaterialFindManyArgs } from "./BillOfMaterialFindManyArgs";
import { BillOfMaterialFindUniqueArgs } from "./BillOfMaterialFindUniqueArgs";
import { CreateBillOfMaterialArgs } from "./CreateBillOfMaterialArgs";
import { UpdateBillOfMaterialArgs } from "./UpdateBillOfMaterialArgs";
import { DeleteBillOfMaterialArgs } from "./DeleteBillOfMaterialArgs";
import { BillOfMaterialDetailFindManyArgs } from "../../billOfMaterialDetail/base/BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { ProductionOrderFindManyArgs } from "../../productionOrder/base/ProductionOrderFindManyArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { BillOfMaterialType } from "../../billOfMaterialType/base/BillOfMaterialType";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Unit } from "../../unit/base/Unit";
import { BillOfMaterialService } from "../billOfMaterial.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BillOfMaterial)
export class BillOfMaterialResolverBase {
  constructor(
    protected readonly service: BillOfMaterialService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async _billOfMaterialsMeta(
    @graphql.Args() args: BillOfMaterialCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BillOfMaterial])
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async billOfMaterials(
    @graphql.Args() args: BillOfMaterialFindManyArgs
  ): Promise<BillOfMaterial[]> {
    return this.service.billOfMaterials(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BillOfMaterial, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "own",
  })
  async billOfMaterial(
    @graphql.Args() args: BillOfMaterialFindUniqueArgs
  ): Promise<BillOfMaterial | null> {
    const result = await this.service.billOfMaterial(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillOfMaterial)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "create",
    possession: "any",
  })
  async createBillOfMaterial(
    @graphql.Args() args: CreateBillOfMaterialArgs
  ): Promise<BillOfMaterial> {
    return await this.service.createBillOfMaterial({
      ...args,
      data: {
        ...args.data,

        billOfMaterialTypeId: {
          connect: args.data.billOfMaterialTypeId,
        },

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        unitId: {
          connect: args.data.unitId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillOfMaterial)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterial(
    @graphql.Args() args: UpdateBillOfMaterialArgs
  ): Promise<BillOfMaterial | null> {
    try {
      return await this.service.updateBillOfMaterial({
        ...args,
        data: {
          ...args.data,

          billOfMaterialTypeId: {
            connect: args.data.billOfMaterialTypeId,
          },

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          unitId: {
            connect: args.data.unitId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BillOfMaterial)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "delete",
    possession: "any",
  })
  async deleteBillOfMaterial(
    @graphql.Args() args: DeleteBillOfMaterialArgs
  ): Promise<BillOfMaterial | null> {
    try {
      return await this.service.deleteBillOfMaterial(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterialDetail], {
    name: "billOfMaterialDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialDetails(
    @graphql.Parent() parent: BillOfMaterial,
    @graphql.Args() args: BillOfMaterialDetailFindManyArgs
  ): Promise<BillOfMaterialDetail[]> {
    const results = await this.service.findBillOfMaterialDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductionOrder], { name: "productionOrders" })
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async findProductionOrders(
    @graphql.Parent() parent: BillOfMaterial,
    @graphql.Args() args: ProductionOrderFindManyArgs
  ): Promise<ProductionOrder[]> {
    const results = await this.service.findProductionOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BillOfMaterialType, {
    nullable: true,
    name: "billOfMaterialTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "read",
    possession: "any",
  })
  async getBillOfMaterialTypeId(
    @graphql.Parent() parent: BillOfMaterial
  ): Promise<BillOfMaterialType | null> {
    const result = await this.service.getBillOfMaterialTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: BillOfMaterial
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: BillOfMaterial
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(
    @graphql.Parent() parent: BillOfMaterial
  ): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
