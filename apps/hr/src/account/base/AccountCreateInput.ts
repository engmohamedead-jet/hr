/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ProductGroupCreateNestedManyWithoutAccountsInput } from "./ProductGroupCreateNestedManyWithoutAccountsInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { InstallmentSaleFeeCreateNestedManyWithoutAccountsInput } from "./InstallmentSaleFeeCreateNestedManyWithoutAccountsInput";
import { AccountWhereUniqueInput } from "./AccountWhereUniqueInput";
import { AccountCreateNestedManyWithoutAccountsInput } from "./AccountCreateNestedManyWithoutAccountsInput";
import { SalePersonCreateNestedManyWithoutAccountsInput } from "./SalePersonCreateNestedManyWithoutAccountsInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";

@InputType()
class AccountCreateInput {
  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  SaleReturnAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  accountNumber!: string;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  aleAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  costOfGoodsSoldAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: () => InstallmentSaleFeeCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => InstallmentSaleFeeCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => InstallmentSaleFeeCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  installmentSaleFees?: InstallmentSaleFeeCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  inventoryAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isMasterAccount!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: () => AccountWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AccountWhereUniqueInput)
  @IsOptional()
  @Field(() => AccountWhereUniqueInput, {
    nullable: true,
  })
  parentAccountId?: AccountWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => AccountCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => AccountCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => AccountCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  parentAccounts?: AccountCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  purchaseAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  purchaseDiscountAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  purchaseReturnAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => ProductGroupCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => ProductGroupCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  saleDiscountAccountProductGroups?: ProductGroupCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => SalePersonCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => SalePersonCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => SalePersonCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  salePeople?: SalePersonCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;
}

export { AccountCreateInput as AccountCreateInput };
