/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FiscalWeek } from "./FiscalWeek";
import { FiscalWeekCountArgs } from "./FiscalWeekCountArgs";
import { FiscalWeekFindManyArgs } from "./FiscalWeekFindManyArgs";
import { FiscalWeekFindUniqueArgs } from "./FiscalWeekFindUniqueArgs";
import { CreateFiscalWeekArgs } from "./CreateFiscalWeekArgs";
import { UpdateFiscalWeekArgs } from "./UpdateFiscalWeekArgs";
import { DeleteFiscalWeekArgs } from "./DeleteFiscalWeekArgs";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { FiscalWeekService } from "../fiscalWeek.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FiscalWeek)
export class FiscalWeekResolverBase {
  constructor(
    protected readonly service: FiscalWeekService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "read",
    possession: "any",
  })
  async _fiscalWeeksMeta(
    @graphql.Args() args: FiscalWeekCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FiscalWeek])
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "read",
    possession: "any",
  })
  async fiscalWeeks(
    @graphql.Args() args: FiscalWeekFindManyArgs
  ): Promise<FiscalWeek[]> {
    return this.service.fiscalWeeks(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FiscalWeek, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "read",
    possession: "own",
  })
  async fiscalWeek(
    @graphql.Args() args: FiscalWeekFindUniqueArgs
  ): Promise<FiscalWeek | null> {
    const result = await this.service.fiscalWeek(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalWeek)
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "create",
    possession: "any",
  })
  async createFiscalWeek(
    @graphql.Args() args: CreateFiscalWeekArgs
  ): Promise<FiscalWeek> {
    return await this.service.createFiscalWeek({
      ...args,
      data: {
        ...args.data,

        fiscalMonthId: {
          connect: args.data.fiscalMonthId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalWeek)
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "update",
    possession: "any",
  })
  async updateFiscalWeek(
    @graphql.Args() args: UpdateFiscalWeekArgs
  ): Promise<FiscalWeek | null> {
    try {
      return await this.service.updateFiscalWeek({
        ...args,
        data: {
          ...args.data,

          fiscalMonthId: {
            connect: args.data.fiscalMonthId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FiscalWeek)
  @nestAccessControl.UseRoles({
    resource: "FiscalWeek",
    action: "delete",
    possession: "any",
  })
  async deleteFiscalWeek(
    @graphql.Args() args: DeleteFiscalWeekArgs
  ): Promise<FiscalWeek | null> {
    try {
      return await this.service.deleteFiscalWeek(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FiscalMonth, {
    nullable: true,
    name: "fiscalMonthId",
  })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async getFiscalMonthId(
    @graphql.Parent() parent: FiscalWeek
  ): Promise<FiscalMonth | null> {
    const result = await this.service.getFiscalMonthId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
