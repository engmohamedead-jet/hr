/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FiscalYear } from "./FiscalYear";
import { FiscalYearCountArgs } from "./FiscalYearCountArgs";
import { FiscalYearFindManyArgs } from "./FiscalYearFindManyArgs";
import { FiscalYearFindUniqueArgs } from "./FiscalYearFindUniqueArgs";
import { CreateFiscalYearArgs } from "./CreateFiscalYearArgs";
import { UpdateFiscalYearArgs } from "./UpdateFiscalYearArgs";
import { DeleteFiscalYearArgs } from "./DeleteFiscalYearArgs";
import { FiscalMonthFindManyArgs } from "../../fiscalMonth/base/FiscalMonthFindManyArgs";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { FiscalYearService } from "../fiscalYear.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FiscalYear)
export class FiscalYearResolverBase {
  constructor(
    protected readonly service: FiscalYearService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "read",
    possession: "any",
  })
  async _fiscalYearsMeta(
    @graphql.Args() args: FiscalYearCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FiscalYear])
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "read",
    possession: "any",
  })
  async fiscalYears(
    @graphql.Args() args: FiscalYearFindManyArgs
  ): Promise<FiscalYear[]> {
    return this.service.fiscalYears(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FiscalYear, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "read",
    possession: "own",
  })
  async fiscalYear(
    @graphql.Args() args: FiscalYearFindUniqueArgs
  ): Promise<FiscalYear | null> {
    const result = await this.service.fiscalYear(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalYear)
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "create",
    possession: "any",
  })
  async createFiscalYear(
    @graphql.Args() args: CreateFiscalYearArgs
  ): Promise<FiscalYear> {
    return await this.service.createFiscalYear({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalYear)
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "update",
    possession: "any",
  })
  async updateFiscalYear(
    @graphql.Args() args: UpdateFiscalYearArgs
  ): Promise<FiscalYear | null> {
    try {
      return await this.service.updateFiscalYear({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FiscalYear)
  @nestAccessControl.UseRoles({
    resource: "FiscalYear",
    action: "delete",
    possession: "any",
  })
  async deleteFiscalYear(
    @graphql.Args() args: DeleteFiscalYearArgs
  ): Promise<FiscalYear | null> {
    try {
      return await this.service.deleteFiscalYear(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FiscalMonth], { name: "fiscalMonths" })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async findFiscalMonths(
    @graphql.Parent() parent: FiscalYear,
    @graphql.Args() args: FiscalMonthFindManyArgs
  ): Promise<FiscalMonth[]> {
    const results = await this.service.findFiscalMonths(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
