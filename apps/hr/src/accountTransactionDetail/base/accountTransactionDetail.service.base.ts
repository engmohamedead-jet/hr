/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccountTransactionDetail as PrismaAccountTransactionDetail,
  AccountTransaction as PrismaAccountTransaction,
  Store as PrismaStore,
  TransactionType as PrismaTransactionType,
} from "@prisma/client";

export class AccountTransactionDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountTransactionDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountTransactionDetail.count(args);
  }

  async accountTransactionDetails(
    args: Prisma.AccountTransactionDetailFindManyArgs
  ): Promise<PrismaAccountTransactionDetail[]> {
    return this.prisma.accountTransactionDetail.findMany(args);
  }
  async accountTransactionDetail(
    args: Prisma.AccountTransactionDetailFindUniqueArgs
  ): Promise<PrismaAccountTransactionDetail | null> {
    return this.prisma.accountTransactionDetail.findUnique(args);
  }
  async createAccountTransactionDetail(
    args: Prisma.AccountTransactionDetailCreateArgs
  ): Promise<PrismaAccountTransactionDetail> {
    return this.prisma.accountTransactionDetail.create(args);
  }
  async updateAccountTransactionDetail(
    args: Prisma.AccountTransactionDetailUpdateArgs
  ): Promise<PrismaAccountTransactionDetail> {
    return this.prisma.accountTransactionDetail.update(args);
  }
  async deleteAccountTransactionDetail(
    args: Prisma.AccountTransactionDetailDeleteArgs
  ): Promise<PrismaAccountTransactionDetail> {
    return this.prisma.accountTransactionDetail.delete(args);
  }

  async getAccountTransactionId(
    parentId: string
  ): Promise<PrismaAccountTransaction | null> {
    return this.prisma.accountTransactionDetail
      .findUnique({
        where: { id: parentId },
      })
      .accountTransactionId();
  }

  async getStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.accountTransactionDetail
      .findUnique({
        where: { id: parentId },
      })
      .storeId();
  }

  async getTransactionTypeId(
    parentId: string
  ): Promise<PrismaTransactionType | null> {
    return this.prisma.accountTransactionDetail
      .findUnique({
        where: { id: parentId },
      })
      .transactionTypeId();
  }
}
