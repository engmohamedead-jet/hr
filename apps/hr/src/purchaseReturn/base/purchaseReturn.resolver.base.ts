/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PurchaseReturn } from "./PurchaseReturn";
import { PurchaseReturnCountArgs } from "./PurchaseReturnCountArgs";
import { PurchaseReturnFindManyArgs } from "./PurchaseReturnFindManyArgs";
import { PurchaseReturnFindUniqueArgs } from "./PurchaseReturnFindUniqueArgs";
import { CreatePurchaseReturnArgs } from "./CreatePurchaseReturnArgs";
import { UpdatePurchaseReturnArgs } from "./UpdatePurchaseReturnArgs";
import { DeletePurchaseReturnArgs } from "./DeletePurchaseReturnArgs";
import { PurchaseReturnDetailFindManyArgs } from "../../purchaseReturnDetail/base/PurchaseReturnDetailFindManyArgs";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { Purchase } from "../../purchase/base/Purchase";
import { PurchasePriceType } from "../../purchasePriceType/base/PurchasePriceType";
import { Store } from "../../store/base/Store";
import { Supplier } from "../../supplier/base/Supplier";
import { Tenant } from "../../tenant/base/Tenant";
import { PurchaseReturnService } from "../purchaseReturn.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PurchaseReturn)
export class PurchaseReturnResolverBase {
  constructor(
    protected readonly service: PurchaseReturnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async _purchaseReturnsMeta(
    @graphql.Args() args: PurchaseReturnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PurchaseReturn])
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async purchaseReturns(
    @graphql.Args() args: PurchaseReturnFindManyArgs
  ): Promise<PurchaseReturn[]> {
    return this.service.purchaseReturns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PurchaseReturn, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "own",
  })
  async purchaseReturn(
    @graphql.Args() args: PurchaseReturnFindUniqueArgs
  ): Promise<PurchaseReturn | null> {
    const result = await this.service.purchaseReturn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchaseReturn)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "create",
    possession: "any",
  })
  async createPurchaseReturn(
    @graphql.Args() args: CreatePurchaseReturnArgs
  ): Promise<PurchaseReturn> {
    return await this.service.createPurchaseReturn({
      ...args,
      data: {
        ...args.data,

        cashRepositoryId: {
          connect: args.data.cashRepositoryId,
        },

        invoiceTypeId: args.data.invoiceTypeId
          ? {
              connect: args.data.invoiceTypeId,
            }
          : undefined,

        paymentTermId: args.data.paymentTermId
          ? {
              connect: args.data.paymentTermId,
            }
          : undefined,

        paymentTypeId: {
          connect: args.data.paymentTypeId,
        },

        purchaseId: args.data.purchaseId
          ? {
              connect: args.data.purchaseId,
            }
          : undefined,

        purchasePriceTypeId: {
          connect: args.data.purchasePriceTypeId,
        },

        storeId: {
          connect: args.data.storeId,
        },

        supplierId: {
          connect: args.data.supplierId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchaseReturn)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturn(
    @graphql.Args() args: UpdatePurchaseReturnArgs
  ): Promise<PurchaseReturn | null> {
    try {
      return await this.service.updatePurchaseReturn({
        ...args,
        data: {
          ...args.data,

          cashRepositoryId: {
            connect: args.data.cashRepositoryId,
          },

          invoiceTypeId: args.data.invoiceTypeId
            ? {
                connect: args.data.invoiceTypeId,
              }
            : undefined,

          paymentTermId: args.data.paymentTermId
            ? {
                connect: args.data.paymentTermId,
              }
            : undefined,

          paymentTypeId: {
            connect: args.data.paymentTypeId,
          },

          purchaseId: args.data.purchaseId
            ? {
                connect: args.data.purchaseId,
              }
            : undefined,

          purchasePriceTypeId: {
            connect: args.data.purchasePriceTypeId,
          },

          storeId: {
            connect: args.data.storeId,
          },

          supplierId: {
            connect: args.data.supplierId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseReturn)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "delete",
    possession: "any",
  })
  async deletePurchaseReturn(
    @graphql.Args() args: DeletePurchaseReturnArgs
  ): Promise<PurchaseReturn | null> {
    try {
      return await this.service.deletePurchaseReturn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseReturnDetail], {
    name: "purchaseReturnDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturnDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnDetails(
    @graphql.Parent() parent: PurchaseReturn,
    @graphql.Args() args: PurchaseReturnDetailFindManyArgs
  ): Promise<PurchaseReturnDetail[]> {
    const results = await this.service.findPurchaseReturnDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CashRepository, {
    nullable: true,
    name: "cashRepositoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async getCashRepositoryId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<CashRepository | null> {
    const result = await this.service.getCashRepositoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InvoiceType, {
    nullable: true,
    name: "invoiceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async getInvoiceTypeId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<InvoiceType | null> {
    const result = await this.service.getInvoiceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentTerm, {
    nullable: true,
    name: "paymentTermId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async getPaymentTermId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<PaymentTerm | null> {
    const result = await this.service.getPaymentTermId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentType, {
    nullable: true,
    name: "paymentTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async getPaymentTypeId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<PaymentType | null> {
    const result = await this.service.getPaymentTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Purchase, {
    nullable: true,
    name: "purchaseId",
  })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async getPurchaseId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<Purchase | null> {
    const result = await this.service.getPurchaseId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PurchasePriceType, {
    nullable: true,
    name: "purchasePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  async getPurchasePriceTypeId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<PurchasePriceType | null> {
    const result = await this.service.getPurchasePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplierId",
  })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async getSupplierId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplierId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: PurchaseReturn
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
