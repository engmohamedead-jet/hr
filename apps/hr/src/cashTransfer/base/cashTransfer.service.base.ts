/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CashTransfer as PrismaCashTransfer } from "@prisma/client";

export class CashTransferServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CashTransferCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cashTransfer.count(args);
  }

  async cashTransfers(
    args: Prisma.CashTransferFindManyArgs
  ): Promise<PrismaCashTransfer[]> {
    return this.prisma.cashTransfer.findMany(args);
  }
  async cashTransfer(
    args: Prisma.CashTransferFindUniqueArgs
  ): Promise<PrismaCashTransfer | null> {
    return this.prisma.cashTransfer.findUnique(args);
  }
  async createCashTransfer(
    args: Prisma.CashTransferCreateArgs
  ): Promise<PrismaCashTransfer> {
    return this.prisma.cashTransfer.create(args);
  }
  async updateCashTransfer(
    args: Prisma.CashTransferUpdateArgs
  ): Promise<PrismaCashTransfer> {
    return this.prisma.cashTransfer.update(args);
  }
  async deleteCashTransfer(
    args: Prisma.CashTransferDeleteArgs
  ): Promise<PrismaCashTransfer> {
    return this.prisma.cashTransfer.delete(args);
  }
}
