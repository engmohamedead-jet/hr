/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TransactionType as PrismaTransactionType,
  AccountTransactionDetail as PrismaAccountTransactionDetail,
} from "@prisma/client";

export class TransactionTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TransactionTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.transactionType.count(args);
  }

  async transactionTypes(
    args: Prisma.TransactionTypeFindManyArgs
  ): Promise<PrismaTransactionType[]> {
    return this.prisma.transactionType.findMany(args);
  }
  async transactionType(
    args: Prisma.TransactionTypeFindUniqueArgs
  ): Promise<PrismaTransactionType | null> {
    return this.prisma.transactionType.findUnique(args);
  }
  async createTransactionType(
    args: Prisma.TransactionTypeCreateArgs
  ): Promise<PrismaTransactionType> {
    return this.prisma.transactionType.create(args);
  }
  async updateTransactionType(
    args: Prisma.TransactionTypeUpdateArgs
  ): Promise<PrismaTransactionType> {
    return this.prisma.transactionType.update(args);
  }
  async deleteTransactionType(
    args: Prisma.TransactionTypeDeleteArgs
  ): Promise<PrismaTransactionType> {
    return this.prisma.transactionType.delete(args);
  }

  async findAccountTransactionDetails(
    parentId: number,
    args: Prisma.AccountTransactionDetailFindManyArgs
  ): Promise<PrismaAccountTransactionDetail[]> {
    return this.prisma.transactionType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accountTransactionDetails(args);
  }
}
