/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { StateService } from "../state.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { StateCreateInput } from "./StateCreateInput";
import { State } from "./State";
import { StateFindManyArgs } from "./StateFindManyArgs";
import { StateWhereUniqueInput } from "./StateWhereUniqueInput";
import { StateUpdateInput } from "./StateUpdateInput";
import { BankFindManyArgs } from "../../bank/base/BankFindManyArgs";
import { Bank } from "../../bank/base/Bank";
import { BankWhereUniqueInput } from "../../bank/base/BankWhereUniqueInput";
import { CityFindManyArgs } from "../../city/base/CityFindManyArgs";
import { City } from "../../city/base/City";
import { CityWhereUniqueInput } from "../../city/base/CityWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class StateControllerBase {
  constructor(
    protected readonly service: StateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: State })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createState(@common.Body() data: StateCreateInput): Promise<State> {
    return await this.service.createState({
      data: {
        ...data,

        countryId: {
          connect: data.countryId,
        },
      },
      select: {
        code: true,

        countryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        note: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [State] })
  @ApiNestedQuery(StateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async states(@common.Req() request: Request): Promise<State[]> {
    const args = plainToClass(StateFindManyArgs, request.query);
    return this.service.states({
      ...args,
      select: {
        code: true,

        countryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        note: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async state(
    @common.Param() params: StateWhereUniqueInput
  ): Promise<State | null> {
    const result = await this.service.state({
      where: params,
      select: {
        code: true,

        countryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        note: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateState(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() data: StateUpdateInput
  ): Promise<State | null> {
    try {
      return await this.service.updateState({
        where: params,
        data: {
          ...data,

          countryId: {
            connect: data.countryId,
          },
        },
        select: {
          code: true,

          countryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          note: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: State })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteState(
    @common.Param() params: StateWhereUniqueInput
  ): Promise<State | null> {
    try {
      return await this.service.deleteState({
        where: params,
        select: {
          code: true,

          countryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          note: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/banks")
  @ApiNestedQuery(BankFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bank",
    action: "read",
    possession: "any",
  })
  async findBanks(
    @common.Req() request: Request,
    @common.Param() params: StateWhereUniqueInput
  ): Promise<Bank[]> {
    const query = plainToClass(BankFindManyArgs, request.query);
    const results = await this.service.findBanks(params.id, {
      ...query,
      select: {
        address: true,
        cellPhoneNumber: true,

        cityId: {
          select: {
            id: true,
          },
        },

        code: true,
        contactPhoneNumber: true,

        countryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        fax: true,
        homePhoneNumber: true,
        id: true,
        name: true,
        normalizedName: true,
        note: true,
        relationshipOfficerContactNumber: true,
        relationshipOfficerName: true,

        stateId: {
          select: {
            id: true,
          },
        },

        street: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/banks")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async connectBanks(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: BankWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      banks: {
        connect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/banks")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async updateBanks(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: BankWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      banks: {
        set: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/banks")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async disconnectBanks(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: BankWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      banks: {
        disconnect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cities")
  @ApiNestedQuery(CityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "City",
    action: "read",
    possession: "any",
  })
  async findCities(
    @common.Req() request: Request,
    @common.Param() params: StateWhereUniqueInput
  ): Promise<City[]> {
    const query = plainToClass(CityFindManyArgs, request.query);
    const results = await this.service.findCities(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        note: true,

        stateId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cities")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async connectCities(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        connect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cities")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async updateCities(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        set: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cities")
  @nestAccessControl.UseRoles({
    resource: "State",
    action: "update",
    possession: "any",
  })
  async disconnectCities(
    @common.Param() params: StateWhereUniqueInput,
    @common.Body() body: CityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cities: {
        disconnect: body,
      },
    };
    await this.service.updateState({
      where: params,
      data,
      select: { id: true },
    });
  }
}
