/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalePerson } from "./SalePerson";
import { SalePersonCountArgs } from "./SalePersonCountArgs";
import { SalePersonFindManyArgs } from "./SalePersonFindManyArgs";
import { SalePersonFindUniqueArgs } from "./SalePersonFindUniqueArgs";
import { CreateSalePersonArgs } from "./CreateSalePersonArgs";
import { UpdateSalePersonArgs } from "./UpdateSalePersonArgs";
import { DeleteSalePersonArgs } from "./DeleteSalePersonArgs";
import { Account } from "../../account/base/Account";
import { Employee } from "../../employee/base/Employee";
import { SaleTeam } from "../../saleTeam/base/SaleTeam";
import { Tenant } from "../../tenant/base/Tenant";
import { SalePersonService } from "../salePerson.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalePerson)
export class SalePersonResolverBase {
  constructor(
    protected readonly service: SalePersonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async _salePeopleMeta(
    @graphql.Args() args: SalePersonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalePerson])
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async salePeople(
    @graphql.Args() args: SalePersonFindManyArgs
  ): Promise<SalePerson[]> {
    return this.service.salePeople(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalePerson, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "own",
  })
  async salePerson(
    @graphql.Args() args: SalePersonFindUniqueArgs
  ): Promise<SalePerson | null> {
    const result = await this.service.salePerson(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalePerson)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "create",
    possession: "any",
  })
  async createSalePerson(
    @graphql.Args() args: CreateSalePersonArgs
  ): Promise<SalePerson> {
    return await this.service.createSalePerson({
      ...args,
      data: {
        ...args.data,

        accountId: args.data.accountId
          ? {
              connect: args.data.accountId,
            }
          : undefined,

        employeeId: args.data.employeeId
          ? {
              connect: args.data.employeeId,
            }
          : undefined,

        saleTeamId: {
          connect: args.data.saleTeamId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalePerson)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "update",
    possession: "any",
  })
  async updateSalePerson(
    @graphql.Args() args: UpdateSalePersonArgs
  ): Promise<SalePerson | null> {
    try {
      return await this.service.updateSalePerson({
        ...args,
        data: {
          ...args.data,

          accountId: args.data.accountId
            ? {
                connect: args.data.accountId,
              }
            : undefined,

          employeeId: args.data.employeeId
            ? {
                connect: args.data.employeeId,
              }
            : undefined,

          saleTeamId: {
            connect: args.data.saleTeamId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalePerson)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "delete",
    possession: "any",
  })
  async deleteSalePerson(
    @graphql.Args() args: DeleteSalePersonArgs
  ): Promise<SalePerson | null> {
    try {
      return await this.service.deleteSalePerson(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "accountId",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getAccountId(
    @graphql.Parent() parent: SalePerson
  ): Promise<Account | null> {
    const result = await this.service.getAccountId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployeeId(
    @graphql.Parent() parent: SalePerson
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SaleTeam, {
    nullable: true,
    name: "saleTeamId",
  })
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "any",
  })
  async getSaleTeamId(
    @graphql.Parent() parent: SalePerson
  ): Promise<SaleTeam | null> {
    const result = await this.service.getSaleTeamId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: SalePerson
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
