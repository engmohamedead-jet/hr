/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CustomerType as PrismaCustomerType,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class CustomerTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerType.count(args);
  }

  async customerTypes(
    args: Prisma.CustomerTypeFindManyArgs
  ): Promise<PrismaCustomerType[]> {
    return this.prisma.customerType.findMany(args);
  }
  async customerType(
    args: Prisma.CustomerTypeFindUniqueArgs
  ): Promise<PrismaCustomerType | null> {
    return this.prisma.customerType.findUnique(args);
  }
  async createCustomerType(
    args: Prisma.CustomerTypeCreateArgs
  ): Promise<PrismaCustomerType> {
    return this.prisma.customerType.create(args);
  }
  async updateCustomerType(
    args: Prisma.CustomerTypeUpdateArgs
  ): Promise<PrismaCustomerType> {
    return this.prisma.customerType.update(args);
  }
  async deleteCustomerType(
    args: Prisma.CustomerTypeDeleteArgs
  ): Promise<PrismaCustomerType> {
    return this.prisma.customerType.delete(args);
  }

  async findCustomers(
    parentId: number,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.customerType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customers(args);
  }
}
