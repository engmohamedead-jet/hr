/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomerService } from "../customer.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomerCreateInput } from "./CustomerCreateInput";
import { Customer } from "./Customer";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { CustomerUpdateInput } from "./CustomerUpdateInput";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceContractWhereUniqueInput } from "../../maintenanceContract/base/MaintenanceContractWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomerControllerBase {
  constructor(
    protected readonly service: CustomerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Customer })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomer(
    @common.Body() data: CustomerCreateInput
  ): Promise<Customer> {
    return await this.service.createCustomer({
      data: {
        ...data,

        currencyId: data.currencyId
          ? {
              connect: data.currencyId,
            }
          : undefined,

        customerCateogryId: data.customerCateogryId
          ? {
              connect: data.customerCateogryId,
            }
          : undefined,

        customerTypeId: data.customerTypeId
          ? {
              connect: data.customerTypeId,
            }
          : undefined,

        guarantorRatingId: data.guarantorRatingId
          ? {
              connect: data.guarantorRatingId,
            }
          : undefined,

        rating: data.rating
          ? {
              connect: data.rating,
            }
          : undefined,

        salePriceTypeId: data.salePriceTypeId
          ? {
              connect: data.salePriceTypeId,
            }
          : undefined,

        supplierId: data.supplierId
          ? {
              connect: data.supplierId,
            }
          : undefined,
      },
      select: {
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        customerCateogryId: {
          select: {
            id: true,
          },
        },

        customerTypeId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        firstBalance: true,
        firstBalanceDate: true,
        guarantorAddress: true,
        guarantorJobTitle: true,
        guarantorName: true,
        guarantorNationalIdNumber: true,
        guarantorPhoneNumber: true,

        guarantorRatingId: {
          select: {
            id: true,
          },
        },

        guarantorWorkAddress: true,
        hasMortalOrDiscount: true,
        hasNoPendingInvoices: true,
        id: true,
        isActive: true,
        isComplain: true,
        isSystem: true,
        isUnderRevision: true,
        jobTitle: true,
        maxAllowedDebit: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,
        previousBalance: true,

        rating: {
          select: {
            id: true,
          },
        },

        revisionDate: true,
        saleDiscountRate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        taxNumber: true,
        updatedAt: true,
        website: true,
        workAddress: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Customer] })
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customers(@common.Req() request: Request): Promise<Customer[]> {
    const args = plainToClass(CustomerFindManyArgs, request.query);
    return this.service.customers({
      ...args,
      select: {
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        customerCateogryId: {
          select: {
            id: true,
          },
        },

        customerTypeId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        firstBalance: true,
        firstBalanceDate: true,
        guarantorAddress: true,
        guarantorJobTitle: true,
        guarantorName: true,
        guarantorNationalIdNumber: true,
        guarantorPhoneNumber: true,

        guarantorRatingId: {
          select: {
            id: true,
          },
        },

        guarantorWorkAddress: true,
        hasMortalOrDiscount: true,
        hasNoPendingInvoices: true,
        id: true,
        isActive: true,
        isComplain: true,
        isSystem: true,
        isUnderRevision: true,
        jobTitle: true,
        maxAllowedDebit: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,
        previousBalance: true,

        rating: {
          select: {
            id: true,
          },
        },

        revisionDate: true,
        saleDiscountRate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        taxNumber: true,
        updatedAt: true,
        website: true,
        workAddress: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    const result = await this.service.customer({
      where: params,
      select: {
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        customerCateogryId: {
          select: {
            id: true,
          },
        },

        customerTypeId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        firstBalance: true,
        firstBalanceDate: true,
        guarantorAddress: true,
        guarantorJobTitle: true,
        guarantorName: true,
        guarantorNationalIdNumber: true,
        guarantorPhoneNumber: true,

        guarantorRatingId: {
          select: {
            id: true,
          },
        },

        guarantorWorkAddress: true,
        hasMortalOrDiscount: true,
        hasNoPendingInvoices: true,
        id: true,
        isActive: true,
        isComplain: true,
        isSystem: true,
        isUnderRevision: true,
        jobTitle: true,
        maxAllowedDebit: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,
        previousBalance: true,

        rating: {
          select: {
            id: true,
          },
        },

        revisionDate: true,
        saleDiscountRate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        taxNumber: true,
        updatedAt: true,
        website: true,
        workAddress: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomer(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() data: CustomerUpdateInput
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        where: params,
        data: {
          ...data,

          currencyId: data.currencyId
            ? {
                connect: data.currencyId,
              }
            : undefined,

          customerCateogryId: data.customerCateogryId
            ? {
                connect: data.customerCateogryId,
              }
            : undefined,

          customerTypeId: data.customerTypeId
            ? {
                connect: data.customerTypeId,
              }
            : undefined,

          guarantorRatingId: data.guarantorRatingId
            ? {
                connect: data.guarantorRatingId,
              }
            : undefined,

          rating: data.rating
            ? {
                connect: data.rating,
              }
            : undefined,

          salePriceTypeId: data.salePriceTypeId
            ? {
                connect: data.salePriceTypeId,
              }
            : undefined,

          supplierId: data.supplierId
            ? {
                connect: data.supplierId,
              }
            : undefined,
        },
        select: {
          address: true,
          code: true,
          createdAt: true,
          credit: true,

          currencyId: {
            select: {
              id: true,
            },
          },

          customerCateogryId: {
            select: {
              id: true,
            },
          },

          customerTypeId: {
            select: {
              id: true,
            },
          },

          debit: true,
          description: true,
          email: true,
          firstBalance: true,
          firstBalanceDate: true,
          guarantorAddress: true,
          guarantorJobTitle: true,
          guarantorName: true,
          guarantorNationalIdNumber: true,
          guarantorPhoneNumber: true,

          guarantorRatingId: {
            select: {
              id: true,
            },
          },

          guarantorWorkAddress: true,
          hasMortalOrDiscount: true,
          hasNoPendingInvoices: true,
          id: true,
          isActive: true,
          isComplain: true,
          isSystem: true,
          isUnderRevision: true,
          jobTitle: true,
          maxAllowedDebit: true,
          name: true,
          normalizedName: true,
          note: true,
          phoneNumber: true,
          previousBalance: true,

          rating: {
            select: {
              id: true,
            },
          },

          revisionDate: true,
          saleDiscountRate: true,

          salePriceTypeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          taxNumber: true,
          updatedAt: true,
          website: true,
          workAddress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Customer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomer(
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer({
        where: params,
        select: {
          address: true,
          code: true,
          createdAt: true,
          credit: true,

          currencyId: {
            select: {
              id: true,
            },
          },

          customerCateogryId: {
            select: {
              id: true,
            },
          },

          customerTypeId: {
            select: {
              id: true,
            },
          },

          debit: true,
          description: true,
          email: true,
          firstBalance: true,
          firstBalanceDate: true,
          guarantorAddress: true,
          guarantorJobTitle: true,
          guarantorName: true,
          guarantorNationalIdNumber: true,
          guarantorPhoneNumber: true,

          guarantorRatingId: {
            select: {
              id: true,
            },
          },

          guarantorWorkAddress: true,
          hasMortalOrDiscount: true,
          hasNoPendingInvoices: true,
          id: true,
          isActive: true,
          isComplain: true,
          isSystem: true,
          isUnderRevision: true,
          jobTitle: true,
          maxAllowedDebit: true,
          name: true,
          normalizedName: true,
          note: true,
          phoneNumber: true,
          previousBalance: true,

          rating: {
            select: {
              id: true,
            },
          },

          revisionDate: true,
          saleDiscountRate: true,

          salePriceTypeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          taxNumber: true,
          updatedAt: true,
          website: true,
          workAddress: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceContracts")
  @ApiNestedQuery(MaintenanceContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @common.Req() request: Request,
    @common.Param() params: CustomerWhereUniqueInput
  ): Promise<MaintenanceContract[]> {
    const query = plainToClass(MaintenanceContractFindManyArgs, request.query);
    const results = await this.service.findMaintenanceContracts(params.id, {
      ...query,
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceContracts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        connect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceContracts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        set: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceContracts(
    @common.Param() params: CustomerWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        disconnect: body,
      },
    };
    await this.service.updateCustomer({
      where: params,
      data,
      select: { id: true },
    });
  }
}
