/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tenant } from "./Tenant";
import { TenantCountArgs } from "./TenantCountArgs";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantFindUniqueArgs } from "./TenantFindUniqueArgs";
import { CreateTenantArgs } from "./CreateTenantArgs";
import { UpdateTenantArgs } from "./UpdateTenantArgs";
import { DeleteTenantArgs } from "./DeleteTenantArgs";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { ApplicationDependencyFindManyArgs } from "../../applicationDependency/base/ApplicationDependencyFindManyArgs";
import { ApplicationDependency } from "../../applicationDependency/base/ApplicationDependency";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { AttributeValueFindManyArgs } from "../../attributeValue/base/AttributeValueFindManyArgs";
import { AttributeValue } from "../../attributeValue/base/AttributeValue";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { BankBranchFindManyArgs } from "../../bankBranch/base/BankBranchFindManyArgs";
import { BankBranch } from "../../bankBranch/base/BankBranch";
import { BankTypeFindManyArgs } from "../../bankType/base/BankTypeFindManyArgs";
import { BankType } from "../../bankType/base/BankType";
import { BarcodeTypeFindManyArgs } from "../../barcodeType/base/BarcodeTypeFindManyArgs";
import { BarcodeType } from "../../barcodeType/base/BarcodeType";
import { BillOfMaterialDetailFindManyArgs } from "../../billOfMaterialDetail/base/BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { BillOfMaterialTypeFindManyArgs } from "../../billOfMaterialType/base/BillOfMaterialTypeFindManyArgs";
import { BillOfMaterialType } from "../../billOfMaterialType/base/BillOfMaterialType";
import { BillOfMaterialFindManyArgs } from "../../billOfMaterial/base/BillOfMaterialFindManyArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { CashRepositoryFindManyArgs } from "../../cashRepository/base/CashRepositoryFindManyArgs";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { CurrencyFindManyArgs } from "../../currency/base/CurrencyFindManyArgs";
import { Currency } from "../../currency/base/Currency";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { EmployeeClassFindManyArgs } from "../../employeeClass/base/EmployeeClassFindManyArgs";
import { EmployeeClass } from "../../employeeClass/base/EmployeeClass";
import { EmployeeDepartmentFindManyArgs } from "../../employeeDepartment/base/EmployeeDepartmentFindManyArgs";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { InstallmentSaleFeeFindManyArgs } from "../../installmentSaleFee/base/InstallmentSaleFeeFindManyArgs";
import { InstallmentSaleFee } from "../../installmentSaleFee/base/InstallmentSaleFee";
import { InvoiceTypeFindManyArgs } from "../../invoiceType/base/InvoiceTypeFindManyArgs";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { OrderStatusFindManyArgs } from "../../orderStatus/base/OrderStatusFindManyArgs";
import { OrderStatus } from "../../orderStatus/base/OrderStatus";
import { PaymentMethodFindManyArgs } from "../../paymentMethod/base/PaymentMethodFindManyArgs";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { PaymentStatusFindManyArgs } from "../../paymentStatus/base/PaymentStatusFindManyArgs";
import { PaymentStatus } from "../../paymentStatus/base/PaymentStatus";
import { PaymentTermFindManyArgs } from "../../paymentTerm/base/PaymentTermFindManyArgs";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentTypeFindManyArgs } from "../../paymentType/base/PaymentTypeFindManyArgs";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { PeriodFindManyArgs } from "../../period/base/PeriodFindManyArgs";
import { Period } from "../../period/base/Period";
import { PrintTemplateContentFindManyArgs } from "../../printTemplateContent/base/PrintTemplateContentFindManyArgs";
import { PrintTemplateContent } from "../../printTemplateContent/base/PrintTemplateContent";
import { PrintTemplateGroupFindManyArgs } from "../../printTemplateGroup/base/PrintTemplateGroupFindManyArgs";
import { PrintTemplateGroup } from "../../printTemplateGroup/base/PrintTemplateGroup";
import { PrintTemplateFindManyArgs } from "../../printTemplate/base/PrintTemplateFindManyArgs";
import { PrintTemplate } from "../../printTemplate/base/PrintTemplate";
import { ProductBarcodeFindManyArgs } from "../../productBarcode/base/ProductBarcodeFindManyArgs";
import { ProductBarcode } from "../../productBarcode/base/ProductBarcode";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductDepartmentFindManyArgs } from "../../productDepartment/base/ProductDepartmentFindManyArgs";
import { ProductDepartment } from "../../productDepartment/base/ProductDepartment";
import { ProductGroupFindManyArgs } from "../../productGroup/base/ProductGroupFindManyArgs";
import { ProductGroup } from "../../productGroup/base/ProductGroup";
import { ProductTypeFindManyArgs } from "../../productType/base/ProductTypeFindManyArgs";
import { ProductType } from "../../productType/base/ProductType";
import { ProductUnitFindManyArgs } from "../../productUnit/base/ProductUnitFindManyArgs";
import { ProductUnit } from "../../productUnit/base/ProductUnit";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductionAvailabilityFindManyArgs } from "../../productionAvailability/base/ProductionAvailabilityFindManyArgs";
import { ProductionAvailability } from "../../productionAvailability/base/ProductionAvailability";
import { ProductionDocumentFindManyArgs } from "../../productionDocument/base/ProductionDocumentFindManyArgs";
import { ProductionDocument } from "../../productionDocument/base/ProductionDocument";
import { ProductionOrderFindManyArgs } from "../../productionOrder/base/ProductionOrderFindManyArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { PurchaseDetailFindManyArgs } from "../../purchaseDetail/base/PurchaseDetailFindManyArgs";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchasePriceTypeFindManyArgs } from "../../purchasePriceType/base/PurchasePriceTypeFindManyArgs";
import { PurchasePriceType } from "../../purchasePriceType/base/PurchasePriceType";
import { PurchaseReturnDetailFindManyArgs } from "../../purchaseReturnDetail/base/PurchaseReturnDetailFindManyArgs";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { PurchaseReturnFindManyArgs } from "../../purchaseReturn/base/PurchaseReturnFindManyArgs";
import { PurchaseReturn } from "../../purchaseReturn/base/PurchaseReturn";
import { PurchaseFindManyArgs } from "../../purchase/base/PurchaseFindManyArgs";
import { Purchase } from "../../purchase/base/Purchase";
import { ResourceTypeFindManyArgs } from "../../resourceType/base/ResourceTypeFindManyArgs";
import { ResourceType } from "../../resourceType/base/ResourceType";
import { ResourceFindManyArgs } from "../../resource/base/ResourceFindManyArgs";
import { Resource } from "../../resource/base/Resource";
import { RoleGroupFindManyArgs } from "../../roleGroup/base/RoleGroupFindManyArgs";
import { RoleGroup } from "../../roleGroup/base/RoleGroup";
import { SalaryItemGroupFindManyArgs } from "../../salaryItemGroup/base/SalaryItemGroupFindManyArgs";
import { SalaryItemGroup } from "../../salaryItemGroup/base/SalaryItemGroup";
import { SalaryItemTypeFindManyArgs } from "../../salaryItemType/base/SalaryItemTypeFindManyArgs";
import { SalaryItemType } from "../../salaryItemType/base/SalaryItemType";
import { SalaryItemFindManyArgs } from "../../salaryItem/base/SalaryItemFindManyArgs";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { SalaryLawFindManyArgs } from "../../salaryLaw/base/SalaryLawFindManyArgs";
import { SalaryLaw } from "../../salaryLaw/base/SalaryLaw";
import { SaleDetailFindManyArgs } from "../../saleDetail/base/SaleDetailFindManyArgs";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SaleOrderDetailFindManyArgs } from "../../saleOrderDetail/base/SaleOrderDetailFindManyArgs";
import { SaleOrderDetail } from "../../saleOrderDetail/base/SaleOrderDetail";
import { SaleOrderFindManyArgs } from "../../saleOrder/base/SaleOrderFindManyArgs";
import { SaleOrder } from "../../saleOrder/base/SaleOrder";
import { SalePaymentFindManyArgs } from "../../salePayment/base/SalePaymentFindManyArgs";
import { SalePayment } from "../../salePayment/base/SalePayment";
import { SalePersonFindManyArgs } from "../../salePerson/base/SalePersonFindManyArgs";
import { SalePerson } from "../../salePerson/base/SalePerson";
import { SalePriceTypeFindManyArgs } from "../../salePriceType/base/SalePriceTypeFindManyArgs";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { SaleQuotationDetailFindManyArgs } from "../../saleQuotationDetail/base/SaleQuotationDetailFindManyArgs";
import { SaleQuotationDetail } from "../../saleQuotationDetail/base/SaleQuotationDetail";
import { SaleQuotationFindManyArgs } from "../../saleQuotation/base/SaleQuotationFindManyArgs";
import { SaleQuotation } from "../../saleQuotation/base/SaleQuotation";
import { SaleReturnDetailFindManyArgs } from "../../saleReturnDetail/base/SaleReturnDetailFindManyArgs";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { SaleReturnFindManyArgs } from "../../saleReturn/base/SaleReturnFindManyArgs";
import { SaleReturn } from "../../saleReturn/base/SaleReturn";
import { SaleTaxFindManyArgs } from "../../saleTax/base/SaleTaxFindManyArgs";
import { SaleTax } from "../../saleTax/base/SaleTax";
import { SaleTeamFindManyArgs } from "../../saleTeam/base/SaleTeamFindManyArgs";
import { SaleTeam } from "../../saleTeam/base/SaleTeam";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { ScrapReasonFindManyArgs } from "../../scrapReason/base/ScrapReasonFindManyArgs";
import { ScrapReason } from "../../scrapReason/base/ScrapReason";
import { ShippingStatusFindManyArgs } from "../../shippingStatus/base/ShippingStatusFindManyArgs";
import { ShippingStatus } from "../../shippingStatus/base/ShippingStatus";
import { StoreFindManyArgs } from "../../store/base/StoreFindManyArgs";
import { Store } from "../../store/base/Store";
import { SupplierFindManyArgs } from "../../supplier/base/SupplierFindManyArgs";
import { Supplier } from "../../supplier/base/Supplier";
import { UnitFindManyArgs } from "../../unit/base/UnitFindManyArgs";
import { Unit } from "../../unit/base/Unit";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { WorkCenterRoutingFindManyArgs } from "../../workCenterRouting/base/WorkCenterRoutingFindManyArgs";
import { WorkCenterRouting } from "../../workCenterRouting/base/WorkCenterRouting";
import { WorkCenterFindManyArgs } from "../../workCenter/base/WorkCenterFindManyArgs";
import { WorkCenter } from "../../workCenter/base/WorkCenter";
import { TenantService } from "../tenant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tenant)
export class TenantResolverBase {
  constructor(
    protected readonly service: TenantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async _tenantsMeta(
    @graphql.Args() args: TenantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tenant])
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async tenants(@graphql.Args() args: TenantFindManyArgs): Promise<Tenant[]> {
    return this.service.tenants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tenant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "own",
  })
  async tenant(
    @graphql.Args() args: TenantFindUniqueArgs
  ): Promise<Tenant | null> {
    const result = await this.service.tenant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "create",
    possession: "any",
  })
  async createTenant(@graphql.Args() args: CreateTenantArgs): Promise<Tenant> {
    return await this.service.createTenant({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateTenant(
    @graphql.Args() args: UpdateTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "delete",
    possession: "any",
  })
  async deleteTenant(
    @graphql.Args() args: DeleteTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account], { name: "accounts" })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ApplicationDependency], {
    name: "applicationDependencies",
  })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "any",
  })
  async findApplicationDependencies(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ApplicationDependencyFindManyArgs
  ): Promise<ApplicationDependency[]> {
    const results = await this.service.findApplicationDependencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Application], { name: "applications" })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findApplications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AttributeValue], { name: "attributeValues" })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "read",
    possession: "any",
  })
  async findAttributeValues(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AttributeValueFindManyArgs
  ): Promise<AttributeValue[]> {
    const results = await this.service.findAttributeValues(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attribute], { name: "attributes" })
  @nestAccessControl.UseRoles({
    resource: "Attribute",
    action: "read",
    possession: "any",
  })
  async findAttributes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AttributeFindManyArgs
  ): Promise<Attribute[]> {
    const results = await this.service.findAttributes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BankBranch], { name: "bankBranches" })
  @nestAccessControl.UseRoles({
    resource: "BankBranch",
    action: "read",
    possession: "any",
  })
  async findBankBranches(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BankBranchFindManyArgs
  ): Promise<BankBranch[]> {
    const results = await this.service.findBankBranches(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BankType], { name: "bankTypes" })
  @nestAccessControl.UseRoles({
    resource: "BankType",
    action: "read",
    possession: "any",
  })
  async findBankTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BankTypeFindManyArgs
  ): Promise<BankType[]> {
    const results = await this.service.findBankTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BarcodeType], { name: "barcodeTypes" })
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "any",
  })
  async findBarcodeTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BarcodeTypeFindManyArgs
  ): Promise<BarcodeType[]> {
    const results = await this.service.findBarcodeTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterialDetail], {
    name: "billOfMaterialDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BillOfMaterialDetailFindManyArgs
  ): Promise<BillOfMaterialDetail[]> {
    const results = await this.service.findBillOfMaterialDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterialType], {
    name: "billOfMaterialTypes",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BillOfMaterialTypeFindManyArgs
  ): Promise<BillOfMaterialType[]> {
    const results = await this.service.findBillOfMaterialTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterial], { name: "billOfMaterials" })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterials(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BillOfMaterialFindManyArgs
  ): Promise<BillOfMaterial[]> {
    const results = await this.service.findBillOfMaterials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CashRepository], { name: "cashRepositories" })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async findCashRepositories(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CashRepositoryFindManyArgs
  ): Promise<CashRepository[]> {
    const results = await this.service.findCashRepositories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Currency], { name: "currencies" })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async findCurrencies(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CurrencyFindManyArgs
  ): Promise<Currency[]> {
    const results = await this.service.findCurrencies(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Customer], { name: "customers" })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeClass], { name: "employeeClasses" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  async findEmployeeClasses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeClassFindManyArgs
  ): Promise<EmployeeClass[]> {
    const results = await this.service.findEmployeeClasses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeDepartment], {
    name: "employeeDepartments",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async findEmployeeDepartments(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeDepartmentFindManyArgs
  ): Promise<EmployeeDepartment[]> {
    const results = await this.service.findEmployeeDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InstallmentSaleFee], {
    name: "installmentSaleFees",
  })
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async findInstallmentSaleFees(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InstallmentSaleFeeFindManyArgs
  ): Promise<InstallmentSaleFee[]> {
    const results = await this.service.findInstallmentSaleFees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InvoiceType], { name: "invoiceTypes" })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async findInvoiceTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: InvoiceTypeFindManyArgs
  ): Promise<InvoiceType[]> {
    const results = await this.service.findInvoiceTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OrderStatus], { name: "orderStatuses" })
  @nestAccessControl.UseRoles({
    resource: "OrderStatus",
    action: "read",
    possession: "any",
  })
  async findOrderStatuses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OrderStatusFindManyArgs
  ): Promise<OrderStatus[]> {
    const results = await this.service.findOrderStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentMethod], { name: "paymentMethods" })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  async findPaymentMethods(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PaymentMethodFindManyArgs
  ): Promise<PaymentMethod[]> {
    const results = await this.service.findPaymentMethods(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentStatus], { name: "paymentStatuses" })
  @nestAccessControl.UseRoles({
    resource: "PaymentStatus",
    action: "read",
    possession: "any",
  })
  async findPaymentStatuses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PaymentStatusFindManyArgs
  ): Promise<PaymentStatus[]> {
    const results = await this.service.findPaymentStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentTerm], { name: "paymentTerms" })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async findPaymentTerms(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PaymentTermFindManyArgs
  ): Promise<PaymentTerm[]> {
    const results = await this.service.findPaymentTerms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentType], { name: "paymentTypes" })
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async findPaymentTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PaymentTypeFindManyArgs
  ): Promise<PaymentType[]> {
    const results = await this.service.findPaymentTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Period], { name: "periods" })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "any",
  })
  async findPeriods(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PeriodFindManyArgs
  ): Promise<Period[]> {
    const results = await this.service.findPeriods(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PrintTemplateContent], {
    name: "printTemplateContents",
  })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateContent",
    action: "read",
    possession: "any",
  })
  async findPrintTemplateContents(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PrintTemplateContentFindManyArgs
  ): Promise<PrintTemplateContent[]> {
    const results = await this.service.findPrintTemplateContents(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PrintTemplateGroup], {
    name: "printTemplateGroups",
  })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateGroup",
    action: "read",
    possession: "any",
  })
  async findPrintTemplateGroups(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PrintTemplateGroupFindManyArgs
  ): Promise<PrintTemplateGroup[]> {
    const results = await this.service.findPrintTemplateGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PrintTemplate], { name: "printTemplates" })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "read",
    possession: "any",
  })
  async findPrintTemplates(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PrintTemplateFindManyArgs
  ): Promise<PrintTemplate[]> {
    const results = await this.service.findPrintTemplates(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductBarcode], { name: "productBarcodes" })
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async findProductBarcodes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductBarcodeFindManyArgs
  ): Promise<ProductBarcode[]> {
    const results = await this.service.findProductBarcodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductCategory], { name: "productCategories" })
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async findProductCategories(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    const results = await this.service.findProductCategories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductDepartment], {
    name: "productDepartments",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "read",
    possession: "any",
  })
  async findProductDepartments(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductDepartmentFindManyArgs
  ): Promise<ProductDepartment[]> {
    const results = await this.service.findProductDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductGroup], { name: "productGroups" })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findProductGroups(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductGroupFindManyArgs
  ): Promise<ProductGroup[]> {
    const results = await this.service.findProductGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductType], { name: "productTypes" })
  @nestAccessControl.UseRoles({
    resource: "ProductType",
    action: "read",
    possession: "any",
  })
  async findProductTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductTypeFindManyArgs
  ): Promise<ProductType[]> {
    const results = await this.service.findProductTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductUnit], { name: "productUnits" })
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "read",
    possession: "any",
  })
  async findProductUnits(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductUnitFindManyArgs
  ): Promise<ProductUnit[]> {
    const results = await this.service.findProductUnits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductVariant], { name: "productVariants" })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async findProductVariants(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    const results = await this.service.findProductVariants(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductionAvailability], {
    name: "productionAvailabilities",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "read",
    possession: "any",
  })
  async findProductionAvailabilities(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductionAvailabilityFindManyArgs
  ): Promise<ProductionAvailability[]> {
    const results = await this.service.findProductionAvailabilities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductionDocument], {
    name: "productionDocuments",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "read",
    possession: "any",
  })
  async findProductionDocuments(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductionDocumentFindManyArgs
  ): Promise<ProductionDocument[]> {
    const results = await this.service.findProductionDocuments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductionOrder], { name: "productionOrders" })
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async findProductionOrders(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductionOrderFindManyArgs
  ): Promise<ProductionOrder[]> {
    const results = await this.service.findProductionOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseDetail], { name: "purchaseDetails" })
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PurchaseDetailFindManyArgs
  ): Promise<PurchaseDetail[]> {
    const results = await this.service.findPurchaseDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchasePriceType], {
    name: "purchasePriceTypes",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  async findPurchasePriceTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PurchasePriceTypeFindManyArgs
  ): Promise<PurchasePriceType[]> {
    const results = await this.service.findPurchasePriceTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseReturnDetail], {
    name: "purchaseReturnDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturnDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PurchaseReturnDetailFindManyArgs
  ): Promise<PurchaseReturnDetail[]> {
    const results = await this.service.findPurchaseReturnDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseReturn], { name: "purchaseReturns" })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturns(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PurchaseReturnFindManyArgs
  ): Promise<PurchaseReturn[]> {
    const results = await this.service.findPurchaseReturns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Purchase], { name: "purchases" })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async findPurchases(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: PurchaseFindManyArgs
  ): Promise<Purchase[]> {
    const results = await this.service.findPurchases(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ResourceType], { name: "resourceTypes" })
  @nestAccessControl.UseRoles({
    resource: "ResourceType",
    action: "read",
    possession: "any",
  })
  async findResourceTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ResourceTypeFindManyArgs
  ): Promise<ResourceType[]> {
    const results = await this.service.findResourceTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Resource], { name: "resources" })
  @nestAccessControl.UseRoles({
    resource: "Resource",
    action: "read",
    possession: "any",
  })
  async findResources(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ResourceFindManyArgs
  ): Promise<Resource[]> {
    const results = await this.service.findResources(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [RoleGroup], { name: "roleGroups" })
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "read",
    possession: "any",
  })
  async findRoleGroups(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: RoleGroupFindManyArgs
  ): Promise<RoleGroup[]> {
    const results = await this.service.findRoleGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryItemGroup], { name: "salaryItemGroups" })
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "read",
    possession: "any",
  })
  async findSalaryItemGroups(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalaryItemGroupFindManyArgs
  ): Promise<SalaryItemGroup[]> {
    const results = await this.service.findSalaryItemGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryItemType], { name: "salaryItemTypes" })
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "read",
    possession: "any",
  })
  async findSalaryItemTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalaryItemTypeFindManyArgs
  ): Promise<SalaryItemType[]> {
    const results = await this.service.findSalaryItemTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryItem], { name: "salaryItems" })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async findSalaryItems(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalaryItemFindManyArgs
  ): Promise<SalaryItem[]> {
    const results = await this.service.findSalaryItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryLaw], { name: "salaryLaws" })
  @nestAccessControl.UseRoles({
    resource: "SalaryLaw",
    action: "read",
    possession: "any",
  })
  async findSalaryLaws(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalaryLawFindManyArgs
  ): Promise<SalaryLaw[]> {
    const results = await this.service.findSalaryLaws(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleDetail], { name: "saleDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async findSaleDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleDetailFindManyArgs
  ): Promise<SaleDetail[]> {
    const results = await this.service.findSaleDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleOrderDetail], { name: "saleOrderDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "any",
  })
  async findSaleOrderDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleOrderDetailFindManyArgs
  ): Promise<SaleOrderDetail[]> {
    const results = await this.service.findSaleOrderDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleOrder], { name: "saleOrders" })
  @nestAccessControl.UseRoles({
    resource: "SaleOrder",
    action: "read",
    possession: "any",
  })
  async findSaleOrders(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleOrderFindManyArgs
  ): Promise<SaleOrder[]> {
    const results = await this.service.findSaleOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalePayment], { name: "salePayments" })
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async findSalePayments(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalePaymentFindManyArgs
  ): Promise<SalePayment[]> {
    const results = await this.service.findSalePayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalePerson], { name: "salePeople" })
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async findSalePeople(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalePersonFindManyArgs
  ): Promise<SalePerson[]> {
    const results = await this.service.findSalePeople(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalePriceType], { name: "salePriceTypes" })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async findSalePriceTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SalePriceTypeFindManyArgs
  ): Promise<SalePriceType[]> {
    const results = await this.service.findSalePriceTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleQuotationDetail], {
    name: "saleQuotationDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotationDetail",
    action: "read",
    possession: "any",
  })
  async findSaleQuotationDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleQuotationDetailFindManyArgs
  ): Promise<SaleQuotationDetail[]> {
    const results = await this.service.findSaleQuotationDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleQuotation], { name: "saleQuotations" })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "read",
    possession: "any",
  })
  async findSaleQuotations(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleQuotationFindManyArgs
  ): Promise<SaleQuotation[]> {
    const results = await this.service.findSaleQuotations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleReturnDetail], { name: "saleReturnDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleReturnDetail",
    action: "read",
    possession: "any",
  })
  async findSaleReturnDetails(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleReturnDetailFindManyArgs
  ): Promise<SaleReturnDetail[]> {
    const results = await this.service.findSaleReturnDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleReturn], { name: "saleReturns" })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async findSaleReturns(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleReturnFindManyArgs
  ): Promise<SaleReturn[]> {
    const results = await this.service.findSaleReturns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleTax], { name: "saleTaxes" })
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "any",
  })
  async findSaleTaxes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleTaxFindManyArgs
  ): Promise<SaleTax[]> {
    const results = await this.service.findSaleTaxes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleTeam], { name: "saleTeams" })
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "any",
  })
  async findSaleTeams(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleTeamFindManyArgs
  ): Promise<SaleTeam[]> {
    const results = await this.service.findSaleTeams(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Sale], { name: "sales" })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async findSales(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SaleFindManyArgs
  ): Promise<Sale[]> {
    const results = await this.service.findSales(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ScrapReason], { name: "scrapReasons" })
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async findScrapReasons(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ScrapReasonFindManyArgs
  ): Promise<ScrapReason[]> {
    const results = await this.service.findScrapReasons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ShippingStatus], { name: "shippingStatuses" })
  @nestAccessControl.UseRoles({
    resource: "ShippingStatus",
    action: "read",
    possession: "any",
  })
  async findShippingStatuses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ShippingStatusFindManyArgs
  ): Promise<ShippingStatus[]> {
    const results = await this.service.findShippingStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Store], { name: "stores" })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async findStores(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: StoreFindManyArgs
  ): Promise<Store[]> {
    const results = await this.service.findStores(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Supplier], { name: "suppliers" })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async findSuppliers(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: SupplierFindManyArgs
  ): Promise<Supplier[]> {
    const results = await this.service.findSuppliers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Unit], { name: "units" })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async findUnits(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: UnitFindManyArgs
  ): Promise<Unit[]> {
    const results = await this.service.findUnits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [User], { name: "users" })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: UserFindManyArgs
  ): Promise<User[]> {
    const results = await this.service.findUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterRouting], {
    name: "workCenterRoutings",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterRouting",
    action: "read",
    possession: "any",
  })
  async findWorkCenterRoutings(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterRoutingFindManyArgs
  ): Promise<WorkCenterRouting[]> {
    const results = await this.service.findWorkCenterRoutings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenter], { name: "workCenters" })
  @nestAccessControl.UseRoles({
    resource: "WorkCenter",
    action: "read",
    possession: "any",
  })
  async findWorkCenters(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterFindManyArgs
  ): Promise<WorkCenter[]> {
    const results = await this.service.findWorkCenters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
