/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerCateogry as PrismaCustomerCateogry,
  Customer as PrismaCustomer,
} from "@prisma/client";

export class CustomerCateogryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerCateogryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerCateogry.count(args);
  }

  async customerCateogries(
    args: Prisma.CustomerCateogryFindManyArgs
  ): Promise<PrismaCustomerCateogry[]> {
    return this.prisma.customerCateogry.findMany(args);
  }
  async customerCateogry(
    args: Prisma.CustomerCateogryFindUniqueArgs
  ): Promise<PrismaCustomerCateogry | null> {
    return this.prisma.customerCateogry.findUnique(args);
  }
  async createCustomerCateogry(
    args: Prisma.CustomerCateogryCreateArgs
  ): Promise<PrismaCustomerCateogry> {
    return this.prisma.customerCateogry.create(args);
  }
  async updateCustomerCateogry(
    args: Prisma.CustomerCateogryUpdateArgs
  ): Promise<PrismaCustomerCateogry> {
    return this.prisma.customerCateogry.update(args);
  }
  async deleteCustomerCateogry(
    args: Prisma.CustomerCateogryDeleteArgs
  ): Promise<PrismaCustomerCateogry> {
    return this.prisma.customerCateogry.delete(args);
  }

  async findCustomers(
    parentId: string,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.customerCateogry
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customers(args);
  }
}
