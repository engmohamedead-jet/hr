/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExpenseItem } from "./ExpenseItem";
import { ExpenseItemCountArgs } from "./ExpenseItemCountArgs";
import { ExpenseItemFindManyArgs } from "./ExpenseItemFindManyArgs";
import { ExpenseItemFindUniqueArgs } from "./ExpenseItemFindUniqueArgs";
import { CreateExpenseItemArgs } from "./CreateExpenseItemArgs";
import { UpdateExpenseItemArgs } from "./UpdateExpenseItemArgs";
import { DeleteExpenseItemArgs } from "./DeleteExpenseItemArgs";
import { PaymentVoucherFindManyArgs } from "../../paymentVoucher/base/PaymentVoucherFindManyArgs";
import { PaymentVoucher } from "../../paymentVoucher/base/PaymentVoucher";
import { Tenant } from "../../tenant/base/Tenant";
import { ExpenseItemService } from "../expenseItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExpenseItem)
export class ExpenseItemResolverBase {
  constructor(
    protected readonly service: ExpenseItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "read",
    possession: "any",
  })
  async _expenseItemsMeta(
    @graphql.Args() args: ExpenseItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExpenseItem])
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "read",
    possession: "any",
  })
  async expenseItems(
    @graphql.Args() args: ExpenseItemFindManyArgs
  ): Promise<ExpenseItem[]> {
    return this.service.expenseItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExpenseItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "read",
    possession: "own",
  })
  async expenseItem(
    @graphql.Args() args: ExpenseItemFindUniqueArgs
  ): Promise<ExpenseItem | null> {
    const result = await this.service.expenseItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseItem)
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "create",
    possession: "any",
  })
  async createExpenseItem(
    @graphql.Args() args: CreateExpenseItemArgs
  ): Promise<ExpenseItem> {
    return await this.service.createExpenseItem({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExpenseItem)
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "update",
    possession: "any",
  })
  async updateExpenseItem(
    @graphql.Args() args: UpdateExpenseItemArgs
  ): Promise<ExpenseItem | null> {
    try {
      return await this.service.updateExpenseItem({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExpenseItem)
  @nestAccessControl.UseRoles({
    resource: "ExpenseItem",
    action: "delete",
    possession: "any",
  })
  async deleteExpenseItem(
    @graphql.Args() args: DeleteExpenseItemArgs
  ): Promise<ExpenseItem | null> {
    try {
      return await this.service.deleteExpenseItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentVoucher], { name: "paymentVouchers" })
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "any",
  })
  async findPaymentVouchers(
    @graphql.Parent() parent: ExpenseItem,
    @graphql.Args() args: PaymentVoucherFindManyArgs
  ): Promise<PaymentVoucher[]> {
    const results = await this.service.findPaymentVouchers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: ExpenseItem
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
