/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PurchasePriceTypeService } from "../purchasePriceType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PurchasePriceTypeCreateInput } from "./PurchasePriceTypeCreateInput";
import { PurchasePriceType } from "./PurchasePriceType";
import { PurchasePriceTypeFindManyArgs } from "./PurchasePriceTypeFindManyArgs";
import { PurchasePriceTypeWhereUniqueInput } from "./PurchasePriceTypeWhereUniqueInput";
import { PurchasePriceTypeUpdateInput } from "./PurchasePriceTypeUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PurchasePriceTypeControllerBase {
  constructor(
    protected readonly service: PurchasePriceTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchasePriceType })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPurchasePriceType(
    @common.Body() data: PurchasePriceTypeCreateInput
  ): Promise<PurchasePriceType> {
    return await this.service.createPurchasePriceType({
      data: {
        ...data,

        purchaseDetails: data.purchaseDetails
          ? {
              connect: data.purchaseDetails,
            }
          : undefined,

        purchaseReturnDetails: data.purchaseReturnDetails
          ? {
              connect: data.purchaseReturnDetails,
            }
          : undefined,

        purchaseReturns: data.purchaseReturns
          ? {
              connect: data.purchaseReturns,
            }
          : undefined,

        purchases: data.purchases
          ? {
              connect: data.purchases,
            }
          : undefined,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        purchaseDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturnDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturns: {
          select: {
            id: true,
          },
        },

        purchases: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchasePriceType] })
  @ApiNestedQuery(PurchasePriceTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchasePriceTypes(
    @common.Req() request: Request
  ): Promise<PurchasePriceType[]> {
    const args = plainToClass(PurchasePriceTypeFindManyArgs, request.query);
    return this.service.purchasePriceTypes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        purchaseDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturnDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturns: {
          select: {
            id: true,
          },
        },

        purchases: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchasePriceType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchasePriceType(
    @common.Param() params: PurchasePriceTypeWhereUniqueInput
  ): Promise<PurchasePriceType | null> {
    const result = await this.service.purchasePriceType({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        purchaseDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturnDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturns: {
          select: {
            id: true,
          },
        },

        purchases: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchasePriceType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePurchasePriceType(
    @common.Param() params: PurchasePriceTypeWhereUniqueInput,
    @common.Body() data: PurchasePriceTypeUpdateInput
  ): Promise<PurchasePriceType | null> {
    try {
      return await this.service.updatePurchasePriceType({
        where: params,
        data: {
          ...data,

          purchaseDetails: data.purchaseDetails
            ? {
                connect: data.purchaseDetails,
              }
            : undefined,

          purchaseReturnDetails: data.purchaseReturnDetails
            ? {
                connect: data.purchaseReturnDetails,
              }
            : undefined,

          purchaseReturns: data.purchaseReturns
            ? {
                connect: data.purchaseReturns,
              }
            : undefined,

          purchases: data.purchases
            ? {
                connect: data.purchases,
              }
            : undefined,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          purchaseDetails: {
            select: {
              id: true,
            },
          },

          purchaseReturnDetails: {
            select: {
              id: true,
            },
          },

          purchaseReturns: {
            select: {
              id: true,
            },
          },

          purchases: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchasePriceType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePurchasePriceType(
    @common.Param() params: PurchasePriceTypeWhereUniqueInput
  ): Promise<PurchasePriceType | null> {
    try {
      return await this.service.deletePurchasePriceType({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          purchaseDetails: {
            select: {
              id: true,
            },
          },

          purchaseReturnDetails: {
            select: {
              id: true,
            },
          },

          purchaseReturns: {
            select: {
              id: true,
            },
          },

          purchases: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
