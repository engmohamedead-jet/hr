/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductionOrder } from "./ProductionOrder";
import { ProductionOrderCountArgs } from "./ProductionOrderCountArgs";
import { ProductionOrderFindManyArgs } from "./ProductionOrderFindManyArgs";
import { ProductionOrderFindUniqueArgs } from "./ProductionOrderFindUniqueArgs";
import { CreateProductionOrderArgs } from "./CreateProductionOrderArgs";
import { UpdateProductionOrderArgs } from "./UpdateProductionOrderArgs";
import { DeleteProductionOrderArgs } from "./DeleteProductionOrderArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { Customer } from "../../customer/base/Customer";
import { OrderStatus } from "../../orderStatus/base/OrderStatus";
import { Product } from "../../product/base/Product";
import { Store } from "../../store/base/Store";
import { Unit } from "../../unit/base/Unit";
import { ProductionOrderService } from "../productionOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductionOrder)
export class ProductionOrderResolverBase {
  constructor(
    protected readonly service: ProductionOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async _productionOrdersMeta(
    @graphql.Args() args: ProductionOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductionOrder])
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async productionOrders(
    @graphql.Args() args: ProductionOrderFindManyArgs
  ): Promise<ProductionOrder[]> {
    return this.service.productionOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductionOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "own",
  })
  async productionOrder(
    @graphql.Args() args: ProductionOrderFindUniqueArgs
  ): Promise<ProductionOrder | null> {
    const result = await this.service.productionOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionOrder)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "create",
    possession: "any",
  })
  async createProductionOrder(
    @graphql.Args() args: CreateProductionOrderArgs
  ): Promise<ProductionOrder> {
    return await this.service.createProductionOrder({
      ...args,
      data: {
        ...args.data,

        billOfMaterialId: args.data.billOfMaterialId
          ? {
              connect: args.data.billOfMaterialId,
            }
          : undefined,

        customerId: args.data.customerId
          ? {
              connect: args.data.customerId,
            }
          : undefined,

        orderStatusId: {
          connect: args.data.orderStatusId,
        },

        productId: {
          connect: args.data.productId,
        },

        storeId: {
          connect: args.data.storeId,
        },

        unit: {
          connect: args.data.unit,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionOrder)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "update",
    possession: "any",
  })
  async updateProductionOrder(
    @graphql.Args() args: UpdateProductionOrderArgs
  ): Promise<ProductionOrder | null> {
    try {
      return await this.service.updateProductionOrder({
        ...args,
        data: {
          ...args.data,

          billOfMaterialId: args.data.billOfMaterialId
            ? {
                connect: args.data.billOfMaterialId,
              }
            : undefined,

          customerId: args.data.customerId
            ? {
                connect: args.data.customerId,
              }
            : undefined,

          orderStatusId: {
            connect: args.data.orderStatusId,
          },

          productId: {
            connect: args.data.productId,
          },

          storeId: {
            connect: args.data.storeId,
          },

          unit: {
            connect: args.data.unit,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionOrder)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "delete",
    possession: "any",
  })
  async deleteProductionOrder(
    @graphql.Args() args: DeleteProductionOrderArgs
  ): Promise<ProductionOrder | null> {
    try {
      return await this.service.deleteProductionOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BillOfMaterial, {
    nullable: true,
    name: "billOfMaterialId",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async getBillOfMaterialId(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<BillOfMaterial | null> {
    const result = await this.service.getBillOfMaterialId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customerId",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomerId(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<Customer | null> {
    const result = await this.service.getCustomerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => OrderStatus, {
    nullable: true,
    name: "orderStatusId",
  })
  @nestAccessControl.UseRoles({
    resource: "OrderStatus",
    action: "read",
    possession: "any",
  })
  async getOrderStatusId(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<OrderStatus | null> {
    const result = await this.service.getOrderStatusId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unit",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnit(
    @graphql.Parent() parent: ProductionOrder
  ): Promise<Unit | null> {
    const result = await this.service.getUnit(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
