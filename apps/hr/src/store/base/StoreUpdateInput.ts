/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransactionDetailUpdateManyWithoutStoresInput } from "./AccountTransactionDetailUpdateManyWithoutStoresInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { AccountTransactionUpdateManyWithoutStoresInput } from "./AccountTransactionUpdateManyWithoutStoresInput";
import { CustomerElevatorUpdateManyWithoutStoresInput } from "./CustomerElevatorUpdateManyWithoutStoresInput";
import { ElevatorUpdateManyWithoutStoresInput } from "./ElevatorUpdateManyWithoutStoresInput";
import { FailureReportingUpdateManyWithoutStoresInput } from "./FailureReportingUpdateManyWithoutStoresInput";
import { MaintenanceContractUpdateManyWithoutStoresInput } from "./MaintenanceContractUpdateManyWithoutStoresInput";
import { MaintenanceVisitUpdateManyWithoutStoresInput } from "./MaintenanceVisitUpdateManyWithoutStoresInput";
import { NotificationUpdateManyWithoutStoresInput } from "./NotificationUpdateManyWithoutStoresInput";
import { OfficeWhereUniqueInput } from "../../office/base/OfficeWhereUniqueInput";
import { PeriodicMaintenanceOrderUpdateManyWithoutStoresInput } from "./PeriodicMaintenanceOrderUpdateManyWithoutStoresInput";
import { SaleTaxUpdateManyWithoutStoresInput } from "./SaleTaxUpdateManyWithoutStoresInput";
import { StoreTypeWhereUniqueInput } from "../../storeType/base/StoreTypeWhereUniqueInput";

@InputType()
class StoreUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AccountTransactionDetailUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => AccountTransactionDetailUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => AccountTransactionDetailUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  accountTransactionDetails?: AccountTransactionDetailUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => AccountTransactionUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => AccountTransactionUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => AccountTransactionUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  accountTransactions?: AccountTransactionUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  addressLine1?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  allowSale?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cellPhoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string;

  @ApiProperty({
    required: false,
    type: () => CustomerElevatorUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => CustomerElevatorUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => CustomerElevatorUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  customerElevators?: CustomerElevatorUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => ElevatorUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => ElevatorUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => ElevatorUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  elevators?: ElevatorUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => FailureReportingUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => FailureReportingUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => FailureReportingUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  failureReportings?: FailureReportingUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fax?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  homePhoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: () => MaintenanceContractUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceContractUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => MaintenanceContractUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  maintenanceContracts?: MaintenanceContractUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => MaintenanceVisitUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceVisitUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => MaintenanceVisitUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  maintenanceVisits?: MaintenanceVisitUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedName?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: () => NotificationUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => NotificationUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => NotificationUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  notifications?: NotificationUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => OfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => OfficeWhereUniqueInput, {
    nullable: true,
  })
  office?: OfficeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => PeriodicMaintenanceOrderUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrderUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => PeriodicMaintenanceOrderUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  periodicMaintenanceOrders?: PeriodicMaintenanceOrderUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => SaleTaxUpdateManyWithoutStoresInput,
  })
  @ValidateNested()
  @Type(() => SaleTaxUpdateManyWithoutStoresInput)
  @IsOptional()
  @Field(() => SaleTaxUpdateManyWithoutStoresInput, {
    nullable: true,
  })
  saleTaxes?: SaleTaxUpdateManyWithoutStoresInput;

  @ApiProperty({
    required: false,
    type: () => StoreTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => StoreTypeWhereUniqueInput, {
    nullable: true,
  })
  storeType?: StoreTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  street?: string | null;
}

export { StoreUpdateInput as StoreUpdateInput };
