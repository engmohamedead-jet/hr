/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductionAvailability } from "./ProductionAvailability";
import { ProductionAvailabilityCountArgs } from "./ProductionAvailabilityCountArgs";
import { ProductionAvailabilityFindManyArgs } from "./ProductionAvailabilityFindManyArgs";
import { ProductionAvailabilityFindUniqueArgs } from "./ProductionAvailabilityFindUniqueArgs";
import { CreateProductionAvailabilityArgs } from "./CreateProductionAvailabilityArgs";
import { UpdateProductionAvailabilityArgs } from "./UpdateProductionAvailabilityArgs";
import { DeleteProductionAvailabilityArgs } from "./DeleteProductionAvailabilityArgs";
import { ProductionAvailabilityService } from "../productionAvailability.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductionAvailability)
export class ProductionAvailabilityResolverBase {
  constructor(
    protected readonly service: ProductionAvailabilityService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "read",
    possession: "any",
  })
  async _productionAvailabilitiesMeta(
    @graphql.Args() args: ProductionAvailabilityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductionAvailability])
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "read",
    possession: "any",
  })
  async productionAvailabilities(
    @graphql.Args() args: ProductionAvailabilityFindManyArgs
  ): Promise<ProductionAvailability[]> {
    return this.service.productionAvailabilities(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductionAvailability, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "read",
    possession: "own",
  })
  async productionAvailability(
    @graphql.Args() args: ProductionAvailabilityFindUniqueArgs
  ): Promise<ProductionAvailability | null> {
    const result = await this.service.productionAvailability(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionAvailability)
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "create",
    possession: "any",
  })
  async createProductionAvailability(
    @graphql.Args() args: CreateProductionAvailabilityArgs
  ): Promise<ProductionAvailability> {
    return await this.service.createProductionAvailability({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionAvailability)
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "update",
    possession: "any",
  })
  async updateProductionAvailability(
    @graphql.Args() args: UpdateProductionAvailabilityArgs
  ): Promise<ProductionAvailability | null> {
    try {
      return await this.service.updateProductionAvailability({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionAvailability)
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "delete",
    possession: "any",
  })
  async deleteProductionAvailability(
    @graphql.Args() args: DeleteProductionAvailabilityArgs
  ): Promise<ProductionAvailability | null> {
    try {
      return await this.service.deleteProductionAvailability(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
