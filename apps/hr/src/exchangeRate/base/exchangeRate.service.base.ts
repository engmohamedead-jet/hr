/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ExchangeRate as PrismaExchangeRate } from "@prisma/client";

export class ExchangeRateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ExchangeRateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.exchangeRate.count(args);
  }

  async exchangeRates(
    args: Prisma.ExchangeRateFindManyArgs
  ): Promise<PrismaExchangeRate[]> {
    return this.prisma.exchangeRate.findMany(args);
  }
  async exchangeRate(
    args: Prisma.ExchangeRateFindUniqueArgs
  ): Promise<PrismaExchangeRate | null> {
    return this.prisma.exchangeRate.findUnique(args);
  }
  async createExchangeRate(
    args: Prisma.ExchangeRateCreateArgs
  ): Promise<PrismaExchangeRate> {
    return this.prisma.exchangeRate.create(args);
  }
  async updateExchangeRate(
    args: Prisma.ExchangeRateUpdateArgs
  ): Promise<PrismaExchangeRate> {
    return this.prisma.exchangeRate.update(args);
  }
  async deleteExchangeRate(
    args: Prisma.ExchangeRateDeleteArgs
  ): Promise<PrismaExchangeRate> {
    return this.prisma.exchangeRate.delete(args);
  }
}
