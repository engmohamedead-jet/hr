/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsInt,
  Max,
  IsOptional,
  ValidateNested,
  IsString,
  IsBoolean,
  MaxLength,
  IsDate,
} from "class-validator";

import { ElevatorWhereUniqueInput } from "../../elevator/base/ElevatorWhereUniqueInput";
import { Type } from "class-transformer";
import { FailureReportingUpdateManyWithoutCustomerUsersInput } from "./FailureReportingUpdateManyWithoutCustomerUsersInput";
import { MaintenanceContractUpdateManyWithoutCustomerUsersInput } from "./MaintenanceContractUpdateManyWithoutCustomerUsersInput";
import { PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput } from "./PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput";

@InputType()
class CustomerUserUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  accessFailedCount?: number | null;

  @ApiProperty({
    required: false,
    type: () => ElevatorWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ElevatorWhereUniqueInput)
  @IsOptional()
  @Field(() => ElevatorWhereUniqueInput, {
    nullable: true,
  })
  elevatorId?: ElevatorWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  email?: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  emailConfirmed?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  entityVersion?: string | null;

  @ApiProperty({
    required: false,
    type: () => FailureReportingUpdateManyWithoutCustomerUsersInput,
  })
  @ValidateNested()
  @Type(() => FailureReportingUpdateManyWithoutCustomerUsersInput)
  @IsOptional()
  @Field(() => FailureReportingUpdateManyWithoutCustomerUsersInput, {
    nullable: true,
  })
  failureReportings?: FailureReportingUpdateManyWithoutCustomerUsersInput;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isExternal?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lastPasswordChangeTime?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  lockoutEnabled?: boolean | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  lockoutEnd?: Date | null;

  @ApiProperty({
    required: false,
    type: () => MaintenanceContractUpdateManyWithoutCustomerUsersInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceContractUpdateManyWithoutCustomerUsersInput)
  @IsOptional()
  @Field(() => MaintenanceContractUpdateManyWithoutCustomerUsersInput, {
    nullable: true,
  })
  maintenanceContracts?: MaintenanceContractUpdateManyWithoutCustomerUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(64)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedEmail?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedUserName?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  passwordHash?: string | null;

  @ApiProperty({
    required: false,
    type: () => PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput,
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput)
  @IsOptional()
  @Field(() => PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput, {
    nullable: true,
  })
  periodicMaintenanceOrders?: PeriodicMaintenanceOrderUpdateManyWithoutCustomerUsersInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  phoneNumber?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  phoneNumberConfirmed?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  securityStamp?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  shouldChangePasswordOnNextLogin?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  surname?: string | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  twoFactorEnabled?: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  userName?: string;
}

export { CustomerUserUpdateInput as CustomerUserUpdateInput };
