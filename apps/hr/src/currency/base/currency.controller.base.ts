/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CurrencyService } from "../currency.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CurrencyCreateInput } from "./CurrencyCreateInput";
import { Currency } from "./Currency";
import { CurrencyFindManyArgs } from "./CurrencyFindManyArgs";
import { CurrencyWhereUniqueInput } from "./CurrencyWhereUniqueInput";
import { CurrencyUpdateInput } from "./CurrencyUpdateInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { PaymentVoucherFindManyArgs } from "../../paymentVoucher/base/PaymentVoucherFindManyArgs";
import { PaymentVoucher } from "../../paymentVoucher/base/PaymentVoucher";
import { PaymentVoucherWhereUniqueInput } from "../../paymentVoucher/base/PaymentVoucherWhereUniqueInput";
import { ReceiptVoucherFindManyArgs } from "../../receiptVoucher/base/ReceiptVoucherFindManyArgs";
import { ReceiptVoucher } from "../../receiptVoucher/base/ReceiptVoucher";
import { ReceiptVoucherWhereUniqueInput } from "../../receiptVoucher/base/ReceiptVoucherWhereUniqueInput";
import { SalePaymentFindManyArgs } from "../../salePayment/base/SalePaymentFindManyArgs";
import { SalePayment } from "../../salePayment/base/SalePayment";
import { SalePaymentWhereUniqueInput } from "../../salePayment/base/SalePaymentWhereUniqueInput";
import { SupplierFindManyArgs } from "../../supplier/base/SupplierFindManyArgs";
import { Supplier } from "../../supplier/base/Supplier";
import { SupplierWhereUniqueInput } from "../../supplier/base/SupplierWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CurrencyControllerBase {
  constructor(
    protected readonly service: CurrencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Currency })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCurrency(
    @common.Body() data: CurrencyCreateInput
  ): Promise<Currency> {
    return await this.service.createCurrency({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Currency] })
  @ApiNestedQuery(CurrencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async currencies(@common.Req() request: Request): Promise<Currency[]> {
    const args = plainToClass(CurrencyFindManyArgs, request.query);
    return this.service.currencies({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Currency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async currency(
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<Currency | null> {
    const result = await this.service.currency({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Currency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCurrency(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() data: CurrencyUpdateInput
  ): Promise<Currency | null> {
    try {
      return await this.service.updateCurrency({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Currency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCurrency(
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<Currency | null> {
    try {
      return await this.service.deleteCurrency({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @common.Req() request: Request,
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results = await this.service.findCustomers(params.id, {
      ...query,
      select: {
        DefaultSalePriceTypeId: true,
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        firstBalance: true,
        firstBalanceDate: true,
        id: true,
        isActive: true,
        isSystem: true,
        isUnderRevision: true,
        maxAllowedDebit: true,
        name: true,
        normalizedName: true,
        phoneNumber: true,
        previousBalance: true,
        revisionDate: true,
        saleDiscountRate: true,
        supplierId: true,
        taxNumber: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async connectCustomers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        connect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async updateCustomers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        set: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async disconnectCustomers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        disconnect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentVouchers")
  @ApiNestedQuery(PaymentVoucherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "any",
  })
  async findPaymentVouchers(
    @common.Req() request: Request,
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<PaymentVoucher[]> {
    const query = plainToClass(PaymentVoucherFindManyArgs, request.query);
    const results = await this.service.findPaymentVouchers(params.id, {
      ...query,
      select: {
        accountTransactionId: {
          select: {
            id: true,
          },
        },

        amount: true,

        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        currency: {
          select: {
            id: true,
          },
        },

        employeeId: {
          select: {
            id: true,
          },
        },

        expenseItemId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        note: true,
        paymentVoucherDate: true,
        statementReference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        voucherTypeId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async connectPaymentVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        connect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async updatePaymentVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        set: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        disconnect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/receiptVouchers")
  @ApiNestedQuery(ReceiptVoucherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "read",
    possession: "any",
  })
  async findReceiptVouchers(
    @common.Req() request: Request,
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<ReceiptVoucher[]> {
    const query = plainToClass(ReceiptVoucherFindManyArgs, request.query);
    const results = await this.service.findReceiptVouchers(params.id, {
      ...query,
      select: {
        accountTransactionId: {
          select: {
            id: true,
          },
        },

        amount: true,

        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        chequeDueDate: true,
        chequeNumber: true,
        chequeValue: true,
        createdAt: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        customerId: {
          select: {
            id: true,
          },
        },

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isAcive: true,
        note: true,
        receiptVoucherDate: true,
        sequence: true,
        statementReference: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        voucherTypeId: {
          select: {
            id: true,
          },
        },

        wasChequePaid: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async connectReceiptVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        connect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async updateReceiptVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        set: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async disconnectReceiptVouchers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        disconnect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePayments")
  @ApiNestedQuery(SalePaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async findSalePayments(
    @common.Req() request: Request,
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<SalePayment[]> {
    const query = plainToClass(SalePaymentFindManyArgs, request.query);
    const results = await this.service.findSalePayments(params.id, {
      ...query,
      select: {
        LocalCurrencyRatl: true,

        bank: {
          select: {
            id: true,
          },
        },

        bankBrach: true,

        bankBranch: {
          select: {
            id: true,
          },
        },

        chequeNumber: true,
        createdAt: true,
        creditCardNumber: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        foreignCurrencyRate: true,
        id: true,
        isCheque: true,
        note: true,
        paidValue: true,
        paymentDate: true,

        paymentMethodId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleId: {
          select: {
            id: true,
          },
        },

        seqeunce: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async connectSalePayments(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        connect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async updateSalePayments(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        set: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async disconnectSalePayments(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        disconnect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/suppliers")
  @ApiNestedQuery(SupplierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async findSuppliers(
    @common.Req() request: Request,
    @common.Param() params: CurrencyWhereUniqueInput
  ): Promise<Supplier[]> {
    const query = plainToClass(SupplierFindManyArgs, request.query);
    const results = await this.service.findSuppliers(params.id, {
      ...query,
      select: {
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currency: {
          select: {
            id: true,
          },
        },

        customerId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async connectSuppliers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        connect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async updateSuppliers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        set: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "update",
    possession: "any",
  })
  async disconnectSuppliers(
    @common.Param() params: CurrencyWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        disconnect: body,
      },
    };
    await this.service.updateCurrency({
      where: params,
      data,
      select: { id: true },
    });
  }
}
