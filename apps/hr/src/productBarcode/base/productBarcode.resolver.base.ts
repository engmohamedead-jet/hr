/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductBarcode } from "./ProductBarcode";
import { ProductBarcodeCountArgs } from "./ProductBarcodeCountArgs";
import { ProductBarcodeFindManyArgs } from "./ProductBarcodeFindManyArgs";
import { ProductBarcodeFindUniqueArgs } from "./ProductBarcodeFindUniqueArgs";
import { CreateProductBarcodeArgs } from "./CreateProductBarcodeArgs";
import { UpdateProductBarcodeArgs } from "./UpdateProductBarcodeArgs";
import { DeleteProductBarcodeArgs } from "./DeleteProductBarcodeArgs";
import { BarcodeType } from "../../barcodeType/base/BarcodeType";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductBarcodeService } from "../productBarcode.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductBarcode)
export class ProductBarcodeResolverBase {
  constructor(
    protected readonly service: ProductBarcodeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async _productBarcodesMeta(
    @graphql.Args() args: ProductBarcodeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductBarcode])
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async productBarcodes(
    @graphql.Args() args: ProductBarcodeFindManyArgs
  ): Promise<ProductBarcode[]> {
    return this.service.productBarcodes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductBarcode, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "own",
  })
  async productBarcode(
    @graphql.Args() args: ProductBarcodeFindUniqueArgs
  ): Promise<ProductBarcode | null> {
    const result = await this.service.productBarcode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductBarcode)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "create",
    possession: "any",
  })
  async createProductBarcode(
    @graphql.Args() args: CreateProductBarcodeArgs
  ): Promise<ProductBarcode> {
    return await this.service.createProductBarcode({
      ...args,
      data: {
        ...args.data,

        barcodeTypeId: args.data.barcodeTypeId
          ? {
              connect: args.data.barcodeTypeId,
            }
          : undefined,

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductBarcode)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "update",
    possession: "any",
  })
  async updateProductBarcode(
    @graphql.Args() args: UpdateProductBarcodeArgs
  ): Promise<ProductBarcode | null> {
    try {
      return await this.service.updateProductBarcode({
        ...args,
        data: {
          ...args.data,

          barcodeTypeId: args.data.barcodeTypeId
            ? {
                connect: args.data.barcodeTypeId,
              }
            : undefined,

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductBarcode)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "delete",
    possession: "any",
  })
  async deleteProductBarcode(
    @graphql.Args() args: DeleteProductBarcodeArgs
  ): Promise<ProductBarcode | null> {
    try {
      return await this.service.deleteProductBarcode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BarcodeType, {
    nullable: true,
    name: "barcodeTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "any",
  })
  async getBarcodeTypeId(
    @graphql.Parent() parent: ProductBarcode
  ): Promise<BarcodeType | null> {
    const result = await this.service.getBarcodeTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: ProductBarcode
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: ProductBarcode
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: ProductBarcode
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
