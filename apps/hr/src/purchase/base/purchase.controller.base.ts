/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PurchaseService } from "../purchase.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PurchaseCreateInput } from "./PurchaseCreateInput";
import { Purchase } from "./Purchase";
import { PurchaseFindManyArgs } from "./PurchaseFindManyArgs";
import { PurchaseWhereUniqueInput } from "./PurchaseWhereUniqueInput";
import { PurchaseUpdateInput } from "./PurchaseUpdateInput";
import { PurchaseDetailFindManyArgs } from "../../purchaseDetail/base/PurchaseDetailFindManyArgs";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchaseDetailWhereUniqueInput } from "../../purchaseDetail/base/PurchaseDetailWhereUniqueInput";
import { PurchaseReturnFindManyArgs } from "../../purchaseReturn/base/PurchaseReturnFindManyArgs";
import { PurchaseReturn } from "../../purchaseReturn/base/PurchaseReturn";
import { PurchaseReturnWhereUniqueInput } from "../../purchaseReturn/base/PurchaseReturnWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PurchaseControllerBase {
  constructor(
    protected readonly service: PurchaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Purchase })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPurchase(
    @common.Body() data: PurchaseCreateInput
  ): Promise<Purchase> {
    return await this.service.createPurchase({
      data: {
        ...data,

        cashRepositoryId: {
          connect: data.cashRepositoryId,
        },

        invoiceTypeId: data.invoiceTypeId
          ? {
              connect: data.invoiceTypeId,
            }
          : undefined,

        paymentTypeId: {
          connect: data.paymentTypeId,
        },

        purchasePriceTypeId: {
          connect: data.purchasePriceTypeId,
        },

        storeId: {
          connect: data.storeId,
        },

        supplierId: {
          connect: data.supplierId,
        },

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseDate: true,

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Purchase] })
  @ApiNestedQuery(PurchaseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchases(@common.Req() request: Request): Promise<Purchase[]> {
    const args = plainToClass(PurchaseFindManyArgs, request.query);
    return this.service.purchases({
      ...args,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseDate: true,

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchase(
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<Purchase | null> {
    const result = await this.service.purchase({
      where: params,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseDate: true,

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePurchase(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() data: PurchaseUpdateInput
  ): Promise<Purchase | null> {
    try {
      return await this.service.updatePurchase({
        where: params,
        data: {
          ...data,

          cashRepositoryId: {
            connect: data.cashRepositoryId,
          },

          invoiceTypeId: data.invoiceTypeId
            ? {
                connect: data.invoiceTypeId,
              }
            : undefined,

          paymentTypeId: {
            connect: data.paymentTypeId,
          },

          purchasePriceTypeId: {
            connect: data.purchasePriceTypeId,
          },

          storeId: {
            connect: data.storeId,
          },

          supplierId: {
            connect: data.supplierId,
          },

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          purchaseDate: true,

          purchasePriceTypeId: {
            select: {
              id: true,
            },
          },

          purchaseTotal: true,
          referenceNumber: true,
          remaining: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Purchase })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePurchase(
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<Purchase | null> {
    try {
      return await this.service.deletePurchase({
        where: params,
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          purchaseDate: true,

          purchasePriceTypeId: {
            select: {
              id: true,
            },
          },

          purchaseTotal: true,
          referenceNumber: true,
          remaining: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseDetails")
  @ApiNestedQuery(PurchaseDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseDetails(
    @common.Req() request: Request,
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<PurchaseDetail[]> {
    const query = plainToClass(PurchaseDetailFindManyArgs, request.query);
    const results = await this.service.findPurchaseDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async connectPurchaseDetails(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        connect: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async updatePurchaseDetails(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        set: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseDetails(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseReturns")
  @ApiNestedQuery(PurchaseReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturns(
    @common.Req() request: Request,
    @common.Param() params: PurchaseWhereUniqueInput
  ): Promise<PurchaseReturn[]> {
    const query = plainToClass(PurchaseReturnFindManyArgs, request.query);
    const results = await this.service.findPurchaseReturns(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnDate: true,
        purchaseReturnTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async connectPurchaseReturns(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        connect: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturns(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        set: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseReturns(
    @common.Param() params: PurchaseWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        disconnect: body,
      },
    };
    await this.service.updatePurchase({
      where: params,
      data,
      select: { id: true },
    });
  }
}
