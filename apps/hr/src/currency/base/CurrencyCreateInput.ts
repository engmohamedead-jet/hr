/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountCreateNestedManyWithoutCurrenciesInput } from "./AccountCreateNestedManyWithoutCurrenciesInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { CustomerCreateNestedManyWithoutCurrenciesInput } from "./CustomerCreateNestedManyWithoutCurrenciesInput";
import { ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput } from "./ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput";
import { ExchangeRateDetailWhereUniqueInput } from "../../exchangeRateDetail/base/ExchangeRateDetailWhereUniqueInput";
import { SupplierCreateNestedManyWithoutCurrenciesInput } from "./SupplierCreateNestedManyWithoutCurrenciesInput";

@InputType()
class CurrencyCreateInput {
  @ApiProperty({
    required: false,
    type: () => AccountCreateNestedManyWithoutCurrenciesInput,
  })
  @ValidateNested()
  @Type(() => AccountCreateNestedManyWithoutCurrenciesInput)
  @IsOptional()
  @Field(() => AccountCreateNestedManyWithoutCurrenciesInput, {
    nullable: true,
  })
  accounts?: AccountCreateNestedManyWithoutCurrenciesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(100)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: () => CustomerCreateNestedManyWithoutCurrenciesInput,
  })
  @ValidateNested()
  @Type(() => CustomerCreateNestedManyWithoutCurrenciesInput)
  @IsOptional()
  @Field(() => CustomerCreateNestedManyWithoutCurrenciesInput, {
    nullable: true,
  })
  customers?: CustomerCreateNestedManyWithoutCurrenciesInput;

  @ApiProperty({
    required: false,
    type: () => ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput,
  })
  @ValidateNested()
  @Type(() => ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput)
  @IsOptional()
  @Field(() => ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput, {
    nullable: true,
  })
  exchangeRateDetails?: ExchangeRateDetailCreateNestedManyWithoutCurrenciesInput;

  @ApiProperty({
    required: false,
    type: () => ExchangeRateDetailWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ExchangeRateDetailWhereUniqueInput)
  @IsOptional()
  @Field(() => ExchangeRateDetailWhereUniqueInput, {
    nullable: true,
  })
  foreignCurrencyName?: ExchangeRateDetailWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  hundredthName!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isDefault!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: () => SupplierCreateNestedManyWithoutCurrenciesInput,
  })
  @ValidateNested()
  @Type(() => SupplierCreateNestedManyWithoutCurrenciesInput)
  @IsOptional()
  @Field(() => SupplierCreateNestedManyWithoutCurrenciesInput, {
    nullable: true,
  })
  suppliers?: SupplierCreateNestedManyWithoutCurrenciesInput;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(100)
  @Field(() => String)
  symbolField!: string;
}

export { CurrencyCreateInput as CurrencyCreateInput };
