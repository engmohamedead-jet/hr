/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalaryItemType } from "./SalaryItemType";
import { SalaryItemTypeCountArgs } from "./SalaryItemTypeCountArgs";
import { SalaryItemTypeFindManyArgs } from "./SalaryItemTypeFindManyArgs";
import { SalaryItemTypeFindUniqueArgs } from "./SalaryItemTypeFindUniqueArgs";
import { CreateSalaryItemTypeArgs } from "./CreateSalaryItemTypeArgs";
import { UpdateSalaryItemTypeArgs } from "./UpdateSalaryItemTypeArgs";
import { DeleteSalaryItemTypeArgs } from "./DeleteSalaryItemTypeArgs";
import { SalaryItemFindManyArgs } from "../../salaryItem/base/SalaryItemFindManyArgs";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { Tenant } from "../../tenant/base/Tenant";
import { SalaryItemTypeService } from "../salaryItemType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalaryItemType)
export class SalaryItemTypeResolverBase {
  constructor(
    protected readonly service: SalaryItemTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "read",
    possession: "any",
  })
  async _salaryItemTypesMeta(
    @graphql.Args() args: SalaryItemTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalaryItemType])
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "read",
    possession: "any",
  })
  async salaryItemTypes(
    @graphql.Args() args: SalaryItemTypeFindManyArgs
  ): Promise<SalaryItemType[]> {
    return this.service.salaryItemTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalaryItemType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "read",
    possession: "own",
  })
  async salaryItemType(
    @graphql.Args() args: SalaryItemTypeFindUniqueArgs
  ): Promise<SalaryItemType | null> {
    const result = await this.service.salaryItemType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItemType)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "create",
    possession: "any",
  })
  async createSalaryItemType(
    @graphql.Args() args: CreateSalaryItemTypeArgs
  ): Promise<SalaryItemType> {
    return await this.service.createSalaryItemType({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItemType)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "update",
    possession: "any",
  })
  async updateSalaryItemType(
    @graphql.Args() args: UpdateSalaryItemTypeArgs
  ): Promise<SalaryItemType | null> {
    try {
      return await this.service.updateSalaryItemType({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalaryItemType)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "delete",
    possession: "any",
  })
  async deleteSalaryItemType(
    @graphql.Args() args: DeleteSalaryItemTypeArgs
  ): Promise<SalaryItemType | null> {
    try {
      return await this.service.deleteSalaryItemType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryItem], { name: "salaryItems" })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async findSalaryItems(
    @graphql.Parent() parent: SalaryItemType,
    @graphql.Args() args: SalaryItemFindManyArgs
  ): Promise<SalaryItem[]> {
    const results = await this.service.findSalaryItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: SalaryItemType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
