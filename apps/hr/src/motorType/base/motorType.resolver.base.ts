/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MotorType } from "./MotorType";
import { MotorTypeCountArgs } from "./MotorTypeCountArgs";
import { MotorTypeFindManyArgs } from "./MotorTypeFindManyArgs";
import { MotorTypeFindUniqueArgs } from "./MotorTypeFindUniqueArgs";
import { CreateMotorTypeArgs } from "./CreateMotorTypeArgs";
import { UpdateMotorTypeArgs } from "./UpdateMotorTypeArgs";
import { DeleteMotorTypeArgs } from "./DeleteMotorTypeArgs";
import { ElevatorFindManyArgs } from "../../elevator/base/ElevatorFindManyArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { MotorTypeService } from "../motorType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MotorType)
export class MotorTypeResolverBase {
  constructor(
    protected readonly service: MotorTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "read",
    possession: "any",
  })
  async _motorTypesMeta(
    @graphql.Args() args: MotorTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MotorType])
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "read",
    possession: "any",
  })
  async motorTypes(
    @graphql.Args() args: MotorTypeFindManyArgs
  ): Promise<MotorType[]> {
    return this.service.motorTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MotorType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "read",
    possession: "own",
  })
  async motorType(
    @graphql.Args() args: MotorTypeFindUniqueArgs
  ): Promise<MotorType | null> {
    const result = await this.service.motorType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MotorType)
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "create",
    possession: "any",
  })
  async createMotorType(
    @graphql.Args() args: CreateMotorTypeArgs
  ): Promise<MotorType> {
    return await this.service.createMotorType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MotorType)
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "update",
    possession: "any",
  })
  async updateMotorType(
    @graphql.Args() args: UpdateMotorTypeArgs
  ): Promise<MotorType | null> {
    try {
      return await this.service.updateMotorType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MotorType)
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "delete",
    possession: "any",
  })
  async deleteMotorType(
    @graphql.Args() args: DeleteMotorTypeArgs
  ): Promise<MotorType | null> {
    try {
      return await this.service.deleteMotorType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Elevator], { name: "elevators" })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async findElevators(
    @graphql.Parent() parent: MotorType,
    @graphql.Args() args: ElevatorFindManyArgs
  ): Promise<Elevator[]> {
    const results = await this.service.findElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
