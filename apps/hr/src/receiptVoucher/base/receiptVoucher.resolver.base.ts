/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ReceiptVoucher } from "./ReceiptVoucher";
import { ReceiptVoucherCountArgs } from "./ReceiptVoucherCountArgs";
import { ReceiptVoucherFindManyArgs } from "./ReceiptVoucherFindManyArgs";
import { ReceiptVoucherFindUniqueArgs } from "./ReceiptVoucherFindUniqueArgs";
import { CreateReceiptVoucherArgs } from "./CreateReceiptVoucherArgs";
import { UpdateReceiptVoucherArgs } from "./UpdateReceiptVoucherArgs";
import { DeleteReceiptVoucherArgs } from "./DeleteReceiptVoucherArgs";
import { VoucherType } from "../../voucherType/base/VoucherType";
import { ReceiptVoucherService } from "../receiptVoucher.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ReceiptVoucher)
export class ReceiptVoucherResolverBase {
  constructor(
    protected readonly service: ReceiptVoucherService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "read",
    possession: "any",
  })
  async _receiptVouchersMeta(
    @graphql.Args() args: ReceiptVoucherCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ReceiptVoucher])
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "read",
    possession: "any",
  })
  async receiptVouchers(
    @graphql.Args() args: ReceiptVoucherFindManyArgs
  ): Promise<ReceiptVoucher[]> {
    return this.service.receiptVouchers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ReceiptVoucher, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "read",
    possession: "own",
  })
  async receiptVoucher(
    @graphql.Args() args: ReceiptVoucherFindUniqueArgs
  ): Promise<ReceiptVoucher | null> {
    const result = await this.service.receiptVoucher(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReceiptVoucher)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "create",
    possession: "any",
  })
  async createReceiptVoucher(
    @graphql.Args() args: CreateReceiptVoucherArgs
  ): Promise<ReceiptVoucher> {
    return await this.service.createReceiptVoucher({
      ...args,
      data: {
        ...args.data,

        voucherTypeId: {
          connect: args.data.voucherTypeId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ReceiptVoucher)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "update",
    possession: "any",
  })
  async updateReceiptVoucher(
    @graphql.Args() args: UpdateReceiptVoucherArgs
  ): Promise<ReceiptVoucher | null> {
    try {
      return await this.service.updateReceiptVoucher({
        ...args,
        data: {
          ...args.data,

          voucherTypeId: {
            connect: args.data.voucherTypeId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ReceiptVoucher)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "delete",
    possession: "any",
  })
  async deleteReceiptVoucher(
    @graphql.Args() args: DeleteReceiptVoucherArgs
  ): Promise<ReceiptVoucher | null> {
    try {
      return await this.service.deleteReceiptVoucher(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => VoucherType, {
    nullable: true,
    name: "voucherTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "read",
    possession: "any",
  })
  async getVoucherTypeId(
    @graphql.Parent() parent: ReceiptVoucher
  ): Promise<VoucherType | null> {
    const result = await this.service.getVoucherTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
