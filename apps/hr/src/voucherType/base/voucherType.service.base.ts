/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  VoucherType as PrismaVoucherType,
  PaymentVoucher as PrismaPaymentVoucher,
  ReceiptVoucher as PrismaReceiptVoucher,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class VoucherTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VoucherTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.voucherType.count(args);
  }

  async voucherTypes(
    args: Prisma.VoucherTypeFindManyArgs
  ): Promise<PrismaVoucherType[]> {
    return this.prisma.voucherType.findMany(args);
  }
  async voucherType(
    args: Prisma.VoucherTypeFindUniqueArgs
  ): Promise<PrismaVoucherType | null> {
    return this.prisma.voucherType.findUnique(args);
  }
  async createVoucherType(
    args: Prisma.VoucherTypeCreateArgs
  ): Promise<PrismaVoucherType> {
    return this.prisma.voucherType.create(args);
  }
  async updateVoucherType(
    args: Prisma.VoucherTypeUpdateArgs
  ): Promise<PrismaVoucherType> {
    return this.prisma.voucherType.update(args);
  }
  async deleteVoucherType(
    args: Prisma.VoucherTypeDeleteArgs
  ): Promise<PrismaVoucherType> {
    return this.prisma.voucherType.delete(args);
  }

  async findPaymentVouchers(
    parentId: number,
    args: Prisma.PaymentVoucherFindManyArgs
  ): Promise<PrismaPaymentVoucher[]> {
    return this.prisma.voucherType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentVouchers(args);
  }

  async findReceiptVouchers(
    parentId: number,
    args: Prisma.ReceiptVoucherFindManyArgs
  ): Promise<PrismaReceiptVoucher[]> {
    return this.prisma.voucherType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receiptVouchers(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.voucherType
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
