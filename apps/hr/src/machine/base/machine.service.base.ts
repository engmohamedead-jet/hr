/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Machine as PrismaMachine,
  CheckInOut as PrismaCheckInOut,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class MachineServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MachineCountArgs, "select">): Promise<number> {
    return this.prisma.machine.count(args);
  }

  async machines(args: Prisma.MachineFindManyArgs): Promise<PrismaMachine[]> {
    return this.prisma.machine.findMany(args);
  }
  async machine(
    args: Prisma.MachineFindUniqueArgs
  ): Promise<PrismaMachine | null> {
    return this.prisma.machine.findUnique(args);
  }
  async createMachine(args: Prisma.MachineCreateArgs): Promise<PrismaMachine> {
    return this.prisma.machine.create(args);
  }
  async updateMachine(args: Prisma.MachineUpdateArgs): Promise<PrismaMachine> {
    return this.prisma.machine.update(args);
  }
  async deleteMachine(args: Prisma.MachineDeleteArgs): Promise<PrismaMachine> {
    return this.prisma.machine.delete(args);
  }

  async findCheckInOuts(
    parentId: string,
    args: Prisma.CheckInOutFindManyArgs
  ): Promise<PrismaCheckInOut[]> {
    return this.prisma.machine
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .checkInOuts(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.machine
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
