/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ExchangeRateDetail } from "./ExchangeRateDetail";
import { ExchangeRateDetailCountArgs } from "./ExchangeRateDetailCountArgs";
import { ExchangeRateDetailFindManyArgs } from "./ExchangeRateDetailFindManyArgs";
import { ExchangeRateDetailFindUniqueArgs } from "./ExchangeRateDetailFindUniqueArgs";
import { CreateExchangeRateDetailArgs } from "./CreateExchangeRateDetailArgs";
import { UpdateExchangeRateDetailArgs } from "./UpdateExchangeRateDetailArgs";
import { DeleteExchangeRateDetailArgs } from "./DeleteExchangeRateDetailArgs";
import { Currency } from "../../currency/base/Currency";
import { ExchangeRateDetailService } from "../exchangeRateDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ExchangeRateDetail)
export class ExchangeRateDetailResolverBase {
  constructor(
    protected readonly service: ExchangeRateDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "read",
    possession: "any",
  })
  async _exchangeRateDetailsMeta(
    @graphql.Args() args: ExchangeRateDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ExchangeRateDetail])
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "read",
    possession: "any",
  })
  async exchangeRateDetails(
    @graphql.Args() args: ExchangeRateDetailFindManyArgs
  ): Promise<ExchangeRateDetail[]> {
    return this.service.exchangeRateDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ExchangeRateDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "read",
    possession: "own",
  })
  async exchangeRateDetail(
    @graphql.Args() args: ExchangeRateDetailFindUniqueArgs
  ): Promise<ExchangeRateDetail | null> {
    const result = await this.service.exchangeRateDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExchangeRateDetail)
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "create",
    possession: "any",
  })
  async createExchangeRateDetail(
    @graphql.Args() args: CreateExchangeRateDetailArgs
  ): Promise<ExchangeRateDetail> {
    return await this.service.createExchangeRateDetail({
      ...args,
      data: {
        ...args.data,

        foreignCurrencyId: args.data.foreignCurrencyId
          ? {
              connect: args.data.foreignCurrencyId,
            }
          : undefined,

        localCurrencyId: {
          connect: args.data.localCurrencyId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ExchangeRateDetail)
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "update",
    possession: "any",
  })
  async updateExchangeRateDetail(
    @graphql.Args() args: UpdateExchangeRateDetailArgs
  ): Promise<ExchangeRateDetail | null> {
    try {
      return await this.service.updateExchangeRateDetail({
        ...args,
        data: {
          ...args.data,

          foreignCurrencyId: args.data.foreignCurrencyId
            ? {
                connect: args.data.foreignCurrencyId,
              }
            : undefined,

          localCurrencyId: {
            connect: args.data.localCurrencyId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ExchangeRateDetail)
  @nestAccessControl.UseRoles({
    resource: "ExchangeRateDetail",
    action: "delete",
    possession: "any",
  })
  async deleteExchangeRateDetail(
    @graphql.Args() args: DeleteExchangeRateDetailArgs
  ): Promise<ExchangeRateDetail | null> {
    try {
      return await this.service.deleteExchangeRateDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, {
    nullable: true,
    name: "foreignCurrencyId",
  })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async getForeignCurrencyId(
    @graphql.Parent() parent: ExchangeRateDetail
  ): Promise<Currency | null> {
    const result = await this.service.getForeignCurrencyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, {
    nullable: true,
    name: "localCurrencyId",
  })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async getLocalCurrencyId(
    @graphql.Parent() parent: ExchangeRateDetail
  ): Promise<Currency | null> {
    const result = await this.service.getLocalCurrencyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
