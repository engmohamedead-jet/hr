/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsNumber,
  Max,
  IsDate,
  IsBoolean,
  ValidateNested,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { ScrapReasonWhereUniqueInput } from "../../scrapReason/base/ScrapReasonWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput } from "./WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput";
import { WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput } from "./WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput";

@InputType()
class WorkOrderCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barcode?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  costsPerHour?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duaration?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationExpected?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationPercent?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationUnit?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dueDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endDate?: Date | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  orderQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  productionDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  quantityProduced?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  quantityReportedFromPreviouseWorkOrder?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => ScrapReasonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ScrapReasonWhereUniqueInput)
  @IsOptional()
  @Field(() => ScrapReasonWhereUniqueInput, {
    nullable: true,
  })
  scrapReasonId?: ScrapReasonWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  scrappedQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  stockQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderBaseDependencies?: WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput;

  @ApiProperty({
    required: false,
    type: () => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderDependencies?: WorkOrderDependencyCreateNestedManyWithoutWorkOrdersInput;

  @ApiProperty({
    required: false,
    type: () => WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderRoutings?: WorkOrderRoutingCreateNestedManyWithoutWorkOrdersInput;
}

export { WorkOrderCreateInput as WorkOrderCreateInput };
