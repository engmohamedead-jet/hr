/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PurchaseDetail } from "./PurchaseDetail";
import { PurchaseDetailCountArgs } from "./PurchaseDetailCountArgs";
import { PurchaseDetailFindManyArgs } from "./PurchaseDetailFindManyArgs";
import { PurchaseDetailFindUniqueArgs } from "./PurchaseDetailFindUniqueArgs";
import { CreatePurchaseDetailArgs } from "./CreatePurchaseDetailArgs";
import { UpdatePurchaseDetailArgs } from "./UpdatePurchaseDetailArgs";
import { DeletePurchaseDetailArgs } from "./DeletePurchaseDetailArgs";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Purchase } from "../../purchase/base/Purchase";
import { PurchasePriceType } from "../../purchasePriceType/base/PurchasePriceType";
import { Tenant } from "../../tenant/base/Tenant";
import { Unit } from "../../unit/base/Unit";
import { PurchaseDetailService } from "../purchaseDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PurchaseDetail)
export class PurchaseDetailResolverBase {
  constructor(
    protected readonly service: PurchaseDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async _purchaseDetailsMeta(
    @graphql.Args() args: PurchaseDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PurchaseDetail])
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async purchaseDetails(
    @graphql.Args() args: PurchaseDetailFindManyArgs
  ): Promise<PurchaseDetail[]> {
    return this.service.purchaseDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PurchaseDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "own",
  })
  async purchaseDetail(
    @graphql.Args() args: PurchaseDetailFindUniqueArgs
  ): Promise<PurchaseDetail | null> {
    const result = await this.service.purchaseDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchaseDetail)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "create",
    possession: "any",
  })
  async createPurchaseDetail(
    @graphql.Args() args: CreatePurchaseDetailArgs
  ): Promise<PurchaseDetail> {
    return await this.service.createPurchaseDetail({
      ...args,
      data: {
        ...args.data,

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        purchaseId: {
          connect: args.data.purchaseId,
        },

        purchasePriceTypeId: args.data.purchasePriceTypeId
          ? {
              connect: args.data.purchasePriceTypeId,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        unitId: {
          connect: args.data.unitId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PurchaseDetail)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "update",
    possession: "any",
  })
  async updatePurchaseDetail(
    @graphql.Args() args: UpdatePurchaseDetailArgs
  ): Promise<PurchaseDetail | null> {
    try {
      return await this.service.updatePurchaseDetail({
        ...args,
        data: {
          ...args.data,

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          purchaseId: {
            connect: args.data.purchaseId,
          },

          purchasePriceTypeId: args.data.purchasePriceTypeId
            ? {
                connect: args.data.purchasePriceTypeId,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          unitId: {
            connect: args.data.unitId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PurchaseDetail)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "delete",
    possession: "any",
  })
  async deletePurchaseDetail(
    @graphql.Args() args: DeletePurchaseDetailArgs
  ): Promise<PurchaseDetail | null> {
    try {
      return await this.service.deletePurchaseDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Purchase, {
    nullable: true,
    name: "purchaseId",
  })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async getPurchaseId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<Purchase | null> {
    const result = await this.service.getPurchaseId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PurchasePriceType, {
    nullable: true,
    name: "purchasePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  async getPurchasePriceTypeId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<PurchasePriceType | null> {
    const result = await this.service.getPurchasePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(
    @graphql.Parent() parent: PurchaseDetail
  ): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
