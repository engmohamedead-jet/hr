/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ElevatorSparePart } from "./ElevatorSparePart";
import { ElevatorSparePartCountArgs } from "./ElevatorSparePartCountArgs";
import { ElevatorSparePartFindManyArgs } from "./ElevatorSparePartFindManyArgs";
import { ElevatorSparePartFindUniqueArgs } from "./ElevatorSparePartFindUniqueArgs";
import { CreateElevatorSparePartArgs } from "./CreateElevatorSparePartArgs";
import { UpdateElevatorSparePartArgs } from "./UpdateElevatorSparePartArgs";
import { DeleteElevatorSparePartArgs } from "./DeleteElevatorSparePartArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { ElevatorSparePartService } from "../elevatorSparePart.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ElevatorSparePart)
export class ElevatorSparePartResolverBase {
  constructor(
    protected readonly service: ElevatorSparePartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "any",
  })
  async _elevatorSparePartsMeta(
    @graphql.Args() args: ElevatorSparePartCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ElevatorSparePart])
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "any",
  })
  async elevatorSpareParts(
    @graphql.Args() args: ElevatorSparePartFindManyArgs
  ): Promise<ElevatorSparePart[]> {
    return this.service.elevatorSpareParts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ElevatorSparePart, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "own",
  })
  async elevatorSparePart(
    @graphql.Args() args: ElevatorSparePartFindUniqueArgs
  ): Promise<ElevatorSparePart | null> {
    const result = await this.service.elevatorSparePart(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorSparePart)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "create",
    possession: "any",
  })
  async createElevatorSparePart(
    @graphql.Args() args: CreateElevatorSparePartArgs
  ): Promise<ElevatorSparePart> {
    return await this.service.createElevatorSparePart({
      ...args,
      data: {
        ...args.data,

        elevator: args.data.elevator
          ? {
              connect: args.data.elevator,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorSparePart)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "update",
    possession: "any",
  })
  async updateElevatorSparePart(
    @graphql.Args() args: UpdateElevatorSparePartArgs
  ): Promise<ElevatorSparePart | null> {
    try {
      return await this.service.updateElevatorSparePart({
        ...args,
        data: {
          ...args.data,

          elevator: args.data.elevator
            ? {
                connect: args.data.elevator,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ElevatorSparePart)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "delete",
    possession: "any",
  })
  async deleteElevatorSparePart(
    @graphql.Args() args: DeleteElevatorSparePartArgs
  ): Promise<ElevatorSparePart | null> {
    try {
      return await this.service.deleteElevatorSparePart(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Elevator, {
    nullable: true,
    name: "elevator",
  })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async getElevator(
    @graphql.Parent() parent: ElevatorSparePart
  ): Promise<Elevator | null> {
    const result = await this.service.getElevator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
