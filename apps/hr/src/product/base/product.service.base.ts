/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Product as PrismaProduct,
  BillOfMaterialDetail as PrismaBillOfMaterialDetail,
  BillOfMaterial as PrismaBillOfMaterial,
  ProductBarcode as PrismaProductBarcode,
  ProductUnit as PrismaProductUnit,
  ProductVariant as PrismaProductVariant,
  ProductionOrder as PrismaProductionOrder,
  PurchaseDetail as PrismaPurchaseDetail,
  PurchaseReturnDetail as PrismaPurchaseReturnDetail,
  SaleDetail as PrismaSaleDetail,
  SaleQuotationDetail as PrismaSaleQuotationDetail,
  SaleReturnDetail as PrismaSaleReturnDetail,
  Store as PrismaStore,
  Unit as PrismaUnit,
  ProductCategory as PrismaProductCategory,
  ProductDepartment as PrismaProductDepartment,
  ProductGroup as PrismaProductGroup,
  ProductType as PrismaProductType,
  SaleTax as PrismaSaleTax,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class ProductServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProductCountArgs, "select">): Promise<number> {
    return this.prisma.product.count(args);
  }

  async products(args: Prisma.ProductFindManyArgs): Promise<PrismaProduct[]> {
    return this.prisma.product.findMany(args);
  }
  async product(
    args: Prisma.ProductFindUniqueArgs
  ): Promise<PrismaProduct | null> {
    return this.prisma.product.findUnique(args);
  }
  async createProduct(args: Prisma.ProductCreateArgs): Promise<PrismaProduct> {
    return this.prisma.product.create(args);
  }
  async updateProduct(args: Prisma.ProductUpdateArgs): Promise<PrismaProduct> {
    return this.prisma.product.update(args);
  }
  async deleteProduct(args: Prisma.ProductDeleteArgs): Promise<PrismaProduct> {
    return this.prisma.product.delete(args);
  }

  async findBillOfMaterialDetails(
    parentId: string,
    args: Prisma.BillOfMaterialDetailFindManyArgs
  ): Promise<PrismaBillOfMaterialDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billOfMaterialDetails(args);
  }

  async findBillOfMaterials(
    parentId: string,
    args: Prisma.BillOfMaterialFindManyArgs
  ): Promise<PrismaBillOfMaterial[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billOfMaterials(args);
  }

  async findProductBarcodes(
    parentId: string,
    args: Prisma.ProductBarcodeFindManyArgs
  ): Promise<PrismaProductBarcode[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productBarcodes(args);
  }

  async findProductUnits(
    parentId: string,
    args: Prisma.ProductUnitFindManyArgs
  ): Promise<PrismaProductUnit[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productUnits(args);
  }

  async findProductVariants(
    parentId: string,
    args: Prisma.ProductVariantFindManyArgs
  ): Promise<PrismaProductVariant[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productVariants(args);
  }

  async findProductionOrders(
    parentId: string,
    args: Prisma.ProductionOrderFindManyArgs
  ): Promise<PrismaProductionOrder[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionOrders(args);
  }

  async findPurchaseDetails(
    parentId: string,
    args: Prisma.PurchaseDetailFindManyArgs
  ): Promise<PrismaPurchaseDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseDetails(args);
  }

  async findPurchaseReturnDetails(
    parentId: string,
    args: Prisma.PurchaseReturnDetailFindManyArgs
  ): Promise<PrismaPurchaseReturnDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturnDetails(args);
  }

  async findSaleDetails(
    parentId: string,
    args: Prisma.SaleDetailFindManyArgs
  ): Promise<PrismaSaleDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleDetails(args);
  }

  async findSaleQuotationDetails(
    parentId: string,
    args: Prisma.SaleQuotationDetailFindManyArgs
  ): Promise<PrismaSaleQuotationDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleQuotationDetails(args);
  }

  async findSaleReturnDetails(
    parentId: string,
    args: Prisma.SaleReturnDetailFindManyArgs
  ): Promise<PrismaSaleReturnDetail[]> {
    return this.prisma.product
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturnDetails(args);
  }

  async getDefaultStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .defaultStoreId();
  }

  async getDefaultUnitId(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .defaultUnitId();
  }

  async getProductCategoryId(
    parentId: string
  ): Promise<PrismaProductCategory | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .productCategoryId();
  }

  async getProductDepartmentId(
    parentId: string
  ): Promise<PrismaProductDepartment | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .productDepartmentId();
  }

  async getProductGroupId(
    parentId: string
  ): Promise<PrismaProductGroup | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .productGroupId();
  }

  async getProductTypeId(parentId: string): Promise<PrismaProductType | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .productTypeId();
  }

  async getSaleTaxId(parentId: string): Promise<PrismaSaleTax | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .saleTaxId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.product
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
