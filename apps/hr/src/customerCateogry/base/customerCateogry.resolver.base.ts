/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CustomerCateogry } from "./CustomerCateogry";
import { CustomerCateogryCountArgs } from "./CustomerCateogryCountArgs";
import { CustomerCateogryFindManyArgs } from "./CustomerCateogryFindManyArgs";
import { CustomerCateogryFindUniqueArgs } from "./CustomerCateogryFindUniqueArgs";
import { CreateCustomerCateogryArgs } from "./CreateCustomerCateogryArgs";
import { UpdateCustomerCateogryArgs } from "./UpdateCustomerCateogryArgs";
import { DeleteCustomerCateogryArgs } from "./DeleteCustomerCateogryArgs";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerCateogryService } from "../customerCateogry.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CustomerCateogry)
export class CustomerCateogryResolverBase {
  constructor(
    protected readonly service: CustomerCateogryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "read",
    possession: "any",
  })
  async _customerCateogriesMeta(
    @graphql.Args() args: CustomerCateogryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CustomerCateogry])
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "read",
    possession: "any",
  })
  async customerCateogries(
    @graphql.Args() args: CustomerCateogryFindManyArgs
  ): Promise<CustomerCateogry[]> {
    return this.service.customerCateogries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CustomerCateogry, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "read",
    possession: "own",
  })
  async customerCateogry(
    @graphql.Args() args: CustomerCateogryFindUniqueArgs
  ): Promise<CustomerCateogry | null> {
    const result = await this.service.customerCateogry(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerCateogry)
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "create",
    possession: "any",
  })
  async createCustomerCateogry(
    @graphql.Args() args: CreateCustomerCateogryArgs
  ): Promise<CustomerCateogry> {
    return await this.service.createCustomerCateogry({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CustomerCateogry)
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "update",
    possession: "any",
  })
  async updateCustomerCateogry(
    @graphql.Args() args: UpdateCustomerCateogryArgs
  ): Promise<CustomerCateogry | null> {
    try {
      return await this.service.updateCustomerCateogry({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CustomerCateogry)
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "delete",
    possession: "any",
  })
  async deleteCustomerCateogry(
    @graphql.Args() args: DeleteCustomerCateogryArgs
  ): Promise<CustomerCateogry | null> {
    try {
      return await this.service.deleteCustomerCateogry(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Customer], { name: "customers" })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @graphql.Parent() parent: CustomerCateogry,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
