/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Shift } from "./Shift";
import { ShiftCountArgs } from "./ShiftCountArgs";
import { ShiftFindManyArgs } from "./ShiftFindManyArgs";
import { ShiftFindUniqueArgs } from "./ShiftFindUniqueArgs";
import { CreateShiftArgs } from "./CreateShiftArgs";
import { UpdateShiftArgs } from "./UpdateShiftArgs";
import { DeleteShiftArgs } from "./DeleteShiftArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { ShiftService } from "../shift.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Shift)
export class ShiftResolverBase {
  constructor(
    protected readonly service: ShiftService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "read",
    possession: "any",
  })
  async _shiftsMeta(
    @graphql.Args() args: ShiftCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Shift])
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "read",
    possession: "any",
  })
  async shifts(@graphql.Args() args: ShiftFindManyArgs): Promise<Shift[]> {
    return this.service.shifts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Shift, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "read",
    possession: "own",
  })
  async shift(
    @graphql.Args() args: ShiftFindUniqueArgs
  ): Promise<Shift | null> {
    const result = await this.service.shift(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shift)
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "create",
    possession: "any",
  })
  async createShift(@graphql.Args() args: CreateShiftArgs): Promise<Shift> {
    return await this.service.createShift({
      ...args,
      data: {
        ...args.data,

        tenantid: args.data.tenantid
          ? {
              connect: args.data.tenantid,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Shift)
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "update",
    possession: "any",
  })
  async updateShift(
    @graphql.Args() args: UpdateShiftArgs
  ): Promise<Shift | null> {
    try {
      return await this.service.updateShift({
        ...args,
        data: {
          ...args.data,

          tenantid: args.data.tenantid
            ? {
                connect: args.data.tenantid,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shift)
  @nestAccessControl.UseRoles({
    resource: "Shift",
    action: "delete",
    possession: "any",
  })
  async deleteShift(
    @graphql.Args() args: DeleteShiftArgs
  ): Promise<Shift | null> {
    try {
      return await this.service.deleteShift(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantid",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantid(@graphql.Parent() parent: Shift): Promise<Tenant | null> {
    const result = await this.service.getTenantid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
