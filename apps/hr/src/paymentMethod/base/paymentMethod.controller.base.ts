/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PaymentMethodService } from "../paymentMethod.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PaymentMethodCreateInput } from "./PaymentMethodCreateInput";
import { PaymentMethod } from "./PaymentMethod";
import { PaymentMethodFindManyArgs } from "./PaymentMethodFindManyArgs";
import { PaymentMethodWhereUniqueInput } from "./PaymentMethodWhereUniqueInput";
import { PaymentMethodUpdateInput } from "./PaymentMethodUpdateInput";
import { SalePaymentFindManyArgs } from "../../salePayment/base/SalePaymentFindManyArgs";
import { SalePayment } from "../../salePayment/base/SalePayment";
import { SalePaymentWhereUniqueInput } from "../../salePayment/base/SalePaymentWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PaymentMethodControllerBase {
  constructor(
    protected readonly service: PaymentMethodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PaymentMethod })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPaymentMethod(
    @common.Body() data: PaymentMethodCreateInput
  ): Promise<PaymentMethod> {
    return await this.service.createPaymentMethod({
      data: {
        ...data,

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PaymentMethod] })
  @ApiNestedQuery(PaymentMethodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentMethods(
    @common.Req() request: Request
  ): Promise<PaymentMethod[]> {
    const args = plainToClass(PaymentMethodFindManyArgs, request.query);
    return this.service.paymentMethods({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async paymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput
  ): Promise<PaymentMethod | null> {
    const result = await this.service.paymentMethod({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePaymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput,
    @common.Body() data: PaymentMethodUpdateInput
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.updatePaymentMethod({
        where: params,
        data: {
          ...data,

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PaymentMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePaymentMethod(
    @common.Param() params: PaymentMethodWhereUniqueInput
  ): Promise<PaymentMethod | null> {
    try {
      return await this.service.deletePaymentMethod({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePayments")
  @ApiNestedQuery(SalePaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async findSalePayments(
    @common.Req() request: Request,
    @common.Param() params: PaymentMethodWhereUniqueInput
  ): Promise<SalePayment[]> {
    const query = plainToClass(SalePaymentFindManyArgs, request.query);
    const results = await this.service.findSalePayments(params.id, {
      ...query,
      select: {
        LocalCurrencyRatl: true,

        bank: {
          select: {
            id: true,
          },
        },

        bankBrach: true,

        bankBranch: {
          select: {
            id: true,
          },
        },

        chequeNumber: true,
        createdAt: true,
        creditCardNumber: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        foreignCurrencyRate: true,
        id: true,
        isCheque: true,
        note: true,
        paidValue: true,
        paymentDate: true,

        paymentMethodId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleId: {
          select: {
            id: true,
          },
        },

        seqeunce: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "update",
    possession: "any",
  })
  async connectSalePayments(
    @common.Param() params: PaymentMethodWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        connect: body,
      },
    };
    await this.service.updatePaymentMethod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "update",
    possession: "any",
  })
  async updateSalePayments(
    @common.Param() params: PaymentMethodWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        set: body,
      },
    };
    await this.service.updatePaymentMethod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "update",
    possession: "any",
  })
  async disconnectSalePayments(
    @common.Param() params: PaymentMethodWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        disconnect: body,
      },
    };
    await this.service.updatePaymentMethod({
      where: params,
      data,
      select: { id: true },
    });
  }
}
