/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OrderStatus as PrismaOrderStatus,
  ProductionOrder as PrismaProductionOrder,
  SaleOrder as PrismaSaleOrder,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class OrderStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OrderStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.orderStatus.count(args);
  }

  async orderStatuses(
    args: Prisma.OrderStatusFindManyArgs
  ): Promise<PrismaOrderStatus[]> {
    return this.prisma.orderStatus.findMany(args);
  }
  async orderStatus(
    args: Prisma.OrderStatusFindUniqueArgs
  ): Promise<PrismaOrderStatus | null> {
    return this.prisma.orderStatus.findUnique(args);
  }
  async createOrderStatus(
    args: Prisma.OrderStatusCreateArgs
  ): Promise<PrismaOrderStatus> {
    return this.prisma.orderStatus.create(args);
  }
  async updateOrderStatus(
    args: Prisma.OrderStatusUpdateArgs
  ): Promise<PrismaOrderStatus> {
    return this.prisma.orderStatus.update(args);
  }
  async deleteOrderStatus(
    args: Prisma.OrderStatusDeleteArgs
  ): Promise<PrismaOrderStatus> {
    return this.prisma.orderStatus.delete(args);
  }

  async getProductionOrders(
    parentId: number
  ): Promise<PrismaProductionOrder | null> {
    return this.prisma.orderStatus
      .findUnique({
        where: { id: parentId },
      })
      .productionOrders();
  }

  async getSaleOrders(parentId: number): Promise<PrismaSaleOrder | null> {
    return this.prisma.orderStatus
      .findUnique({
        where: { id: parentId },
      })
      .saleOrders();
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.orderStatus
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
