/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsBoolean,
  IsNumber,
  Max,
  Min,
  IsInt,
  IsDate,
} from "class-validator";

import { BillOfMaterialDetailCreateNestedManyWithoutProductsInput } from "./BillOfMaterialDetailCreateNestedManyWithoutProductsInput";
import { Type } from "class-transformer";
import { BillOfMaterialCreateNestedManyWithoutProductsInput } from "./BillOfMaterialCreateNestedManyWithoutProductsInput";
import { Decimal } from "decimal.js";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";
import { UnitWhereUniqueInput } from "../../unit/base/UnitWhereUniqueInput";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { InputJsonValue } from "../../types";
import { ProductBarcodeCreateNestedManyWithoutProductsInput } from "./ProductBarcodeCreateNestedManyWithoutProductsInput";
import { ProductCategoryWhereUniqueInput } from "../../productCategory/base/ProductCategoryWhereUniqueInput";
import { ProductDepartmentWhereUniqueInput } from "../../productDepartment/base/ProductDepartmentWhereUniqueInput";
import { ProductGroupWhereUniqueInput } from "../../productGroup/base/ProductGroupWhereUniqueInput";
import { ProductTypeWhereUniqueInput } from "../../productType/base/ProductTypeWhereUniqueInput";
import { ProductUnitCreateNestedManyWithoutProductsInput } from "./ProductUnitCreateNestedManyWithoutProductsInput";
import { ProductVariantCreateNestedManyWithoutProductsInput } from "./ProductVariantCreateNestedManyWithoutProductsInput";
import { ProductionOrderCreateNestedManyWithoutProductsInput } from "./ProductionOrderCreateNestedManyWithoutProductsInput";
import { PurchaseDetailCreateNestedManyWithoutProductsInput } from "./PurchaseDetailCreateNestedManyWithoutProductsInput";
import { PurchaseReturnDetailCreateNestedManyWithoutProductsInput } from "./PurchaseReturnDetailCreateNestedManyWithoutProductsInput";
import { SaleDetailCreateNestedManyWithoutProductsInput } from "./SaleDetailCreateNestedManyWithoutProductsInput";
import { SaleOrderDetailCreateNestedManyWithoutProductsInput } from "./SaleOrderDetailCreateNestedManyWithoutProductsInput";
import { SaleQuotationDetailCreateNestedManyWithoutProductsInput } from "./SaleQuotationDetailCreateNestedManyWithoutProductsInput";
import { SaleReturnDetailCreateNestedManyWithoutProductsInput } from "./SaleReturnDetailCreateNestedManyWithoutProductsInput";
import { SaleTaxWhereUniqueInput } from "../../saleTax/base/SaleTaxWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";

@InputType()
class ProductCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barcode?: string | null;

  @ApiProperty({
    required: false,
    type: () => BillOfMaterialDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => BillOfMaterialDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => BillOfMaterialDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  billOfMaterialDetails?: BillOfMaterialDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => BillOfMaterialCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => BillOfMaterialCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => BillOfMaterialCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  billOfMaterials?: BillOfMaterialCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  canExpire!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @Field(() => Float)
  costPrice!: Decimal;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  costPriceIncludesTax?: boolean | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @Field(() => Float)
  currentStockQuantity!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  daysToManufacture?: number | null;

  @ApiProperty({
    required: false,
    type: () => StoreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreWhereUniqueInput)
  @IsOptional()
  @Field(() => StoreWhereUniqueInput, {
    nullable: true,
  })
  defaultStoreId?: StoreWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => UnitWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UnitWhereUniqueInput)
  @Field(() => UnitWhereUniqueInput)
  defaultUnitId!: UnitWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  discontinuedDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountRate?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  expireAlarmInDays?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  expireIsDefaultAfterDaysFromPurchase?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  firstStockQuantity?: Decimal | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCompound?: boolean | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isFavorite!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  maintainInventory!: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  minimumSalePrice?: Decimal | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  photo?: InputJsonValue;

  @ApiProperty({
    required: false,
    type: () => ProductBarcodeCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => ProductBarcodeCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => ProductBarcodeCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  productBarcodes?: ProductBarcodeCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => ProductCategoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProductCategoryWhereUniqueInput)
  @IsOptional()
  @Field(() => ProductCategoryWhereUniqueInput, {
    nullable: true,
  })
  productCategoryId?: ProductCategoryWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ProductDepartmentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProductDepartmentWhereUniqueInput)
  @IsOptional()
  @Field(() => ProductDepartmentWhereUniqueInput, {
    nullable: true,
  })
  productDepartmentId?: ProductDepartmentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ProductGroupWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProductGroupWhereUniqueInput)
  @IsOptional()
  @Field(() => ProductGroupWhereUniqueInput, {
    nullable: true,
  })
  productGroupId?: ProductGroupWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: () => ProductTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProductTypeWhereUniqueInput)
  @Field(() => ProductTypeWhereUniqueInput)
  productTypeId!: ProductTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => ProductUnitCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => ProductUnitCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => ProductUnitCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  productUnits?: ProductUnitCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => ProductVariantCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => ProductVariantCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => ProductVariantCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  productVariants?: ProductVariantCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => ProductionOrderCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => ProductionOrderCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => ProductionOrderCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  productionOrders?: ProductionOrderCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  profitRate?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => PurchaseDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => PurchaseDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => PurchaseDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  purchaseDetails?: PurchaseDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => PurchaseReturnDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => PurchaseReturnDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => PurchaseReturnDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  purchaseReturnDetails?: PurchaseReturnDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  reorderQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => SaleDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => SaleDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => SaleDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  saleDetails?: SaleDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => SaleOrderDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => SaleOrderDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => SaleOrderDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  saleOrderDetails?: SaleOrderDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @Field(() => Float)
  salePrice!: Decimal;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  salePriceIncludesTax!: boolean;

  @ApiProperty({
    required: false,
    type: () => SaleQuotationDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => SaleQuotationDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => SaleQuotationDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  saleQuotationDetails?: SaleQuotationDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => SaleReturnDetailCreateNestedManyWithoutProductsInput,
  })
  @ValidateNested()
  @Type(() => SaleReturnDetailCreateNestedManyWithoutProductsInput)
  @IsOptional()
  @Field(() => SaleReturnDetailCreateNestedManyWithoutProductsInput, {
    nullable: true,
  })
  saleReturnDetails?: SaleReturnDetailCreateNestedManyWithoutProductsInput;

  @ApiProperty({
    required: false,
    type: () => SaleTaxWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => SaleTaxWhereUniqueInput)
  @IsOptional()
  @Field(() => SaleTaxWhereUniqueInput, {
    nullable: true,
  })
  saleTaxId?: SaleTaxWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;
}

export { ProductCreateInput as ProductCreateInput };
