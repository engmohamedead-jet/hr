/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsBoolean,
  IsNumber,
  Max,
  IsDate,
  Min,
  IsInt,
} from "class-validator";

import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { Type } from "class-transformer";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { Decimal } from "decimal.js";
import { Store } from "../../store/base/Store";
import { Unit } from "../../unit/base/Unit";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";
import { ProductBarcode } from "../../productBarcode/base/ProductBarcode";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductDepartment } from "../../productDepartment/base/ProductDepartment";
import { ProductGroup } from "../../productGroup/base/ProductGroup";
import { ProductType } from "../../productType/base/ProductType";
import { ProductUnit } from "../../productUnit/base/ProductUnit";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SaleOrderDetail } from "../../saleOrderDetail/base/SaleOrderDetail";
import { SaleQuotationDetail } from "../../saleQuotationDetail/base/SaleQuotationDetail";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { SaleTax } from "../../saleTax/base/SaleTax";
import { Tenant } from "../../tenant/base/Tenant";

@ObjectType()
class Product {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barcode!: string | null;

  @ApiProperty({
    required: false,
    type: () => [BillOfMaterialDetail],
  })
  @ValidateNested()
  @Type(() => BillOfMaterialDetail)
  @IsOptional()
  billOfMaterialDetails?: Array<BillOfMaterialDetail>;

  @ApiProperty({
    required: false,
    type: () => [BillOfMaterial],
  })
  @ValidateNested()
  @Type(() => BillOfMaterial)
  @IsOptional()
  billOfMaterials?: Array<BillOfMaterial>;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  canExpire!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @Field(() => Float)
  costPrice!: Decimal;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  costPriceIncludesTax!: boolean | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @Field(() => Float)
  currentStockQuantity!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  daysToManufacture!: number | null;

  @ApiProperty({
    required: false,
    type: () => Store,
  })
  @ValidateNested()
  @Type(() => Store)
  @IsOptional()
  defaultStoreId?: Store | null;

  @ApiProperty({
    required: true,
    type: () => Unit,
  })
  @ValidateNested()
  @Type(() => Unit)
  defaultUnitId?: Unit;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  discontinuedDate!: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  discountRate!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  expireAlarmInDays!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  expireIsDefaultAfterDaysFromPurchase!: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  firstStockQuantity!: Decimal | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCompound!: boolean | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isFavorite!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  maintainInventory!: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  minimumSalePrice!: Decimal | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  photo!: JsonValue;

  @ApiProperty({
    required: false,
    type: () => [ProductBarcode],
  })
  @ValidateNested()
  @Type(() => ProductBarcode)
  @IsOptional()
  productBarcodes?: Array<ProductBarcode>;

  @ApiProperty({
    required: false,
    type: () => ProductCategory,
  })
  @ValidateNested()
  @Type(() => ProductCategory)
  @IsOptional()
  productCategoryId?: ProductCategory | null;

  @ApiProperty({
    required: false,
    type: () => ProductDepartment,
  })
  @ValidateNested()
  @Type(() => ProductDepartment)
  @IsOptional()
  productDepartmentId?: ProductDepartment | null;

  @ApiProperty({
    required: false,
    type: () => ProductGroup,
  })
  @ValidateNested()
  @Type(() => ProductGroup)
  @IsOptional()
  productGroupId?: ProductGroup | null;

  @ApiProperty({
    required: true,
    type: () => ProductType,
  })
  @ValidateNested()
  @Type(() => ProductType)
  productTypeId?: ProductType;

  @ApiProperty({
    required: false,
    type: () => [ProductUnit],
  })
  @ValidateNested()
  @Type(() => ProductUnit)
  @IsOptional()
  productUnits?: Array<ProductUnit>;

  @ApiProperty({
    required: false,
    type: () => [ProductVariant],
  })
  @ValidateNested()
  @Type(() => ProductVariant)
  @IsOptional()
  productVariants?: Array<ProductVariant>;

  @ApiProperty({
    required: false,
    type: () => [ProductionOrder],
  })
  @ValidateNested()
  @Type(() => ProductionOrder)
  @IsOptional()
  productionOrders?: Array<ProductionOrder>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  profitRate!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [PurchaseDetail],
  })
  @ValidateNested()
  @Type(() => PurchaseDetail)
  @IsOptional()
  purchaseDetails?: Array<PurchaseDetail>;

  @ApiProperty({
    required: false,
    type: () => [PurchaseReturnDetail],
  })
  @ValidateNested()
  @Type(() => PurchaseReturnDetail)
  @IsOptional()
  purchaseReturnDetails?: Array<PurchaseReturnDetail>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  reorderQuantity!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [SaleDetail],
  })
  @ValidateNested()
  @Type(() => SaleDetail)
  @IsOptional()
  saleDetails?: Array<SaleDetail>;

  @ApiProperty({
    required: false,
    type: () => [SaleOrderDetail],
  })
  @ValidateNested()
  @Type(() => SaleOrderDetail)
  @IsOptional()
  saleOrderDetails?: Array<SaleOrderDetail>;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(999999999)
  @Field(() => Float)
  salePrice!: Decimal;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  salePriceIncludesTax!: boolean;

  @ApiProperty({
    required: false,
    type: () => [SaleQuotationDetail],
  })
  @ValidateNested()
  @Type(() => SaleQuotationDetail)
  @IsOptional()
  saleQuotationDetails?: Array<SaleQuotationDetail>;

  @ApiProperty({
    required: false,
    type: () => [SaleReturnDetail],
  })
  @ValidateNested()
  @Type(() => SaleReturnDetail)
  @IsOptional()
  saleReturnDetails?: Array<SaleReturnDetail>;

  @ApiProperty({
    required: false,
    type: () => SaleTax,
  })
  @ValidateNested()
  @Type(() => SaleTax)
  @IsOptional()
  saleTaxId?: SaleTax | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantId?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Product as Product };
