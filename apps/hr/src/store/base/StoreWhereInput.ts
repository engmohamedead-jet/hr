/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransactionDetailListRelationFilter } from "../../accountTransactionDetail/base/AccountTransactionDetailListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { AccountTransactionListRelationFilter } from "../../accountTransaction/base/AccountTransactionListRelationFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { BooleanFilter } from "../../util/BooleanFilter";
import { StringFilter } from "../../util/StringFilter";
import { CustomerElevatorListRelationFilter } from "../../customerElevator/base/CustomerElevatorListRelationFilter";
import { ElevatorListRelationFilter } from "../../elevator/base/ElevatorListRelationFilter";
import { FailureReportingListRelationFilter } from "../../failureReporting/base/FailureReportingListRelationFilter";
import { MaintenanceContractListRelationFilter } from "../../maintenanceContract/base/MaintenanceContractListRelationFilter";
import { MaintenanceVisitListRelationFilter } from "../../maintenanceVisit/base/MaintenanceVisitListRelationFilter";
import { NotificationListRelationFilter } from "../../notification/base/NotificationListRelationFilter";
import { OfficeWhereUniqueInput } from "../../office/base/OfficeWhereUniqueInput";
import { PeriodicMaintenanceOrderListRelationFilter } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderListRelationFilter";
import { ProductListRelationFilter } from "../../product/base/ProductListRelationFilter";
import { SaleTaxListRelationFilter } from "../../saleTax/base/SaleTaxListRelationFilter";
import { StoreTypeWhereUniqueInput } from "../../storeType/base/StoreTypeWhereUniqueInput";

@InputType()
class StoreWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccountTransactionDetailListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountTransactionDetailListRelationFilter)
  @IsOptional()
  @Field(() => AccountTransactionDetailListRelationFilter, {
    nullable: true,
  })
  accountTransactionDetails?: AccountTransactionDetailListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => AccountTransactionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountTransactionListRelationFilter)
  @IsOptional()
  @Field(() => AccountTransactionListRelationFilter, {
    nullable: true,
  })
  accountTransactions?: AccountTransactionListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  addressLine1?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: BooleanFilter,
  })
  @Type(() => BooleanFilter)
  @IsOptional()
  @Field(() => BooleanFilter, {
    nullable: true,
  })
  allowSale?: BooleanFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  cellPhoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  code?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => CustomerElevatorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => CustomerElevatorListRelationFilter)
  @IsOptional()
  @Field(() => CustomerElevatorListRelationFilter, {
    nullable: true,
  })
  customerElevators?: CustomerElevatorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ElevatorListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ElevatorListRelationFilter)
  @IsOptional()
  @Field(() => ElevatorListRelationFilter, {
    nullable: true,
  })
  elevators?: ElevatorListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => FailureReportingListRelationFilter,
  })
  @ValidateNested()
  @Type(() => FailureReportingListRelationFilter)
  @IsOptional()
  @Field(() => FailureReportingListRelationFilter, {
    nullable: true,
  })
  failureReportings?: FailureReportingListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  fax?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  homePhoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => MaintenanceContractListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MaintenanceContractListRelationFilter)
  @IsOptional()
  @Field(() => MaintenanceContractListRelationFilter, {
    nullable: true,
  })
  maintenanceContracts?: MaintenanceContractListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => MaintenanceVisitListRelationFilter,
  })
  @ValidateNested()
  @Type(() => MaintenanceVisitListRelationFilter)
  @IsOptional()
  @Field(() => MaintenanceVisitListRelationFilter, {
    nullable: true,
  })
  maintenanceVisits?: MaintenanceVisitListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  name?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  normalizedName?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  note?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => NotificationListRelationFilter,
  })
  @ValidateNested()
  @Type(() => NotificationListRelationFilter)
  @IsOptional()
  @Field(() => NotificationListRelationFilter, {
    nullable: true,
  })
  notifications?: NotificationListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => OfficeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => OfficeWhereUniqueInput)
  @IsOptional()
  @Field(() => OfficeWhereUniqueInput, {
    nullable: true,
  })
  office?: OfficeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => PeriodicMaintenanceOrderListRelationFilter,
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrderListRelationFilter)
  @IsOptional()
  @Field(() => PeriodicMaintenanceOrderListRelationFilter, {
    nullable: true,
  })
  periodicMaintenanceOrders?: PeriodicMaintenanceOrderListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => ProductListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ProductListRelationFilter)
  @IsOptional()
  @Field(() => ProductListRelationFilter, {
    nullable: true,
  })
  products?: ProductListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => SaleTaxListRelationFilter,
  })
  @ValidateNested()
  @Type(() => SaleTaxListRelationFilter)
  @IsOptional()
  @Field(() => SaleTaxListRelationFilter, {
    nullable: true,
  })
  saleTaxes?: SaleTaxListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => StoreTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => StoreTypeWhereUniqueInput, {
    nullable: true,
  })
  storeType?: StoreTypeWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  street?: StringNullableFilter;
}

export { StoreWhereInput as StoreWhereInput };
