/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductDepartment } from "./ProductDepartment";
import { ProductDepartmentCountArgs } from "./ProductDepartmentCountArgs";
import { ProductDepartmentFindManyArgs } from "./ProductDepartmentFindManyArgs";
import { ProductDepartmentFindUniqueArgs } from "./ProductDepartmentFindUniqueArgs";
import { CreateProductDepartmentArgs } from "./CreateProductDepartmentArgs";
import { UpdateProductDepartmentArgs } from "./UpdateProductDepartmentArgs";
import { DeleteProductDepartmentArgs } from "./DeleteProductDepartmentArgs";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductDepartmentService } from "../productDepartment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductDepartment)
export class ProductDepartmentResolverBase {
  constructor(
    protected readonly service: ProductDepartmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "read",
    possession: "any",
  })
  async _productDepartmentsMeta(
    @graphql.Args() args: ProductDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductDepartment])
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "read",
    possession: "any",
  })
  async productDepartments(
    @graphql.Args() args: ProductDepartmentFindManyArgs
  ): Promise<ProductDepartment[]> {
    return this.service.productDepartments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductDepartment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "read",
    possession: "own",
  })
  async productDepartment(
    @graphql.Args() args: ProductDepartmentFindUniqueArgs
  ): Promise<ProductDepartment | null> {
    const result = await this.service.productDepartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductDepartment)
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "create",
    possession: "any",
  })
  async createProductDepartment(
    @graphql.Args() args: CreateProductDepartmentArgs
  ): Promise<ProductDepartment> {
    return await this.service.createProductDepartment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductDepartment)
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "update",
    possession: "any",
  })
  async updateProductDepartment(
    @graphql.Args() args: UpdateProductDepartmentArgs
  ): Promise<ProductDepartment | null> {
    try {
      return await this.service.updateProductDepartment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductDepartment)
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "delete",
    possession: "any",
  })
  async deleteProductDepartment(
    @graphql.Args() args: DeleteProductDepartmentArgs
  ): Promise<ProductDepartment | null> {
    try {
      return await this.service.deleteProductDepartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductCategory], { name: "productCategories" })
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async findProductCategories(
    @graphql.Parent() parent: ProductDepartment,
    @graphql.Args() args: ProductCategoryFindManyArgs
  ): Promise<ProductCategory[]> {
    const results = await this.service.findProductCategories(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
