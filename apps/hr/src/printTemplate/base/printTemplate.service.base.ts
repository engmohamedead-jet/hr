/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PrintTemplate as PrismaPrintTemplate,
  PrintTemplateContent as PrismaPrintTemplateContent,
  PrintTemplateGroup as PrismaPrintTemplateGroup,
} from "@prisma/client";

export class PrintTemplateServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrintTemplateCountArgs, "select">
  ): Promise<number> {
    return this.prisma.printTemplate.count(args);
  }

  async printTemplates(
    args: Prisma.PrintTemplateFindManyArgs
  ): Promise<PrismaPrintTemplate[]> {
    return this.prisma.printTemplate.findMany(args);
  }
  async printTemplate(
    args: Prisma.PrintTemplateFindUniqueArgs
  ): Promise<PrismaPrintTemplate | null> {
    return this.prisma.printTemplate.findUnique(args);
  }
  async createPrintTemplate(
    args: Prisma.PrintTemplateCreateArgs
  ): Promise<PrismaPrintTemplate> {
    return this.prisma.printTemplate.create(args);
  }
  async updatePrintTemplate(
    args: Prisma.PrintTemplateUpdateArgs
  ): Promise<PrismaPrintTemplate> {
    return this.prisma.printTemplate.update(args);
  }
  async deletePrintTemplate(
    args: Prisma.PrintTemplateDeleteArgs
  ): Promise<PrismaPrintTemplate> {
    return this.prisma.printTemplate.delete(args);
  }

  async findPrintTemplateContents(
    parentId: number,
    args: Prisma.PrintTemplateContentFindManyArgs
  ): Promise<PrismaPrintTemplateContent[]> {
    return this.prisma.printTemplate
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .printTemplateContents(args);
  }

  async getPrintTemplateGroupId(
    parentId: number
  ): Promise<PrismaPrintTemplateGroup | null> {
    return this.prisma.printTemplate
      .findUnique({
        where: { id: parentId },
      })
      .printTemplateGroupId();
  }
}
