/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CashRepositoryCreateNestedManyWithoutCashRepositoriesInput } from "./CashRepositoryCreateNestedManyWithoutCashRepositoriesInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { CashRepositoryWhereUniqueInput } from "./CashRepositoryWhereUniqueInput";
import { PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput } from "./PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput";
import { PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput } from "./PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput";
import { PurchaseWhereUniqueInput } from "../../purchase/base/PurchaseWhereUniqueInput";
import { ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput } from "./ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput";
import { SaleOrderCreateNestedManyWithoutCashRepositoriesInput } from "./SaleOrderCreateNestedManyWithoutCashRepositoriesInput";
import { SaleReturnCreateNestedManyWithoutCashRepositoriesInput } from "./SaleReturnCreateNestedManyWithoutCashRepositoriesInput";
import { SaleCreateNestedManyWithoutCashRepositoriesInput } from "./SaleCreateNestedManyWithoutCashRepositoriesInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";

@InputType()
class CashRepositoryCreateInput {
  @ApiProperty({
    required: false,
    type: () => CashRepositoryCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => CashRepositoryCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => CashRepositoryCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  cashRepositories?: CashRepositoryCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: () => CashRepositoryWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CashRepositoryWhereUniqueInput)
  @IsOptional()
  @Field(() => CashRepositoryWhereUniqueInput, {
    nullable: true,
  })
  parentCashRepositoryId?: CashRepositoryWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  paymentVouchers?: PaymentVoucherCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  purchaseReturns?: PurchaseReturnCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => PurchaseWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => PurchaseWhereUniqueInput)
  @IsOptional()
  @Field(() => PurchaseWhereUniqueInput, {
    nullable: true,
  })
  purchases?: PurchaseWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  receiptVouchers?: ReceiptVoucherCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => SaleOrderCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => SaleOrderCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => SaleOrderCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  saleOrders?: SaleOrderCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => SaleReturnCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => SaleReturnCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => SaleReturnCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  saleReturns?: SaleReturnCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => SaleCreateNestedManyWithoutCashRepositoriesInput,
  })
  @ValidateNested()
  @Type(() => SaleCreateNestedManyWithoutCashRepositoriesInput)
  @IsOptional()
  @Field(() => SaleCreateNestedManyWithoutCashRepositoriesInput, {
    nullable: true,
  })
  sales?: SaleCreateNestedManyWithoutCashRepositoriesInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;
}

export { CashRepositoryCreateInput as CashRepositoryCreateInput };
