/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { MaintenanceContractService } from "../maintenanceContract.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { MaintenanceContractCreateInput } from "./MaintenanceContractCreateInput";
import { MaintenanceContract } from "./MaintenanceContract";
import { MaintenanceContractFindManyArgs } from "./MaintenanceContractFindManyArgs";
import { MaintenanceContractWhereUniqueInput } from "./MaintenanceContractWhereUniqueInput";
import { MaintenanceContractUpdateInput } from "./MaintenanceContractUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class MaintenanceContractControllerBase {
  constructor(
    protected readonly service: MaintenanceContractService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MaintenanceContract })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createMaintenanceContract(
    @common.Body() data: MaintenanceContractCreateInput
  ): Promise<MaintenanceContract> {
    return await this.service.createMaintenanceContract({
      data: {
        ...data,

        contractPeriodId: {
          connect: data.contractPeriodId,
        },

        customerId: {
          connect: data.customerId,
        },

        customerUserId: data.customerUserId
          ? {
              connect: data.customerUserId,
            }
          : undefined,

        elevatorId: {
          connect: data.elevatorId,
        },

        storeId: data.storeId
          ? {
              connect: data.storeId,
            }
          : undefined,
      },
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [MaintenanceContract] })
  @ApiNestedQuery(MaintenanceContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async maintenanceContracts(
    @common.Req() request: Request
  ): Promise<MaintenanceContract[]> {
    const args = plainToClass(MaintenanceContractFindManyArgs, request.query);
    return this.service.maintenanceContracts({
      ...args,
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async maintenanceContract(
    @common.Param() params: MaintenanceContractWhereUniqueInput
  ): Promise<MaintenanceContract | null> {
    const result = await this.service.maintenanceContract({
      where: params,
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateMaintenanceContract(
    @common.Param() params: MaintenanceContractWhereUniqueInput,
    @common.Body() data: MaintenanceContractUpdateInput
  ): Promise<MaintenanceContract | null> {
    try {
      return await this.service.updateMaintenanceContract({
        where: params,
        data: {
          ...data,

          contractPeriodId: {
            connect: data.contractPeriodId,
          },

          customerId: {
            connect: data.customerId,
          },

          customerUserId: data.customerUserId
            ? {
                connect: data.customerUserId,
              }
            : undefined,

          elevatorId: {
            connect: data.elevatorId,
          },

          storeId: data.storeId
            ? {
                connect: data.storeId,
              }
            : undefined,
        },
        select: {
          confirmDate: true,
          contactEndTime: true,
          contactStartTime: true,

          contractPeriodId: {
            select: {
              id: true,
            },
          },

          contractStartDate: true,
          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          customerUserId: {
            select: {
              id: true,
            },
          },

          elevatorId: {
            select: {
              id: true,
            },
          },

          id: true,
          isConfirmed: true,
          note: true,
          orderDate: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MaintenanceContract })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteMaintenanceContract(
    @common.Param() params: MaintenanceContractWhereUniqueInput
  ): Promise<MaintenanceContract | null> {
    try {
      return await this.service.deleteMaintenanceContract({
        where: params,
        select: {
          confirmDate: true,
          contactEndTime: true,
          contactStartTime: true,

          contractPeriodId: {
            select: {
              id: true,
            },
          },

          contractStartDate: true,
          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          customerUserId: {
            select: {
              id: true,
            },
          },

          elevatorId: {
            select: {
              id: true,
            },
          },

          id: true,
          isConfirmed: true,
          note: true,
          orderDate: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
