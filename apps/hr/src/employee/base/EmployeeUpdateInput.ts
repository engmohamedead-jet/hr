/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Min,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  ValidateNested,
  IsBoolean,
} from "class-validator";

import { Decimal } from "decimal.js";
import { EmployeeClassWhereUniqueInput } from "../../employeeClass/base/EmployeeClassWhereUniqueInput";
import { Type } from "class-transformer";
import { EmployeeDepartmentWhereUniqueInput } from "../../employeeDepartment/base/EmployeeDepartmentWhereUniqueInput";
import { PaymentVoucherUpdateManyWithoutEmployeesInput } from "./PaymentVoucherUpdateManyWithoutEmployeesInput";
import { ReceiptVoucherUpdateManyWithoutEmployeesInput } from "./ReceiptVoucherUpdateManyWithoutEmployeesInput";
import { SalePersonUpdateManyWithoutEmployeesInput } from "./SalePersonUpdateManyWithoutEmployeesInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";

@InputType()
class EmployeeUpdateInput {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  balance?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeClassWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeClassWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeClassWhereUniqueInput, {
    nullable: true,
  })
  employeeClassId?: EmployeeClassWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeDepartmentWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => EmployeeDepartmentWhereUniqueInput)
  @IsOptional()
  @Field(() => EmployeeDepartmentWhereUniqueInput, {
    nullable: true,
  })
  employeeDepartmentId?: EmployeeDepartmentWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  lastYearBalance?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedName?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: () => PaymentVoucherUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => PaymentVoucherUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => PaymentVoucherUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  paymentVouchers?: PaymentVoucherUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => ReceiptVoucherUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => ReceiptVoucherUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => ReceiptVoucherUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  receiptVouchers?: ReceiptVoucherUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  remainingBalance?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => SalePersonUpdateManyWithoutEmployeesInput,
  })
  @ValidateNested()
  @Type(() => SalePersonUpdateManyWithoutEmployeesInput)
  @IsOptional()
  @Field(() => SalePersonUpdateManyWithoutEmployeesInput, {
    nullable: true,
  })
  salePeople?: SalePersonUpdateManyWithoutEmployeesInput;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  usedBalance?: Decimal | null;
}

export { EmployeeUpdateInput as EmployeeUpdateInput };
