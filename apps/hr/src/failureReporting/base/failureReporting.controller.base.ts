/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FailureReportingService } from "../failureReporting.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FailureReportingCreateInput } from "./FailureReportingCreateInput";
import { FailureReporting } from "./FailureReporting";
import { FailureReportingFindManyArgs } from "./FailureReportingFindManyArgs";
import { FailureReportingWhereUniqueInput } from "./FailureReportingWhereUniqueInput";
import { FailureReportingUpdateInput } from "./FailureReportingUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FailureReportingControllerBase {
  constructor(
    protected readonly service: FailureReportingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FailureReporting })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFailureReporting(
    @common.Body() data: FailureReportingCreateInput
  ): Promise<FailureReporting> {
    return await this.service.createFailureReporting({
      data: {
        ...data,

        customerElevatorId: {
          connect: data.customerElevatorId,
        },

        customerUser: {
          connect: data.customerUser,
        },

        elevator: data.elevator
          ? {
              connect: data.elevator,
            }
          : undefined,

        failureTypeId: {
          connect: data.failureTypeId,
        },

        store: data.store
          ? {
              connect: data.store,
            }
          : undefined,
      },
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FailureReporting] })
  @ApiNestedQuery(FailureReportingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failureReportings(
    @common.Req() request: Request
  ): Promise<FailureReporting[]> {
    const args = plainToClass(FailureReportingFindManyArgs, request.query);
    return this.service.failureReportings({
      ...args,
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FailureReporting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failureReporting(
    @common.Param() params: FailureReportingWhereUniqueInput
  ): Promise<FailureReporting | null> {
    const result = await this.service.failureReporting({
      where: params,
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FailureReporting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFailureReporting(
    @common.Param() params: FailureReportingWhereUniqueInput,
    @common.Body() data: FailureReportingUpdateInput
  ): Promise<FailureReporting | null> {
    try {
      return await this.service.updateFailureReporting({
        where: params,
        data: {
          ...data,

          customerElevatorId: {
            connect: data.customerElevatorId,
          },

          customerUser: {
            connect: data.customerUser,
          },

          elevator: data.elevator
            ? {
                connect: data.elevator,
              }
            : undefined,

          failureTypeId: {
            connect: data.failureTypeId,
          },

          store: data.store
            ? {
                connect: data.store,
              }
            : undefined,
        },
        select: {
          contactingFromTime: true,
          contactingToTime: true,
          createdAt: true,

          customerElevatorId: {
            select: {
              id: true,
            },
          },

          customerUser: {
            select: {
              id: true,
            },
          },

          elevator: {
            select: {
              id: true,
            },
          },

          failureDescription: true,

          failureTypeId: {
            select: {
              id: true,
            },
          },

          id: true,
          note: true,
          reportingDate: true,
          reviewDate: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          wasReviewed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FailureReporting })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFailureReporting(
    @common.Param() params: FailureReportingWhereUniqueInput
  ): Promise<FailureReporting | null> {
    try {
      return await this.service.deleteFailureReporting({
        where: params,
        select: {
          contactingFromTime: true,
          contactingToTime: true,
          createdAt: true,

          customerElevatorId: {
            select: {
              id: true,
            },
          },

          customerUser: {
            select: {
              id: true,
            },
          },

          elevator: {
            select: {
              id: true,
            },
          },

          failureDescription: true,

          failureTypeId: {
            select: {
              id: true,
            },
          },

          id: true,
          note: true,
          reportingDate: true,
          reviewDate: true,

          store: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
          wasReviewed: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
