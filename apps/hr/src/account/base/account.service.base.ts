/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Account as PrismaAccount,
  ProductGroup as PrismaProductGroup,
  InstallmentSaleFee as PrismaInstallmentSaleFee,
  SalePerson as PrismaSalePerson,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class AccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AccountCountArgs, "select">): Promise<number> {
    return this.prisma.account.count(args);
  }

  async accounts(args: Prisma.AccountFindManyArgs): Promise<PrismaAccount[]> {
    return this.prisma.account.findMany(args);
  }
  async account(
    args: Prisma.AccountFindUniqueArgs
  ): Promise<PrismaAccount | null> {
    return this.prisma.account.findUnique(args);
  }
  async createAccount(args: Prisma.AccountCreateArgs): Promise<PrismaAccount> {
    return this.prisma.account.create(args);
  }
  async updateAccount(args: Prisma.AccountUpdateArgs): Promise<PrismaAccount> {
    return this.prisma.account.update(args);
  }
  async deleteAccount(args: Prisma.AccountDeleteArgs): Promise<PrismaAccount> {
    return this.prisma.account.delete(args);
  }

  async findSaleReturnAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .SaleReturnAccountProductGroups(args);
  }

  async findAleAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .aleAccountProductGroups(args);
  }

  async findCostOfGoodsSoldAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .costOfGoodsSoldAccountProductGroups(args);
  }

  async findInstallmentSaleFees(
    parentId: string,
    args: Prisma.InstallmentSaleFeeFindManyArgs
  ): Promise<PrismaInstallmentSaleFee[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .installmentSaleFees(args);
  }

  async findInventoryAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .inventoryAccountProductGroups(args);
  }

  async findParentAccounts(
    parentId: string,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .parentAccounts(args);
  }

  async findPurchaseAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseAccountProductGroups(args);
  }

  async findPurchaseDiscountAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseDiscountAccountProductGroups(args);
  }

  async findPurchaseReturnAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturnAccountProductGroups(args);
  }

  async findSaleDiscountAccountProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleDiscountAccountProductGroups(args);
  }

  async findSalePeople(
    parentId: string,
    args: Prisma.SalePersonFindManyArgs
  ): Promise<PrismaSalePerson[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salePeople(args);
  }

  async getParentAccountId(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.account
      .findUnique({
        where: { id: parentId },
      })
      .parentAccountId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.account
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
