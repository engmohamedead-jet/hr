/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TimeoffType } from "./TimeoffType";
import { TimeoffTypeCountArgs } from "./TimeoffTypeCountArgs";
import { TimeoffTypeFindManyArgs } from "./TimeoffTypeFindManyArgs";
import { TimeoffTypeFindUniqueArgs } from "./TimeoffTypeFindUniqueArgs";
import { CreateTimeoffTypeArgs } from "./CreateTimeoffTypeArgs";
import { UpdateTimeoffTypeArgs } from "./UpdateTimeoffTypeArgs";
import { DeleteTimeoffTypeArgs } from "./DeleteTimeoffTypeArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeoffTypeService } from "../timeoffType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeoffType)
export class TimeoffTypeResolverBase {
  constructor(
    protected readonly service: TimeoffTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "read",
    possession: "any",
  })
  async _timeoffTypesMeta(
    @graphql.Args() args: TimeoffTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeoffType])
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "read",
    possession: "any",
  })
  async timeoffTypes(
    @graphql.Args() args: TimeoffTypeFindManyArgs
  ): Promise<TimeoffType[]> {
    return this.service.timeoffTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeoffType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "read",
    possession: "own",
  })
  async timeoffType(
    @graphql.Args() args: TimeoffTypeFindUniqueArgs
  ): Promise<TimeoffType | null> {
    const result = await this.service.timeoffType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeoffType)
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "create",
    possession: "any",
  })
  async createTimeoffType(
    @graphql.Args() args: CreateTimeoffTypeArgs
  ): Promise<TimeoffType> {
    return await this.service.createTimeoffType({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeoffType)
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "update",
    possession: "any",
  })
  async updateTimeoffType(
    @graphql.Args() args: UpdateTimeoffTypeArgs
  ): Promise<TimeoffType | null> {
    try {
      return await this.service.updateTimeoffType({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeoffType)
  @nestAccessControl.UseRoles({
    resource: "TimeoffType",
    action: "delete",
    possession: "any",
  })
  async deleteTimeoffType(
    @graphql.Args() args: DeleteTimeoffTypeArgs
  ): Promise<TimeoffType | null> {
    try {
      return await this.service.deleteTimeoffType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: TimeoffType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
