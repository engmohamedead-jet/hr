/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MaintenanceVisit } from "./MaintenanceVisit";
import { MaintenanceVisitCountArgs } from "./MaintenanceVisitCountArgs";
import { MaintenanceVisitFindManyArgs } from "./MaintenanceVisitFindManyArgs";
import { MaintenanceVisitFindUniqueArgs } from "./MaintenanceVisitFindUniqueArgs";
import { CreateMaintenanceVisitArgs } from "./CreateMaintenanceVisitArgs";
import { UpdateMaintenanceVisitArgs } from "./UpdateMaintenanceVisitArgs";
import { DeleteMaintenanceVisitArgs } from "./DeleteMaintenanceVisitArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { Store } from "../../store/base/Store";
import { MaintenanceVisitService } from "../maintenanceVisit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MaintenanceVisit)
export class MaintenanceVisitResolverBase {
  constructor(
    protected readonly service: MaintenanceVisitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "any",
  })
  async _maintenanceVisitsMeta(
    @graphql.Args() args: MaintenanceVisitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MaintenanceVisit])
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "any",
  })
  async maintenanceVisits(
    @graphql.Args() args: MaintenanceVisitFindManyArgs
  ): Promise<MaintenanceVisit[]> {
    return this.service.maintenanceVisits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MaintenanceVisit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "own",
  })
  async maintenanceVisit(
    @graphql.Args() args: MaintenanceVisitFindUniqueArgs
  ): Promise<MaintenanceVisit | null> {
    const result = await this.service.maintenanceVisit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceVisit)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "create",
    possession: "any",
  })
  async createMaintenanceVisit(
    @graphql.Args() args: CreateMaintenanceVisitArgs
  ): Promise<MaintenanceVisit> {
    return await this.service.createMaintenanceVisit({
      ...args,
      data: {
        ...args.data,

        elevator: {
          connect: args.data.elevator,
        },

        store: {
          connect: args.data.store,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MaintenanceVisit)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceVisit(
    @graphql.Args() args: UpdateMaintenanceVisitArgs
  ): Promise<MaintenanceVisit | null> {
    try {
      return await this.service.updateMaintenanceVisit({
        ...args,
        data: {
          ...args.data,

          elevator: {
            connect: args.data.elevator,
          },

          store: {
            connect: args.data.store,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MaintenanceVisit)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "delete",
    possession: "any",
  })
  async deleteMaintenanceVisit(
    @graphql.Args() args: DeleteMaintenanceVisitArgs
  ): Promise<MaintenanceVisit | null> {
    try {
      return await this.service.deleteMaintenanceVisit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Elevator, {
    nullable: true,
    name: "elevator",
  })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async getElevator(
    @graphql.Parent() parent: MaintenanceVisit
  ): Promise<Elevator | null> {
    const result = await this.service.getElevator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "store",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStore(
    @graphql.Parent() parent: MaintenanceVisit
  ): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
