/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountType as PrismaAccountType,
  Account as PrismaAccount,
} from "@prisma/client";

export class AccountTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountType.count(args);
  }

  async accountTypes(
    args: Prisma.AccountTypeFindManyArgs
  ): Promise<PrismaAccountType[]> {
    return this.prisma.accountType.findMany(args);
  }
  async accountType(
    args: Prisma.AccountTypeFindUniqueArgs
  ): Promise<PrismaAccountType | null> {
    return this.prisma.accountType.findUnique(args);
  }
  async createAccountType(
    args: Prisma.AccountTypeCreateArgs
  ): Promise<PrismaAccountType> {
    return this.prisma.accountType.create(args);
  }
  async updateAccountType(
    args: Prisma.AccountTypeUpdateArgs
  ): Promise<PrismaAccountType> {
    return this.prisma.accountType.update(args);
  }
  async deleteAccountType(
    args: Prisma.AccountTypeDeleteArgs
  ): Promise<PrismaAccountType> {
    return this.prisma.accountType.delete(args);
  }

  async findAccounts(
    parentId: number,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.accountType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }
}
