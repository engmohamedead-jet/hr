/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CostCenter } from "./CostCenter";
import { CostCenterCountArgs } from "./CostCenterCountArgs";
import { CostCenterFindManyArgs } from "./CostCenterFindManyArgs";
import { CostCenterFindUniqueArgs } from "./CostCenterFindUniqueArgs";
import { CreateCostCenterArgs } from "./CreateCostCenterArgs";
import { UpdateCostCenterArgs } from "./UpdateCostCenterArgs";
import { DeleteCostCenterArgs } from "./DeleteCostCenterArgs";
import { AccountTransactionFindManyArgs } from "../../accountTransaction/base/AccountTransactionFindManyArgs";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";
import { CostCenterService } from "../costCenter.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CostCenter)
export class CostCenterResolverBase {
  constructor(
    protected readonly service: CostCenterService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "read",
    possession: "any",
  })
  async _costCentersMeta(
    @graphql.Args() args: CostCenterCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CostCenter])
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "read",
    possession: "any",
  })
  async costCenters(
    @graphql.Args() args: CostCenterFindManyArgs
  ): Promise<CostCenter[]> {
    return this.service.costCenters(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CostCenter, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "read",
    possession: "own",
  })
  async costCenter(
    @graphql.Args() args: CostCenterFindUniqueArgs
  ): Promise<CostCenter | null> {
    const result = await this.service.costCenter(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CostCenter)
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "create",
    possession: "any",
  })
  async createCostCenter(
    @graphql.Args() args: CreateCostCenterArgs
  ): Promise<CostCenter> {
    return await this.service.createCostCenter({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CostCenter)
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "update",
    possession: "any",
  })
  async updateCostCenter(
    @graphql.Args() args: UpdateCostCenterArgs
  ): Promise<CostCenter | null> {
    try {
      return await this.service.updateCostCenter({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CostCenter)
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "delete",
    possession: "any",
  })
  async deleteCostCenter(
    @graphql.Args() args: DeleteCostCenterArgs
  ): Promise<CostCenter | null> {
    try {
      return await this.service.deleteCostCenter(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountTransaction], {
    name: "accountTransactions",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async findAccountTransactions(
    @graphql.Parent() parent: CostCenter,
    @graphql.Args() args: AccountTransactionFindManyArgs
  ): Promise<AccountTransaction[]> {
    const results = await this.service.findAccountTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
