/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkOrderDependency } from "./WorkOrderDependency";
import { WorkOrderDependencyCountArgs } from "./WorkOrderDependencyCountArgs";
import { WorkOrderDependencyFindManyArgs } from "./WorkOrderDependencyFindManyArgs";
import { WorkOrderDependencyFindUniqueArgs } from "./WorkOrderDependencyFindUniqueArgs";
import { CreateWorkOrderDependencyArgs } from "./CreateWorkOrderDependencyArgs";
import { UpdateWorkOrderDependencyArgs } from "./UpdateWorkOrderDependencyArgs";
import { DeleteWorkOrderDependencyArgs } from "./DeleteWorkOrderDependencyArgs";
import { WorkOrder } from "../../workOrder/base/WorkOrder";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkOrderDependencyService } from "../workOrderDependency.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkOrderDependency)
export class WorkOrderDependencyResolverBase {
  constructor(
    protected readonly service: WorkOrderDependencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async _workOrderDependenciesMeta(
    @graphql.Args() args: WorkOrderDependencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkOrderDependency])
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async workOrderDependencies(
    @graphql.Args() args: WorkOrderDependencyFindManyArgs
  ): Promise<WorkOrderDependency[]> {
    return this.service.workOrderDependencies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkOrderDependency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "own",
  })
  async workOrderDependency(
    @graphql.Args() args: WorkOrderDependencyFindUniqueArgs
  ): Promise<WorkOrderDependency | null> {
    const result = await this.service.workOrderDependency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrderDependency)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "create",
    possession: "any",
  })
  async createWorkOrderDependency(
    @graphql.Args() args: CreateWorkOrderDependencyArgs
  ): Promise<WorkOrderDependency> {
    return await this.service.createWorkOrderDependency({
      ...args,
      data: {
        ...args.data,

        blockedByWorkOrderId: {
          connect: args.data.blockedByWorkOrderId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        workOrderId: args.data.workOrderId
          ? {
              connect: args.data.workOrderId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrderDependency)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "update",
    possession: "any",
  })
  async updateWorkOrderDependency(
    @graphql.Args() args: UpdateWorkOrderDependencyArgs
  ): Promise<WorkOrderDependency | null> {
    try {
      return await this.service.updateWorkOrderDependency({
        ...args,
        data: {
          ...args.data,

          blockedByWorkOrderId: {
            connect: args.data.blockedByWorkOrderId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          workOrderId: args.data.workOrderId
            ? {
                connect: args.data.workOrderId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkOrderDependency)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "delete",
    possession: "any",
  })
  async deleteWorkOrderDependency(
    @graphql.Args() args: DeleteWorkOrderDependencyArgs
  ): Promise<WorkOrderDependency | null> {
    try {
      return await this.service.deleteWorkOrderDependency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkOrder, {
    nullable: true,
    name: "blockedByWorkOrderId",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  async getBlockedByWorkOrderId(
    @graphql.Parent() parent: WorkOrderDependency
  ): Promise<WorkOrder | null> {
    const result = await this.service.getBlockedByWorkOrderId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkOrderDependency
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkOrder, {
    nullable: true,
    name: "workOrderId",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  async getWorkOrderId(
    @graphql.Parent() parent: WorkOrderDependency
  ): Promise<WorkOrder | null> {
    const result = await this.service.getWorkOrderId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
