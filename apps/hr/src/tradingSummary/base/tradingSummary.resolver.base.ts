/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TradingSummary } from "./TradingSummary";
import { TradingSummaryCountArgs } from "./TradingSummaryCountArgs";
import { TradingSummaryFindManyArgs } from "./TradingSummaryFindManyArgs";
import { TradingSummaryFindUniqueArgs } from "./TradingSummaryFindUniqueArgs";
import { CreateTradingSummaryArgs } from "./CreateTradingSummaryArgs";
import { UpdateTradingSummaryArgs } from "./UpdateTradingSummaryArgs";
import { DeleteTradingSummaryArgs } from "./DeleteTradingSummaryArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { TradingSummaryService } from "../tradingSummary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TradingSummary)
export class TradingSummaryResolverBase {
  constructor(
    protected readonly service: TradingSummaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "read",
    possession: "any",
  })
  async _tradingSummariesMeta(
    @graphql.Args() args: TradingSummaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TradingSummary])
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "read",
    possession: "any",
  })
  async tradingSummaries(
    @graphql.Args() args: TradingSummaryFindManyArgs
  ): Promise<TradingSummary[]> {
    return this.service.tradingSummaries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TradingSummary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "read",
    possession: "own",
  })
  async tradingSummary(
    @graphql.Args() args: TradingSummaryFindUniqueArgs
  ): Promise<TradingSummary | null> {
    const result = await this.service.tradingSummary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TradingSummary)
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "create",
    possession: "any",
  })
  async createTradingSummary(
    @graphql.Args() args: CreateTradingSummaryArgs
  ): Promise<TradingSummary> {
    return await this.service.createTradingSummary({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TradingSummary)
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "update",
    possession: "any",
  })
  async updateTradingSummary(
    @graphql.Args() args: UpdateTradingSummaryArgs
  ): Promise<TradingSummary | null> {
    try {
      return await this.service.updateTradingSummary({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TradingSummary)
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "delete",
    possession: "any",
  })
  async deleteTradingSummary(
    @graphql.Args() args: DeleteTradingSummaryArgs
  ): Promise<TradingSummary | null> {
    try {
      return await this.service.deleteTradingSummary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: TradingSummary
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
