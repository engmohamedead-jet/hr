/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BillOfMaterialDetail } from "./BillOfMaterialDetail";
import { BillOfMaterialDetailCountArgs } from "./BillOfMaterialDetailCountArgs";
import { BillOfMaterialDetailFindManyArgs } from "./BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetailFindUniqueArgs } from "./BillOfMaterialDetailFindUniqueArgs";
import { CreateBillOfMaterialDetailArgs } from "./CreateBillOfMaterialDetailArgs";
import { UpdateBillOfMaterialDetailArgs } from "./UpdateBillOfMaterialDetailArgs";
import { DeleteBillOfMaterialDetailArgs } from "./DeleteBillOfMaterialDetailArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Unit } from "../../unit/base/Unit";
import { WorkCenterRouting } from "../../workCenterRouting/base/WorkCenterRouting";
import { BillOfMaterialDetailService } from "../billOfMaterialDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BillOfMaterialDetail)
export class BillOfMaterialDetailResolverBase {
  constructor(
    protected readonly service: BillOfMaterialDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async _billOfMaterialDetailsMeta(
    @graphql.Args() args: BillOfMaterialDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BillOfMaterialDetail])
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async billOfMaterialDetails(
    @graphql.Args() args: BillOfMaterialDetailFindManyArgs
  ): Promise<BillOfMaterialDetail[]> {
    return this.service.billOfMaterialDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BillOfMaterialDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "own",
  })
  async billOfMaterialDetail(
    @graphql.Args() args: BillOfMaterialDetailFindUniqueArgs
  ): Promise<BillOfMaterialDetail | null> {
    const result = await this.service.billOfMaterialDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillOfMaterialDetail)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "create",
    possession: "any",
  })
  async createBillOfMaterialDetail(
    @graphql.Args() args: CreateBillOfMaterialDetailArgs
  ): Promise<BillOfMaterialDetail> {
    return await this.service.createBillOfMaterialDetail({
      ...args,
      data: {
        ...args.data,

        billOfMaterial: {
          connect: args.data.billOfMaterial,
        },

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        unitId: {
          connect: args.data.unitId,
        },

        workCenterRoutingId: args.data.workCenterRoutingId
          ? {
              connect: args.data.workCenterRoutingId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BillOfMaterialDetail)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterialDetail(
    @graphql.Args() args: UpdateBillOfMaterialDetailArgs
  ): Promise<BillOfMaterialDetail | null> {
    try {
      return await this.service.updateBillOfMaterialDetail({
        ...args,
        data: {
          ...args.data,

          billOfMaterial: {
            connect: args.data.billOfMaterial,
          },

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          unitId: {
            connect: args.data.unitId,
          },

          workCenterRoutingId: args.data.workCenterRoutingId
            ? {
                connect: args.data.workCenterRoutingId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BillOfMaterialDetail)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "delete",
    possession: "any",
  })
  async deleteBillOfMaterialDetail(
    @graphql.Args() args: DeleteBillOfMaterialDetailArgs
  ): Promise<BillOfMaterialDetail | null> {
    try {
      return await this.service.deleteBillOfMaterialDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BillOfMaterial, {
    nullable: true,
    name: "billOfMaterial",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async getBillOfMaterial(
    @graphql.Parent() parent: BillOfMaterialDetail
  ): Promise<BillOfMaterial | null> {
    const result = await this.service.getBillOfMaterial(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: BillOfMaterialDetail
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: BillOfMaterialDetail
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(
    @graphql.Parent() parent: BillOfMaterialDetail
  ): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkCenterRouting, {
    nullable: true,
    name: "workCenterRoutingId",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterRouting",
    action: "read",
    possession: "any",
  })
  async getWorkCenterRoutingId(
    @graphql.Parent() parent: BillOfMaterialDetail
  ): Promise<WorkCenterRouting | null> {
    const result = await this.service.getWorkCenterRoutingId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
