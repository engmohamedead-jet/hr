/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FailureReporting as PrismaFailureReporting,
  CustomerElevator as PrismaCustomerElevator,
  CustomerUser as PrismaCustomerUser,
  Elevator as PrismaElevator,
  FailureType as PrismaFailureType,
  Store as PrismaStore,
} from "@prisma/client";

export class FailureReportingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FailureReportingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.failureReporting.count(args);
  }

  async failureReportings(
    args: Prisma.FailureReportingFindManyArgs
  ): Promise<PrismaFailureReporting[]> {
    return this.prisma.failureReporting.findMany(args);
  }
  async failureReporting(
    args: Prisma.FailureReportingFindUniqueArgs
  ): Promise<PrismaFailureReporting | null> {
    return this.prisma.failureReporting.findUnique(args);
  }
  async createFailureReporting(
    args: Prisma.FailureReportingCreateArgs
  ): Promise<PrismaFailureReporting> {
    return this.prisma.failureReporting.create(args);
  }
  async updateFailureReporting(
    args: Prisma.FailureReportingUpdateArgs
  ): Promise<PrismaFailureReporting> {
    return this.prisma.failureReporting.update(args);
  }
  async deleteFailureReporting(
    args: Prisma.FailureReportingDeleteArgs
  ): Promise<PrismaFailureReporting> {
    return this.prisma.failureReporting.delete(args);
  }

  async getCustomerElevatorId(
    parentId: string
  ): Promise<PrismaCustomerElevator | null> {
    return this.prisma.failureReporting
      .findUnique({
        where: { id: parentId },
      })
      .customerElevatorId();
  }

  async getCustomerUser(parentId: string): Promise<PrismaCustomerUser | null> {
    return this.prisma.failureReporting
      .findUnique({
        where: { id: parentId },
      })
      .customerUser();
  }

  async getElevator(parentId: string): Promise<PrismaElevator | null> {
    return this.prisma.failureReporting
      .findUnique({
        where: { id: parentId },
      })
      .elevator();
  }

  async getFailureTypeId(parentId: string): Promise<PrismaFailureType | null> {
    return this.prisma.failureReporting
      .findUnique({
        where: { id: parentId },
      })
      .failureTypeId();
  }

  async getStore(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.failureReporting
      .findUnique({
        where: { id: parentId },
      })
      .store();
  }
}
