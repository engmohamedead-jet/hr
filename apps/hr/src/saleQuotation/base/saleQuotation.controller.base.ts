/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SaleQuotationService } from "../saleQuotation.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SaleQuotationCreateInput } from "./SaleQuotationCreateInput";
import { SaleQuotation } from "./SaleQuotation";
import { SaleQuotationFindManyArgs } from "./SaleQuotationFindManyArgs";
import { SaleQuotationWhereUniqueInput } from "./SaleQuotationWhereUniqueInput";
import { SaleQuotationUpdateInput } from "./SaleQuotationUpdateInput";
import { SaleQuotationDetailFindManyArgs } from "../../saleQuotationDetail/base/SaleQuotationDetailFindManyArgs";
import { SaleQuotationDetail } from "../../saleQuotationDetail/base/SaleQuotationDetail";
import { SaleQuotationDetailWhereUniqueInput } from "../../saleQuotationDetail/base/SaleQuotationDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SaleQuotationControllerBase {
  constructor(
    protected readonly service: SaleQuotationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SaleQuotation })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSaleQuotation(
    @common.Body() data: SaleQuotationCreateInput
  ): Promise<SaleQuotation> {
    return await this.service.createSaleQuotation({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        expectedDeliveryDate: true,
        id: true,
        internalMemo: true,
        isActive: true,
        isCancelled: true,
        nonTaxableTotal: true,
        note: true,
        referenceNumber: true,
        saleQuotationDate: true,
        sequenceNumber: true,
        taxRate: true,
        taxTotal: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        terms: true,
        transactionDateTime: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SaleQuotation] })
  @ApiNestedQuery(SaleQuotationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleQuotations(
    @common.Req() request: Request
  ): Promise<SaleQuotation[]> {
    const args = plainToClass(SaleQuotationFindManyArgs, request.query);
    return this.service.saleQuotations({
      ...args,
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        expectedDeliveryDate: true,
        id: true,
        internalMemo: true,
        isActive: true,
        isCancelled: true,
        nonTaxableTotal: true,
        note: true,
        referenceNumber: true,
        saleQuotationDate: true,
        sequenceNumber: true,
        taxRate: true,
        taxTotal: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        terms: true,
        transactionDateTime: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SaleQuotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleQuotation(
    @common.Param() params: SaleQuotationWhereUniqueInput
  ): Promise<SaleQuotation | null> {
    const result = await this.service.saleQuotation({
      where: params,
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        expectedDeliveryDate: true,
        id: true,
        internalMemo: true,
        isActive: true,
        isCancelled: true,
        nonTaxableTotal: true,
        note: true,
        referenceNumber: true,
        saleQuotationDate: true,
        sequenceNumber: true,
        taxRate: true,
        taxTotal: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        terms: true,
        transactionDateTime: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SaleQuotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSaleQuotation(
    @common.Param() params: SaleQuotationWhereUniqueInput,
    @common.Body() data: SaleQuotationUpdateInput
  ): Promise<SaleQuotation | null> {
    try {
      return await this.service.updateSaleQuotation({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          discount: true,
          discountRate: true,
          expectedDeliveryDate: true,
          id: true,
          internalMemo: true,
          isActive: true,
          isCancelled: true,
          nonTaxableTotal: true,
          note: true,
          referenceNumber: true,
          saleQuotationDate: true,
          sequenceNumber: true,
          taxRate: true,
          taxTotal: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          terms: true,
          transactionDateTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SaleQuotation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSaleQuotation(
    @common.Param() params: SaleQuotationWhereUniqueInput
  ): Promise<SaleQuotation | null> {
    try {
      return await this.service.deleteSaleQuotation({
        where: params,
        select: {
          createdAt: true,
          discount: true,
          discountRate: true,
          expectedDeliveryDate: true,
          id: true,
          internalMemo: true,
          isActive: true,
          isCancelled: true,
          nonTaxableTotal: true,
          note: true,
          referenceNumber: true,
          saleQuotationDate: true,
          sequenceNumber: true,
          taxRate: true,
          taxTotal: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          terms: true,
          transactionDateTime: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleQuotationDetails")
  @ApiNestedQuery(SaleQuotationDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleQuotationDetail",
    action: "read",
    possession: "any",
  })
  async findSaleQuotationDetails(
    @common.Req() request: Request,
    @common.Param() params: SaleQuotationWhereUniqueInput
  ): Promise<SaleQuotationDetail[]> {
    const query = plainToClass(SaleQuotationDetailFindManyArgs, request.query);
    const results = await this.service.findSaleQuotationDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        salePriceType: {
          select: {
            id: true,
          },
        },

        saleQuotationId: {
          select: {
            id: true,
          },
        },

        sequence: true,
        shippingCharge: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "update",
    possession: "any",
  })
  async connectSaleQuotationDetails(
    @common.Param() params: SaleQuotationWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        connect: body,
      },
    };
    await this.service.updateSaleQuotation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "update",
    possession: "any",
  })
  async updateSaleQuotationDetails(
    @common.Param() params: SaleQuotationWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        set: body,
      },
    };
    await this.service.updateSaleQuotation({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "update",
    possession: "any",
  })
  async disconnectSaleQuotationDetails(
    @common.Param() params: SaleQuotationWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        disconnect: body,
      },
    };
    await this.service.updateSaleQuotation({
      where: params,
      data,
      select: { id: true },
    });
  }
}
