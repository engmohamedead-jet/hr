/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { StoreLocation } from "./StoreLocation";
import { StoreLocationCountArgs } from "./StoreLocationCountArgs";
import { StoreLocationFindManyArgs } from "./StoreLocationFindManyArgs";
import { StoreLocationFindUniqueArgs } from "./StoreLocationFindUniqueArgs";
import { CreateStoreLocationArgs } from "./CreateStoreLocationArgs";
import { UpdateStoreLocationArgs } from "./UpdateStoreLocationArgs";
import { DeleteStoreLocationArgs } from "./DeleteStoreLocationArgs";
import { Store } from "../../store/base/Store";
import { Tenant } from "../../tenant/base/Tenant";
import { StoreLocationService } from "../storeLocation.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => StoreLocation)
export class StoreLocationResolverBase {
  constructor(
    protected readonly service: StoreLocationService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "read",
    possession: "any",
  })
  async _storeLocationsMeta(
    @graphql.Args() args: StoreLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [StoreLocation])
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "read",
    possession: "any",
  })
  async storeLocations(
    @graphql.Args() args: StoreLocationFindManyArgs
  ): Promise<StoreLocation[]> {
    return this.service.storeLocations(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => StoreLocation, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "read",
    possession: "own",
  })
  async storeLocation(
    @graphql.Args() args: StoreLocationFindUniqueArgs
  ): Promise<StoreLocation | null> {
    const result = await this.service.storeLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoreLocation)
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "create",
    possession: "any",
  })
  async createStoreLocation(
    @graphql.Args() args: CreateStoreLocationArgs
  ): Promise<StoreLocation> {
    return await this.service.createStoreLocation({
      ...args,
      data: {
        ...args.data,

        storeId: {
          connect: args.data.storeId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => StoreLocation)
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "update",
    possession: "any",
  })
  async updateStoreLocation(
    @graphql.Args() args: UpdateStoreLocationArgs
  ): Promise<StoreLocation | null> {
    try {
      return await this.service.updateStoreLocation({
        ...args,
        data: {
          ...args.data,

          storeId: {
            connect: args.data.storeId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StoreLocation)
  @nestAccessControl.UseRoles({
    resource: "StoreLocation",
    action: "delete",
    possession: "any",
  })
  async deleteStoreLocation(
    @graphql.Args() args: DeleteStoreLocationArgs
  ): Promise<StoreLocation | null> {
    try {
      return await this.service.deleteStoreLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: StoreLocation
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: StoreLocation
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
