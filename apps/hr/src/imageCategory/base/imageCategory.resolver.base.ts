/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ImageCategory } from "./ImageCategory";
import { ImageCategoryCountArgs } from "./ImageCategoryCountArgs";
import { ImageCategoryFindManyArgs } from "./ImageCategoryFindManyArgs";
import { ImageCategoryFindUniqueArgs } from "./ImageCategoryFindUniqueArgs";
import { CreateImageCategoryArgs } from "./CreateImageCategoryArgs";
import { UpdateImageCategoryArgs } from "./UpdateImageCategoryArgs";
import { DeleteImageCategoryArgs } from "./DeleteImageCategoryArgs";
import { ImageCategoryService } from "../imageCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ImageCategory)
export class ImageCategoryResolverBase {
  constructor(
    protected readonly service: ImageCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "read",
    possession: "any",
  })
  async _imageCategoriesMeta(
    @graphql.Args() args: ImageCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ImageCategory])
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "read",
    possession: "any",
  })
  async imageCategories(
    @graphql.Args() args: ImageCategoryFindManyArgs
  ): Promise<ImageCategory[]> {
    return this.service.imageCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ImageCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "read",
    possession: "own",
  })
  async imageCategory(
    @graphql.Args() args: ImageCategoryFindUniqueArgs
  ): Promise<ImageCategory | null> {
    const result = await this.service.imageCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ImageCategory)
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "create",
    possession: "any",
  })
  async createImageCategory(
    @graphql.Args() args: CreateImageCategoryArgs
  ): Promise<ImageCategory> {
    return await this.service.createImageCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ImageCategory)
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "update",
    possession: "any",
  })
  async updateImageCategory(
    @graphql.Args() args: UpdateImageCategoryArgs
  ): Promise<ImageCategory | null> {
    try {
      return await this.service.updateImageCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ImageCategory)
  @nestAccessControl.UseRoles({
    resource: "ImageCategory",
    action: "delete",
    possession: "any",
  })
  async deleteImageCategory(
    @graphql.Args() args: DeleteImageCategoryArgs
  ): Promise<ImageCategory | null> {
    try {
      return await this.service.deleteImageCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
