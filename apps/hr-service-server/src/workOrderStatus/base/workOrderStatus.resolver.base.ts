/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkOrderStatus } from "./WorkOrderStatus";
import { WorkOrderStatusCountArgs } from "./WorkOrderStatusCountArgs";
import { WorkOrderStatusFindManyArgs } from "./WorkOrderStatusFindManyArgs";
import { WorkOrderStatusFindUniqueArgs } from "./WorkOrderStatusFindUniqueArgs";
import { CreateWorkOrderStatusArgs } from "./CreateWorkOrderStatusArgs";
import { UpdateWorkOrderStatusArgs } from "./UpdateWorkOrderStatusArgs";
import { DeleteWorkOrderStatusArgs } from "./DeleteWorkOrderStatusArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkOrderStatusService } from "../workOrderStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkOrderStatus)
export class WorkOrderStatusResolverBase {
  constructor(
    protected readonly service: WorkOrderStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "read",
    possession: "any",
  })
  async _workOrderStatusesMeta(
    @graphql.Args() args: WorkOrderStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkOrderStatus])
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "read",
    possession: "any",
  })
  async workOrderStatuses(
    @graphql.Args() args: WorkOrderStatusFindManyArgs
  ): Promise<WorkOrderStatus[]> {
    return this.service.workOrderStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkOrderStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "read",
    possession: "own",
  })
  async workOrderStatus(
    @graphql.Args() args: WorkOrderStatusFindUniqueArgs
  ): Promise<WorkOrderStatus | null> {
    const result = await this.service.workOrderStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrderStatus)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "create",
    possession: "any",
  })
  async createWorkOrderStatus(
    @graphql.Args() args: CreateWorkOrderStatusArgs
  ): Promise<WorkOrderStatus> {
    return await this.service.createWorkOrderStatus({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrderStatus)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "update",
    possession: "any",
  })
  async updateWorkOrderStatus(
    @graphql.Args() args: UpdateWorkOrderStatusArgs
  ): Promise<WorkOrderStatus | null> {
    try {
      return await this.service.updateWorkOrderStatus({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkOrderStatus)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "delete",
    possession: "any",
  })
  async deleteWorkOrderStatus(
    @graphql.Args() args: DeleteWorkOrderStatusArgs
  ): Promise<WorkOrderStatus | null> {
    try {
      return await this.service.deleteWorkOrderStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkOrderStatus
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
