/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TradingSummary as PrismaTradingSummary,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class TradingSummaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TradingSummaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tradingSummary.count(args);
  }

  async tradingSummaries(
    args: Prisma.TradingSummaryFindManyArgs
  ): Promise<PrismaTradingSummary[]> {
    return this.prisma.tradingSummary.findMany(args);
  }
  async tradingSummary(
    args: Prisma.TradingSummaryFindUniqueArgs
  ): Promise<PrismaTradingSummary | null> {
    return this.prisma.tradingSummary.findUnique(args);
  }
  async createTradingSummary(
    args: Prisma.TradingSummaryCreateArgs
  ): Promise<PrismaTradingSummary> {
    return this.prisma.tradingSummary.create(args);
  }
  async updateTradingSummary(
    args: Prisma.TradingSummaryUpdateArgs
  ): Promise<PrismaTradingSummary> {
    return this.prisma.tradingSummary.update(args);
  }
  async deleteTradingSummary(
    args: Prisma.TradingSummaryDeleteArgs
  ): Promise<PrismaTradingSummary> {
    return this.prisma.tradingSummary.delete(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.tradingSummary
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
