/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ElevatorStatus } from "./ElevatorStatus";
import { ElevatorStatusCountArgs } from "./ElevatorStatusCountArgs";
import { ElevatorStatusFindManyArgs } from "./ElevatorStatusFindManyArgs";
import { ElevatorStatusFindUniqueArgs } from "./ElevatorStatusFindUniqueArgs";
import { CreateElevatorStatusArgs } from "./CreateElevatorStatusArgs";
import { UpdateElevatorStatusArgs } from "./UpdateElevatorStatusArgs";
import { DeleteElevatorStatusArgs } from "./DeleteElevatorStatusArgs";
import { ElevatorStatusService } from "../elevatorStatus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ElevatorStatus)
export class ElevatorStatusResolverBase {
  constructor(
    protected readonly service: ElevatorStatusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "read",
    possession: "any",
  })
  async _elevatorStatusesMeta(
    @graphql.Args() args: ElevatorStatusCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ElevatorStatus])
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "read",
    possession: "any",
  })
  async elevatorStatuses(
    @graphql.Args() args: ElevatorStatusFindManyArgs
  ): Promise<ElevatorStatus[]> {
    return this.service.elevatorStatuses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ElevatorStatus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "read",
    possession: "own",
  })
  async elevatorStatus(
    @graphql.Args() args: ElevatorStatusFindUniqueArgs
  ): Promise<ElevatorStatus | null> {
    const result = await this.service.elevatorStatus(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorStatus)
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "create",
    possession: "any",
  })
  async createElevatorStatus(
    @graphql.Args() args: CreateElevatorStatusArgs
  ): Promise<ElevatorStatus> {
    return await this.service.createElevatorStatus({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorStatus)
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "update",
    possession: "any",
  })
  async updateElevatorStatus(
    @graphql.Args() args: UpdateElevatorStatusArgs
  ): Promise<ElevatorStatus | null> {
    try {
      return await this.service.updateElevatorStatus({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ElevatorStatus)
  @nestAccessControl.UseRoles({
    resource: "ElevatorStatus",
    action: "delete",
    possession: "any",
  })
  async deleteElevatorStatus(
    @graphql.Args() args: DeleteElevatorStatusArgs
  ): Promise<ElevatorStatus | null> {
    try {
      return await this.service.deleteElevatorStatus(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
