/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeSalary as PrismaEmployeeSalary,
  FiscalMonth as PrismaFiscalMonth,
} from "@prisma/client";

export class EmployeeSalaryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeSalaryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeSalary.count(args);
  }

  async employeeSalaries(
    args: Prisma.EmployeeSalaryFindManyArgs
  ): Promise<PrismaEmployeeSalary[]> {
    return this.prisma.employeeSalary.findMany(args);
  }
  async employeeSalary(
    args: Prisma.EmployeeSalaryFindUniqueArgs
  ): Promise<PrismaEmployeeSalary | null> {
    return this.prisma.employeeSalary.findUnique(args);
  }
  async createEmployeeSalary(
    args: Prisma.EmployeeSalaryCreateArgs
  ): Promise<PrismaEmployeeSalary> {
    return this.prisma.employeeSalary.create(args);
  }
  async updateEmployeeSalary(
    args: Prisma.EmployeeSalaryUpdateArgs
  ): Promise<PrismaEmployeeSalary> {
    return this.prisma.employeeSalary.update(args);
  }
  async deleteEmployeeSalary(
    args: Prisma.EmployeeSalaryDeleteArgs
  ): Promise<PrismaEmployeeSalary> {
    return this.prisma.employeeSalary.delete(args);
  }

  async getFiscalMonthId(parentId: string): Promise<PrismaFiscalMonth | null> {
    return this.prisma.employeeSalary
      .findUnique({
        where: { id: parentId },
      })
      .fiscalMonthId();
  }
}
