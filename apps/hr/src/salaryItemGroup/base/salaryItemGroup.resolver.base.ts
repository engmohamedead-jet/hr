/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalaryItemGroup } from "./SalaryItemGroup";
import { SalaryItemGroupCountArgs } from "./SalaryItemGroupCountArgs";
import { SalaryItemGroupFindManyArgs } from "./SalaryItemGroupFindManyArgs";
import { SalaryItemGroupFindUniqueArgs } from "./SalaryItemGroupFindUniqueArgs";
import { CreateSalaryItemGroupArgs } from "./CreateSalaryItemGroupArgs";
import { UpdateSalaryItemGroupArgs } from "./UpdateSalaryItemGroupArgs";
import { DeleteSalaryItemGroupArgs } from "./DeleteSalaryItemGroupArgs";
import { SalaryItemFindManyArgs } from "../../salaryItem/base/SalaryItemFindManyArgs";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { Tenant } from "../../tenant/base/Tenant";
import { SalaryItemGroupService } from "../salaryItemGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalaryItemGroup)
export class SalaryItemGroupResolverBase {
  constructor(
    protected readonly service: SalaryItemGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "read",
    possession: "any",
  })
  async _salaryItemGroupsMeta(
    @graphql.Args() args: SalaryItemGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalaryItemGroup])
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "read",
    possession: "any",
  })
  async salaryItemGroups(
    @graphql.Args() args: SalaryItemGroupFindManyArgs
  ): Promise<SalaryItemGroup[]> {
    return this.service.salaryItemGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalaryItemGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "read",
    possession: "own",
  })
  async salaryItemGroup(
    @graphql.Args() args: SalaryItemGroupFindUniqueArgs
  ): Promise<SalaryItemGroup | null> {
    const result = await this.service.salaryItemGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItemGroup)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "create",
    possession: "any",
  })
  async createSalaryItemGroup(
    @graphql.Args() args: CreateSalaryItemGroupArgs
  ): Promise<SalaryItemGroup> {
    return await this.service.createSalaryItemGroup({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalaryItemGroup)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "update",
    possession: "any",
  })
  async updateSalaryItemGroup(
    @graphql.Args() args: UpdateSalaryItemGroupArgs
  ): Promise<SalaryItemGroup | null> {
    try {
      return await this.service.updateSalaryItemGroup({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalaryItemGroup)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "delete",
    possession: "any",
  })
  async deleteSalaryItemGroup(
    @graphql.Args() args: DeleteSalaryItemGroupArgs
  ): Promise<SalaryItemGroup | null> {
    try {
      return await this.service.deleteSalaryItemGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalaryItem], { name: "salaryItems" })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async findSalaryItems(
    @graphql.Parent() parent: SalaryItemGroup,
    @graphql.Args() args: SalaryItemFindManyArgs
  ): Promise<SalaryItem[]> {
    const results = await this.service.findSalaryItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: SalaryItemGroup
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
