/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalePerson as PrismaSalePerson,
  Account as PrismaAccount,
  Employee as PrismaEmployee,
  SaleTeam as PrismaSaleTeam,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SalePersonServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalePersonCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salePerson.count(args);
  }

  async salePeople(
    args: Prisma.SalePersonFindManyArgs
  ): Promise<PrismaSalePerson[]> {
    return this.prisma.salePerson.findMany(args);
  }
  async salePerson(
    args: Prisma.SalePersonFindUniqueArgs
  ): Promise<PrismaSalePerson | null> {
    return this.prisma.salePerson.findUnique(args);
  }
  async createSalePerson(
    args: Prisma.SalePersonCreateArgs
  ): Promise<PrismaSalePerson> {
    return this.prisma.salePerson.create(args);
  }
  async updateSalePerson(
    args: Prisma.SalePersonUpdateArgs
  ): Promise<PrismaSalePerson> {
    return this.prisma.salePerson.update(args);
  }
  async deleteSalePerson(
    args: Prisma.SalePersonDeleteArgs
  ): Promise<PrismaSalePerson> {
    return this.prisma.salePerson.delete(args);
  }

  async getAccountId(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.salePerson
      .findUnique({
        where: { id: parentId },
      })
      .accountId();
  }

  async getEmployeeId(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.salePerson
      .findUnique({
        where: { id: parentId },
      })
      .employeeId();
  }

  async getSaleTeamId(parentId: string): Promise<PrismaSaleTeam | null> {
    return this.prisma.salePerson
      .findUnique({
        where: { id: parentId },
      })
      .saleTeamId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.salePerson
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
