/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Elevator } from "./Elevator";
import { ElevatorCountArgs } from "./ElevatorCountArgs";
import { ElevatorFindManyArgs } from "./ElevatorFindManyArgs";
import { ElevatorFindUniqueArgs } from "./ElevatorFindUniqueArgs";
import { CreateElevatorArgs } from "./CreateElevatorArgs";
import { UpdateElevatorArgs } from "./UpdateElevatorArgs";
import { DeleteElevatorArgs } from "./DeleteElevatorArgs";
import { CustomerElevatorFindManyArgs } from "../../customerElevator/base/CustomerElevatorFindManyArgs";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { CustomerUserFindManyArgs } from "../../customerUser/base/CustomerUserFindManyArgs";
import { CustomerUser } from "../../customerUser/base/CustomerUser";
import { ElevatorSparePartFindManyArgs } from "../../elevatorSparePart/base/ElevatorSparePartFindManyArgs";
import { ElevatorSparePart } from "../../elevatorSparePart/base/ElevatorSparePart";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { InstallationContractFindManyArgs } from "../../installationContract/base/InstallationContractFindManyArgs";
import { InstallationContract } from "../../installationContract/base/InstallationContract";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceVisitFindManyArgs } from "../../maintenanceVisit/base/MaintenanceVisitFindManyArgs";
import { MaintenanceVisit } from "../../maintenanceVisit/base/MaintenanceVisit";
import { PeriodicMaintenanceOrderFindManyArgs } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderFindManyArgs";
import { PeriodicMaintenanceOrder } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrder";
import { ControlType } from "../../controlType/base/ControlType";
import { DoorType } from "../../doorType/base/DoorType";
import { ElevatorType } from "../../elevatorType/base/ElevatorType";
import { MotorType } from "../../motorType/base/MotorType";
import { Store } from "../../store/base/Store";
import { ElevatorService } from "../elevator.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Elevator)
export class ElevatorResolverBase {
  constructor(
    protected readonly service: ElevatorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async _elevatorsMeta(
    @graphql.Args() args: ElevatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Elevator])
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async elevators(
    @graphql.Args() args: ElevatorFindManyArgs
  ): Promise<Elevator[]> {
    return this.service.elevators(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Elevator, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "own",
  })
  async elevator(
    @graphql.Args() args: ElevatorFindUniqueArgs
  ): Promise<Elevator | null> {
    const result = await this.service.elevator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Elevator)
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "create",
    possession: "any",
  })
  async createElevator(
    @graphql.Args() args: CreateElevatorArgs
  ): Promise<Elevator> {
    return await this.service.createElevator({
      ...args,
      data: {
        ...args.data,

        controlTypeId: args.data.controlTypeId
          ? {
              connect: args.data.controlTypeId,
            }
          : undefined,

        doorTypeId: args.data.doorTypeId
          ? {
              connect: args.data.doorTypeId,
            }
          : undefined,

        elevatorTypeId: args.data.elevatorTypeId
          ? {
              connect: args.data.elevatorTypeId,
            }
          : undefined,

        motorTypeId: args.data.motorTypeId
          ? {
              connect: args.data.motorTypeId,
            }
          : undefined,

        storeId: {
          connect: args.data.storeId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Elevator)
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateElevator(
    @graphql.Args() args: UpdateElevatorArgs
  ): Promise<Elevator | null> {
    try {
      return await this.service.updateElevator({
        ...args,
        data: {
          ...args.data,

          controlTypeId: args.data.controlTypeId
            ? {
                connect: args.data.controlTypeId,
              }
            : undefined,

          doorTypeId: args.data.doorTypeId
            ? {
                connect: args.data.doorTypeId,
              }
            : undefined,

          elevatorTypeId: args.data.elevatorTypeId
            ? {
                connect: args.data.elevatorTypeId,
              }
            : undefined,

          motorTypeId: args.data.motorTypeId
            ? {
                connect: args.data.motorTypeId,
              }
            : undefined,

          storeId: {
            connect: args.data.storeId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Elevator)
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "delete",
    possession: "any",
  })
  async deleteElevator(
    @graphql.Args() args: DeleteElevatorArgs
  ): Promise<Elevator | null> {
    try {
      return await this.service.deleteElevator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerElevator], { name: "customerElevators" })
  @nestAccessControl.UseRoles({
    resource: "CustomerElevator",
    action: "read",
    possession: "any",
  })
  async findCustomerElevators(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: CustomerElevatorFindManyArgs
  ): Promise<CustomerElevator[]> {
    const results = await this.service.findCustomerElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerUser], { name: "customerUsers" })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  async findCustomerUsers(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: CustomerUserFindManyArgs
  ): Promise<CustomerUser[]> {
    const results = await this.service.findCustomerUsers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ElevatorSparePart], {
    name: "elevatorSpareParts",
  })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "any",
  })
  async findElevatorSpareParts(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: ElevatorSparePartFindManyArgs
  ): Promise<ElevatorSparePart[]> {
    const results = await this.service.findElevatorSpareParts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FailureReporting], { name: "failureReportings" })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: FailureReportingFindManyArgs
  ): Promise<FailureReporting[]> {
    const results = await this.service.findFailureReportings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [InstallationContract], {
    name: "installationContracts",
  })
  @nestAccessControl.UseRoles({
    resource: "InstallationContract",
    action: "read",
    possession: "any",
  })
  async findInstallationContracts(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: InstallationContractFindManyArgs
  ): Promise<InstallationContract[]> {
    const results = await this.service.findInstallationContracts(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceContract], {
    name: "maintenanceContracts",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: MaintenanceContractFindManyArgs
  ): Promise<MaintenanceContract[]> {
    const results = await this.service.findMaintenanceContracts(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceVisit], { name: "maintenanceVisits" })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "any",
  })
  async findMaintenanceVisits(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: MaintenanceVisitFindManyArgs
  ): Promise<MaintenanceVisit[]> {
    const results = await this.service.findMaintenanceVisits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PeriodicMaintenanceOrder], {
    name: "periodicMaintenanceOrders",
  })
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async findPeriodicMaintenanceOrders(
    @graphql.Parent() parent: Elevator,
    @graphql.Args() args: PeriodicMaintenanceOrderFindManyArgs
  ): Promise<PeriodicMaintenanceOrder[]> {
    const results = await this.service.findPeriodicMaintenanceOrders(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ControlType, {
    nullable: true,
    name: "controlTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "read",
    possession: "any",
  })
  async getControlTypeId(
    @graphql.Parent() parent: Elevator
  ): Promise<ControlType | null> {
    const result = await this.service.getControlTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DoorType, {
    nullable: true,
    name: "doorTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "DoorType",
    action: "read",
    possession: "any",
  })
  async getDoorTypeId(
    @graphql.Parent() parent: Elevator
  ): Promise<DoorType | null> {
    const result = await this.service.getDoorTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ElevatorType, {
    nullable: true,
    name: "elevatorTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "read",
    possession: "any",
  })
  async getElevatorTypeId(
    @graphql.Parent() parent: Elevator
  ): Promise<ElevatorType | null> {
    const result = await this.service.getElevatorTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => MotorType, {
    nullable: true,
    name: "motorTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "MotorType",
    action: "read",
    possession: "any",
  })
  async getMotorTypeId(
    @graphql.Parent() parent: Elevator
  ): Promise<MotorType | null> {
    const result = await this.service.getMotorTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(@graphql.Parent() parent: Elevator): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
