/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DailyMovementRequest as PrismaDailyMovementRequest,
  User as PrismaUser,
  Employee as PrismaEmployee,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class DailyMovementRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DailyMovementRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dailyMovementRequest.count(args);
  }

  async dailyMovementRequests(
    args: Prisma.DailyMovementRequestFindManyArgs
  ): Promise<PrismaDailyMovementRequest[]> {
    return this.prisma.dailyMovementRequest.findMany(args);
  }
  async dailyMovementRequest(
    args: Prisma.DailyMovementRequestFindUniqueArgs
  ): Promise<PrismaDailyMovementRequest | null> {
    return this.prisma.dailyMovementRequest.findUnique(args);
  }
  async createDailyMovementRequest(
    args: Prisma.DailyMovementRequestCreateArgs
  ): Promise<PrismaDailyMovementRequest> {
    return this.prisma.dailyMovementRequest.create(args);
  }
  async updateDailyMovementRequest(
    args: Prisma.DailyMovementRequestUpdateArgs
  ): Promise<PrismaDailyMovementRequest> {
    return this.prisma.dailyMovementRequest.update(args);
  }
  async deleteDailyMovementRequest(
    args: Prisma.DailyMovementRequestDeleteArgs
  ): Promise<PrismaDailyMovementRequest> {
    return this.prisma.dailyMovementRequest.delete(args);
  }

  async getApprovedByUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dailyMovementRequest
      .findUnique({
        where: { id: parentId },
      })
      .approvedByUserId();
  }

  async getEmployeeId(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.dailyMovementRequest
      .findUnique({
        where: { id: parentId },
      })
      .employeeId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.dailyMovementRequest
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
