/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Employee } from "./Employee";
import { EmployeeCountArgs } from "./EmployeeCountArgs";
import { EmployeeFindManyArgs } from "./EmployeeFindManyArgs";
import { EmployeeFindUniqueArgs } from "./EmployeeFindUniqueArgs";
import { CreateEmployeeArgs } from "./CreateEmployeeArgs";
import { UpdateEmployeeArgs } from "./UpdateEmployeeArgs";
import { DeleteEmployeeArgs } from "./DeleteEmployeeArgs";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { BonusRequestFindManyArgs } from "../../bonusRequest/base/BonusRequestFindManyArgs";
import { BonusRequest } from "../../bonusRequest/base/BonusRequest";
import { CheckInOutFindManyArgs } from "../../checkInOut/base/CheckInOutFindManyArgs";
import { CheckInOut } from "../../checkInOut/base/CheckInOut";
import { DailyMovementRequestFindManyArgs } from "../../dailyMovementRequest/base/DailyMovementRequestFindManyArgs";
import { DailyMovementRequest } from "../../dailyMovementRequest/base/DailyMovementRequest";
import { DayOffRequestFindManyArgs } from "../../dayOffRequest/base/DayOffRequestFindManyArgs";
import { DayOffRequest } from "../../dayOffRequest/base/DayOffRequest";
import { LeaveRequestFindManyArgs } from "../../leaveRequest/base/LeaveRequestFindManyArgs";
import { LeaveRequest } from "../../leaveRequest/base/LeaveRequest";
import { OverNightRequestFindManyArgs } from "../../overNightRequest/base/OverNightRequestFindManyArgs";
import { OverNightRequest } from "../../overNightRequest/base/OverNightRequest";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeGroup } from "../../employeeGroup/base/EmployeeGroup";
import { EmployeeRole } from "../../employeeRole/base/EmployeeRole";
import { JobTitle } from "../../jobTitle/base/JobTitle";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeService } from "../employee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Employee)
export class EmployeeResolverBase {
  constructor(
    protected readonly service: EmployeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async _employeesMeta(
    @graphql.Args() args: EmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Employee])
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async employees(
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    return this.service.employees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Employee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "own",
  })
  async employee(
    @graphql.Args() args: EmployeeFindUniqueArgs
  ): Promise<Employee | null> {
    const result = await this.service.employee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Employee)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "create",
    possession: "any",
  })
  async createEmployee(
    @graphql.Args() args: CreateEmployeeArgs
  ): Promise<Employee> {
    return await this.service.createEmployee({
      ...args,
      data: {
        ...args.data,

        employeeDepartmentId: args.data.employeeDepartmentId
          ? {
              connect: args.data.employeeDepartmentId,
            }
          : undefined,

        employeeGroup: args.data.employeeGroup
          ? {
              connect: args.data.employeeGroup,
            }
          : undefined,

        employeeRoleId: args.data.employeeRoleId
          ? {
              connect: args.data.employeeRoleId,
            }
          : undefined,

        jobTitle: args.data.jobTitle
          ? {
              connect: args.data.jobTitle,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Employee)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "update",
    possession: "any",
  })
  async updateEmployee(
    @graphql.Args() args: UpdateEmployeeArgs
  ): Promise<Employee | null> {
    try {
      return await this.service.updateEmployee({
        ...args,
        data: {
          ...args.data,

          employeeDepartmentId: args.data.employeeDepartmentId
            ? {
                connect: args.data.employeeDepartmentId,
              }
            : undefined,

          employeeGroup: args.data.employeeGroup
            ? {
                connect: args.data.employeeGroup,
              }
            : undefined,

          employeeRoleId: args.data.employeeRoleId
            ? {
                connect: args.data.employeeRoleId,
              }
            : undefined,

          jobTitle: args.data.jobTitle
            ? {
                connect: args.data.jobTitle,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Employee)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "delete",
    possession: "any",
  })
  async deleteEmployee(
    @graphql.Args() args: DeleteEmployeeArgs
  ): Promise<Employee | null> {
    try {
      return await this.service.deleteEmployee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attendance], { name: "attendances" })
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: AttendanceFindManyArgs
  ): Promise<Attendance[]> {
    const results = await this.service.findAttendances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BonusRequest], { name: "bonusRequests" })
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "any",
  })
  async findBonusRequests(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: BonusRequestFindManyArgs
  ): Promise<BonusRequest[]> {
    const results = await this.service.findBonusRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CheckInOut], { name: "checkInOuts" })
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "any",
  })
  async findCheckInOuts(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: CheckInOutFindManyArgs
  ): Promise<CheckInOut[]> {
    const results = await this.service.findCheckInOuts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DailyMovementRequest], {
    name: "dailyMovementRequests",
  })
  @nestAccessControl.UseRoles({
    resource: "DailyMovementRequest",
    action: "read",
    possession: "any",
  })
  async findDailyMovementRequests(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: DailyMovementRequestFindManyArgs
  ): Promise<DailyMovementRequest[]> {
    const results = await this.service.findDailyMovementRequests(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DayOffRequest], { name: "dayOffRequests" })
  @nestAccessControl.UseRoles({
    resource: "DayOffRequest",
    action: "read",
    possession: "any",
  })
  async findDayOffRequests(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: DayOffRequestFindManyArgs
  ): Promise<DayOffRequest[]> {
    const results = await this.service.findDayOffRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LeaveRequest], {
    name: "leavingPermissionRequests",
  })
  @nestAccessControl.UseRoles({
    resource: "LeaveRequest",
    action: "read",
    possession: "any",
  })
  async findLeavingPermissionRequests(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: LeaveRequestFindManyArgs
  ): Promise<LeaveRequest[]> {
    const results = await this.service.findLeavingPermissionRequests(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OverNightRequest], { name: "overNightRequests" })
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "any",
  })
  async findOverNightRequests(
    @graphql.Parent() parent: Employee,
    @graphql.Args() args: OverNightRequestFindManyArgs
  ): Promise<OverNightRequest[]> {
    const results = await this.service.findOverNightRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeDepartment, {
    nullable: true,
    name: "employeeDepartmentId",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async getEmployeeDepartmentId(
    @graphql.Parent() parent: Employee
  ): Promise<EmployeeDepartment | null> {
    const result = await this.service.getEmployeeDepartmentId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeGroup, {
    nullable: true,
    name: "employeeGroup",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "any",
  })
  async getEmployeeGroup(
    @graphql.Parent() parent: Employee
  ): Promise<EmployeeGroup | null> {
    const result = await this.service.getEmployeeGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeRole, {
    nullable: true,
    name: "employeeRoleId",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "any",
  })
  async getEmployeeRoleId(
    @graphql.Parent() parent: Employee
  ): Promise<EmployeeRole | null> {
    const result = await this.service.getEmployeeRoleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => JobTitle, {
    nullable: true,
    name: "jobTitle",
  })
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "any",
  })
  async getJobTitle(
    @graphql.Parent() parent: Employee
  ): Promise<JobTitle | null> {
    const result = await this.service.getJobTitle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: Employee
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
