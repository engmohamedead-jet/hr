/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SaleReturnService } from "../saleReturn.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SaleReturnCreateInput } from "./SaleReturnCreateInput";
import { SaleReturn } from "./SaleReturn";
import { SaleReturnFindManyArgs } from "./SaleReturnFindManyArgs";
import { SaleReturnWhereUniqueInput } from "./SaleReturnWhereUniqueInput";
import { SaleReturnUpdateInput } from "./SaleReturnUpdateInput";
import { SaleReturnDetailFindManyArgs } from "../../saleReturnDetail/base/SaleReturnDetailFindManyArgs";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { SaleReturnDetailWhereUniqueInput } from "../../saleReturnDetail/base/SaleReturnDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SaleReturnControllerBase {
  constructor(
    protected readonly service: SaleReturnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SaleReturn })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSaleReturn(
    @common.Body() data: SaleReturnCreateInput
  ): Promise<SaleReturn> {
    return await this.service.createSaleReturn({
      data: {
        ...data,

        cashRepositoryId: {
          connect: data.cashRepositoryId,
        },

        customerId: {
          connect: data.customerId,
        },

        invoiceTypeId: data.invoiceTypeId
          ? {
              connect: data.invoiceTypeId,
            }
          : undefined,

        paymentTypeId: {
          connect: data.paymentTypeId,
        },

        saleId: data.saleId
          ? {
              connect: data.saleId,
            }
          : undefined,

        salePriceTyped: {
          connect: data.salePriceTyped,
        },

        storeId: {
          connect: data.storeId,
        },

        tenant: data.tenant
          ? {
              connect: data.tenant,
            }
          : undefined,
      },
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        returnTotal: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTyped: {
          select: {
            id: true,
          },
        },

        saleReturnDate: true,
        sequence: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SaleReturn] })
  @ApiNestedQuery(SaleReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleReturns(@common.Req() request: Request): Promise<SaleReturn[]> {
    const args = plainToClass(SaleReturnFindManyArgs, request.query);
    return this.service.saleReturns({
      ...args,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        returnTotal: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTyped: {
          select: {
            id: true,
          },
        },

        saleReturnDate: true,
        sequence: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SaleReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async saleReturn(
    @common.Param() params: SaleReturnWhereUniqueInput
  ): Promise<SaleReturn | null> {
    const result = await this.service.saleReturn({
      where: params,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        returnTotal: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTyped: {
          select: {
            id: true,
          },
        },

        saleReturnDate: true,
        sequence: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SaleReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSaleReturn(
    @common.Param() params: SaleReturnWhereUniqueInput,
    @common.Body() data: SaleReturnUpdateInput
  ): Promise<SaleReturn | null> {
    try {
      return await this.service.updateSaleReturn({
        where: params,
        data: {
          ...data,

          cashRepositoryId: {
            connect: data.cashRepositoryId,
          },

          customerId: {
            connect: data.customerId,
          },

          invoiceTypeId: data.invoiceTypeId
            ? {
                connect: data.invoiceTypeId,
              }
            : undefined,

          paymentTypeId: {
            connect: data.paymentTypeId,
          },

          saleId: data.saleId
            ? {
                connect: data.saleId,
              }
            : undefined,

          salePriceTyped: {
            connect: data.salePriceTyped,
          },

          storeId: {
            connect: data.storeId,
          },

          tenant: data.tenant
            ? {
                connect: data.tenant,
              }
            : undefined,
        },
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          referenceNumber: true,
          remaining: true,
          returnTotal: true,

          saleId: {
            select: {
              id: true,
            },
          },

          salePriceTyped: {
            select: {
              id: true,
            },
          },

          saleReturnDate: true,
          sequence: true,

          storeId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SaleReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSaleReturn(
    @common.Param() params: SaleReturnWhereUniqueInput
  ): Promise<SaleReturn | null> {
    try {
      return await this.service.deleteSaleReturn({
        where: params,
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          referenceNumber: true,
          remaining: true,
          returnTotal: true,

          saleId: {
            select: {
              id: true,
            },
          },

          salePriceTyped: {
            select: {
              id: true,
            },
          },

          saleReturnDate: true,
          sequence: true,

          storeId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenant: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleReturnDetails")
  @ApiNestedQuery(SaleReturnDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleReturnDetail",
    action: "read",
    possession: "any",
  })
  async findSaleReturnDetails(
    @common.Req() request: Request,
    @common.Param() params: SaleReturnWhereUniqueInput
  ): Promise<SaleReturnDetail[]> {
    const query = plainToClass(SaleReturnDetailFindManyArgs, request.query);
    const results = await this.service.findSaleReturnDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        salePriceType: {
          select: {
            id: true,
          },
        },

        saleReturnId: {
          select: {
            id: true,
          },
        },

        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "update",
    possession: "any",
  })
  async connectSaleReturnDetails(
    @common.Param() params: SaleReturnWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        connect: body,
      },
    };
    await this.service.updateSaleReturn({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "update",
    possession: "any",
  })
  async updateSaleReturnDetails(
    @common.Param() params: SaleReturnWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        set: body,
      },
    };
    await this.service.updateSaleReturn({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "update",
    possession: "any",
  })
  async disconnectSaleReturnDetails(
    @common.Param() params: SaleReturnWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        disconnect: body,
      },
    };
    await this.service.updateSaleReturn({
      where: params,
      data,
      select: { id: true },
    });
  }
}
