/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Failure } from "./Failure";
import { FailureCountArgs } from "./FailureCountArgs";
import { FailureFindManyArgs } from "./FailureFindManyArgs";
import { FailureFindUniqueArgs } from "./FailureFindUniqueArgs";
import { CreateFailureArgs } from "./CreateFailureArgs";
import { UpdateFailureArgs } from "./UpdateFailureArgs";
import { DeleteFailureArgs } from "./DeleteFailureArgs";
import { FailureService } from "../failure.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Failure)
export class FailureResolverBase {
  constructor(
    protected readonly service: FailureService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "read",
    possession: "any",
  })
  async _failuresMeta(
    @graphql.Args() args: FailureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Failure])
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "read",
    possession: "any",
  })
  async failures(
    @graphql.Args() args: FailureFindManyArgs
  ): Promise<Failure[]> {
    return this.service.failures(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Failure, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "read",
    possession: "own",
  })
  async failure(
    @graphql.Args() args: FailureFindUniqueArgs
  ): Promise<Failure | null> {
    const result = await this.service.failure(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Failure)
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "create",
    possession: "any",
  })
  async createFailure(
    @graphql.Args() args: CreateFailureArgs
  ): Promise<Failure> {
    return await this.service.createFailure({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Failure)
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "update",
    possession: "any",
  })
  async updateFailure(
    @graphql.Args() args: UpdateFailureArgs
  ): Promise<Failure | null> {
    try {
      return await this.service.updateFailure({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Failure)
  @nestAccessControl.UseRoles({
    resource: "Failure",
    action: "delete",
    possession: "any",
  })
  async deleteFailure(
    @graphql.Args() args: DeleteFailureArgs
  ): Promise<Failure | null> {
    try {
      return await this.service.deleteFailure(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
