/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SettingGroup } from "./SettingGroup";
import { SettingGroupCountArgs } from "./SettingGroupCountArgs";
import { SettingGroupFindManyArgs } from "./SettingGroupFindManyArgs";
import { SettingGroupFindUniqueArgs } from "./SettingGroupFindUniqueArgs";
import { CreateSettingGroupArgs } from "./CreateSettingGroupArgs";
import { UpdateSettingGroupArgs } from "./UpdateSettingGroupArgs";
import { DeleteSettingGroupArgs } from "./DeleteSettingGroupArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { SettingGroupService } from "../settingGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SettingGroup)
export class SettingGroupResolverBase {
  constructor(
    protected readonly service: SettingGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "read",
    possession: "any",
  })
  async _settingGroupsMeta(
    @graphql.Args() args: SettingGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SettingGroup])
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "read",
    possession: "any",
  })
  async settingGroups(
    @graphql.Args() args: SettingGroupFindManyArgs
  ): Promise<SettingGroup[]> {
    return this.service.settingGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SettingGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "read",
    possession: "own",
  })
  async settingGroup(
    @graphql.Args() args: SettingGroupFindUniqueArgs
  ): Promise<SettingGroup | null> {
    const result = await this.service.settingGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SettingGroup)
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "create",
    possession: "any",
  })
  async createSettingGroup(
    @graphql.Args() args: CreateSettingGroupArgs
  ): Promise<SettingGroup> {
    return await this.service.createSettingGroup({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SettingGroup)
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "update",
    possession: "any",
  })
  async updateSettingGroup(
    @graphql.Args() args: UpdateSettingGroupArgs
  ): Promise<SettingGroup | null> {
    try {
      return await this.service.updateSettingGroup({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SettingGroup)
  @nestAccessControl.UseRoles({
    resource: "SettingGroup",
    action: "delete",
    possession: "any",
  })
  async deleteSettingGroup(
    @graphql.Args() args: DeleteSettingGroupArgs
  ): Promise<SettingGroup | null> {
    try {
      return await this.service.deleteSettingGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: SettingGroup
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
