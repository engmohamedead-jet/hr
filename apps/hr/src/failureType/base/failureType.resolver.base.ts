/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FailureType } from "./FailureType";
import { FailureTypeCountArgs } from "./FailureTypeCountArgs";
import { FailureTypeFindManyArgs } from "./FailureTypeFindManyArgs";
import { FailureTypeFindUniqueArgs } from "./FailureTypeFindUniqueArgs";
import { CreateFailureTypeArgs } from "./CreateFailureTypeArgs";
import { UpdateFailureTypeArgs } from "./UpdateFailureTypeArgs";
import { DeleteFailureTypeArgs } from "./DeleteFailureTypeArgs";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { FailureTypeService } from "../failureType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FailureType)
export class FailureTypeResolverBase {
  constructor(
    protected readonly service: FailureTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "any",
  })
  async _failureTypesMeta(
    @graphql.Args() args: FailureTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FailureType])
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "any",
  })
  async failureTypes(
    @graphql.Args() args: FailureTypeFindManyArgs
  ): Promise<FailureType[]> {
    return this.service.failureTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FailureType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "own",
  })
  async failureType(
    @graphql.Args() args: FailureTypeFindUniqueArgs
  ): Promise<FailureType | null> {
    const result = await this.service.failureType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailureType)
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "create",
    possession: "any",
  })
  async createFailureType(
    @graphql.Args() args: CreateFailureTypeArgs
  ): Promise<FailureType> {
    return await this.service.createFailureType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailureType)
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "update",
    possession: "any",
  })
  async updateFailureType(
    @graphql.Args() args: UpdateFailureTypeArgs
  ): Promise<FailureType | null> {
    try {
      return await this.service.updateFailureType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailureType)
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "delete",
    possession: "any",
  })
  async deleteFailureType(
    @graphql.Args() args: DeleteFailureTypeArgs
  ): Promise<FailureType | null> {
    try {
      return await this.service.deleteFailureType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FailureReporting], { name: "failureReportings" })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @graphql.Parent() parent: FailureType,
    @graphql.Args() args: FailureReportingFindManyArgs
  ): Promise<FailureReporting[]> {
    const results = await this.service.findFailureReportings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
