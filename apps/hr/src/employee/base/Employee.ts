/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Min,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
  IsBoolean,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { EmployeeClass } from "../../employeeClass/base/EmployeeClass";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { PaymentVoucher } from "../../paymentVoucher/base/PaymentVoucher";
import { ReceiptVoucher } from "../../receiptVoucher/base/ReceiptVoucher";
import { SalePerson } from "../../salePerson/base/SalePerson";
import { Tenant } from "../../tenant/base/Tenant";

@ObjectType()
class Employee {
  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  balance!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => EmployeeClass,
  })
  @ValidateNested()
  @Type(() => EmployeeClass)
  @IsOptional()
  employeeClassId?: EmployeeClass | null;

  @ApiProperty({
    required: false,
    type: () => EmployeeDepartment,
  })
  @ValidateNested()
  @Type(() => EmployeeDepartment)
  @IsOptional()
  employeeDepartmentId?: EmployeeDepartment | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  lastYearBalance!: Decimal | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: () => [PaymentVoucher],
  })
  @ValidateNested()
  @Type(() => PaymentVoucher)
  @IsOptional()
  paymentVouchers?: Array<PaymentVoucher>;

  @ApiProperty({
    required: false,
    type: () => [ReceiptVoucher],
  })
  @ValidateNested()
  @Type(() => ReceiptVoucher)
  @IsOptional()
  receiptVouchers?: Array<ReceiptVoucher>;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  remainingBalance!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => [SalePerson],
  })
  @ValidateNested()
  @Type(() => SalePerson)
  @IsOptional()
  salePeople?: Array<SalePerson>;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantId?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-99999999999)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  usedBalance!: Decimal | null;
}

export { Employee as Employee };
