/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";

import {
  ValidateNested,
  IsDate,
  IsNumber,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  IsInt,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { Store } from "../../store/base/Store";
import { TransactionType } from "../../transactionType/base/TransactionType";

@ObjectType()
class AccountTransactionDetail {
  @ApiProperty({
    required: true,
    type: () => AccountTransaction,
  })
  @ValidateNested()
  @Type(() => AccountTransaction)
  accountTransactionId?: AccountTransaction;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  credit!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  debit!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  exchangeRate!: Decimal | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  referenceNumber!: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  serial!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  statementReference!: string | null;

  @ApiProperty({
    required: true,
    type: () => Store,
  })
  @ValidateNested()
  @Type(() => Store)
  storeId?: Store;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  transactionDate!: Date | null;

  @ApiProperty({
    required: true,
    type: () => TransactionType,
  })
  @ValidateNested()
  @Type(() => TransactionType)
  transactionTypeId?: TransactionType;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { AccountTransactionDetail as AccountTransactionDetail };
