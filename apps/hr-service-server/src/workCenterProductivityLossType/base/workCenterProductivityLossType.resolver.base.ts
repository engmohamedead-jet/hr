/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkCenterProductivityLossType } from "./WorkCenterProductivityLossType";
import { WorkCenterProductivityLossTypeCountArgs } from "./WorkCenterProductivityLossTypeCountArgs";
import { WorkCenterProductivityLossTypeFindManyArgs } from "./WorkCenterProductivityLossTypeFindManyArgs";
import { WorkCenterProductivityLossTypeFindUniqueArgs } from "./WorkCenterProductivityLossTypeFindUniqueArgs";
import { CreateWorkCenterProductivityLossTypeArgs } from "./CreateWorkCenterProductivityLossTypeArgs";
import { UpdateWorkCenterProductivityLossTypeArgs } from "./UpdateWorkCenterProductivityLossTypeArgs";
import { DeleteWorkCenterProductivityLossTypeArgs } from "./DeleteWorkCenterProductivityLossTypeArgs";
import { WorkCenterProductivityLossFindManyArgs } from "../../workCenterProductivityLoss/base/WorkCenterProductivityLossFindManyArgs";
import { WorkCenterProductivityLoss } from "../../workCenterProductivityLoss/base/WorkCenterProductivityLoss";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkCenterProductivityLossTypeService } from "../workCenterProductivityLossType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkCenterProductivityLossType)
export class WorkCenterProductivityLossTypeResolverBase {
  constructor(
    protected readonly service: WorkCenterProductivityLossTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "read",
    possession: "any",
  })
  async _workCenterProductivityLossTypesMeta(
    @graphql.Args() args: WorkCenterProductivityLossTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkCenterProductivityLossType])
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "read",
    possession: "any",
  })
  async workCenterProductivityLossTypes(
    @graphql.Args() args: WorkCenterProductivityLossTypeFindManyArgs
  ): Promise<WorkCenterProductivityLossType[]> {
    return this.service.workCenterProductivityLossTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkCenterProductivityLossType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "read",
    possession: "own",
  })
  async workCenterProductivityLossType(
    @graphql.Args() args: WorkCenterProductivityLossTypeFindUniqueArgs
  ): Promise<WorkCenterProductivityLossType | null> {
    const result = await this.service.workCenterProductivityLossType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterProductivityLossType)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "create",
    possession: "any",
  })
  async createWorkCenterProductivityLossType(
    @graphql.Args() args: CreateWorkCenterProductivityLossTypeArgs
  ): Promise<WorkCenterProductivityLossType> {
    return await this.service.createWorkCenterProductivityLossType({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterProductivityLossType)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "update",
    possession: "any",
  })
  async updateWorkCenterProductivityLossType(
    @graphql.Args() args: UpdateWorkCenterProductivityLossTypeArgs
  ): Promise<WorkCenterProductivityLossType | null> {
    try {
      return await this.service.updateWorkCenterProductivityLossType({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkCenterProductivityLossType)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "delete",
    possession: "any",
  })
  async deleteWorkCenterProductivityLossType(
    @graphql.Args() args: DeleteWorkCenterProductivityLossTypeArgs
  ): Promise<WorkCenterProductivityLossType | null> {
    try {
      return await this.service.deleteWorkCenterProductivityLossType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterProductivityLoss], {
    name: "workCenterProductivityLosses",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLoss",
    action: "read",
    possession: "any",
  })
  async findWorkCenterProductivityLosses(
    @graphql.Parent() parent: WorkCenterProductivityLossType,
    @graphql.Args() args: WorkCenterProductivityLossFindManyArgs
  ): Promise<WorkCenterProductivityLoss[]> {
    const results = await this.service.findWorkCenterProductivityLosses(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkCenterProductivityLossType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
