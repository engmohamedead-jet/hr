/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { TimeMode } from "./TimeMode";
import { TimeModeCountArgs } from "./TimeModeCountArgs";
import { TimeModeFindManyArgs } from "./TimeModeFindManyArgs";
import { TimeModeFindUniqueArgs } from "./TimeModeFindUniqueArgs";
import { CreateTimeModeArgs } from "./CreateTimeModeArgs";
import { UpdateTimeModeArgs } from "./UpdateTimeModeArgs";
import { DeleteTimeModeArgs } from "./DeleteTimeModeArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { TimeModeService } from "../timeMode.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => TimeMode)
export class TimeModeResolverBase {
  constructor(
    protected readonly service: TimeModeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "read",
    possession: "any",
  })
  async _timeModesMeta(
    @graphql.Args() args: TimeModeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TimeMode])
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "read",
    possession: "any",
  })
  async timeModes(
    @graphql.Args() args: TimeModeFindManyArgs
  ): Promise<TimeMode[]> {
    return this.service.timeModes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TimeMode, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "read",
    possession: "own",
  })
  async timeMode(
    @graphql.Args() args: TimeModeFindUniqueArgs
  ): Promise<TimeMode | null> {
    const result = await this.service.timeMode(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeMode)
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "create",
    possession: "any",
  })
  async createTimeMode(
    @graphql.Args() args: CreateTimeModeArgs
  ): Promise<TimeMode> {
    return await this.service.createTimeMode({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TimeMode)
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "update",
    possession: "any",
  })
  async updateTimeMode(
    @graphql.Args() args: UpdateTimeModeArgs
  ): Promise<TimeMode | null> {
    try {
      return await this.service.updateTimeMode({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TimeMode)
  @nestAccessControl.UseRoles({
    resource: "TimeMode",
    action: "delete",
    possession: "any",
  })
  async deleteTimeMode(
    @graphql.Args() args: DeleteTimeModeArgs
  ): Promise<TimeMode | null> {
    try {
      return await this.service.deleteTimeMode(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: TimeMode
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
