/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CompoundUnit as PrismaCompoundUnit,
  Unit as PrismaUnit,
} from "@prisma/client";

export class CompoundUnitServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompoundUnitCountArgs, "select">
  ): Promise<number> {
    return this.prisma.compoundUnit.count(args);
  }

  async compoundUnits(
    args: Prisma.CompoundUnitFindManyArgs
  ): Promise<PrismaCompoundUnit[]> {
    return this.prisma.compoundUnit.findMany(args);
  }
  async compoundUnit(
    args: Prisma.CompoundUnitFindUniqueArgs
  ): Promise<PrismaCompoundUnit | null> {
    return this.prisma.compoundUnit.findUnique(args);
  }
  async createCompoundUnit(
    args: Prisma.CompoundUnitCreateArgs
  ): Promise<PrismaCompoundUnit> {
    return this.prisma.compoundUnit.create(args);
  }
  async updateCompoundUnit(
    args: Prisma.CompoundUnitUpdateArgs
  ): Promise<PrismaCompoundUnit> {
    return this.prisma.compoundUnit.update(args);
  }
  async deleteCompoundUnit(
    args: Prisma.CompoundUnitDeleteArgs
  ): Promise<PrismaCompoundUnit> {
    return this.prisma.compoundUnit.delete(args);
  }

  async getBaseUnitId(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.compoundUnit
      .findUnique({
        where: { id: parentId },
      })
      .baseUnitId();
  }

  async getCompareUnitId(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.compoundUnit
      .findUnique({
        where: { id: parentId },
      })
      .compareUnitId();
  }
}
