/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ApplicationDependencyService } from "../applicationDependency.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ApplicationDependencyCreateInput } from "./ApplicationDependencyCreateInput";
import { ApplicationDependency } from "./ApplicationDependency";
import { ApplicationDependencyFindManyArgs } from "./ApplicationDependencyFindManyArgs";
import { ApplicationDependencyWhereUniqueInput } from "./ApplicationDependencyWhereUniqueInput";
import { ApplicationDependencyUpdateInput } from "./ApplicationDependencyUpdateInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ApplicationDependencyControllerBase {
  constructor(
    protected readonly service: ApplicationDependencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ApplicationDependency })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createApplicationDependency(
    @common.Body() data: ApplicationDependencyCreateInput
  ): Promise<ApplicationDependency> {
    return await this.service.createApplicationDependency({
      data: {
        ...data,

        applicationId: data.applicationId
          ? {
              connect: data.applicationId,
            }
          : undefined,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        applicationId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ApplicationDependency] })
  @ApiNestedQuery(ApplicationDependencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async applicationDependencies(
    @common.Req() request: Request
  ): Promise<ApplicationDependency[]> {
    const args = plainToClass(ApplicationDependencyFindManyArgs, request.query);
    return this.service.applicationDependencies({
      ...args,
      select: {
        applicationId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDependency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async applicationDependency(
    @common.Param() params: ApplicationDependencyWhereUniqueInput
  ): Promise<ApplicationDependency | null> {
    const result = await this.service.applicationDependency({
      where: params,
      select: {
        applicationId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDependency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateApplicationDependency(
    @common.Param() params: ApplicationDependencyWhereUniqueInput,
    @common.Body() data: ApplicationDependencyUpdateInput
  ): Promise<ApplicationDependency | null> {
    try {
      return await this.service.updateApplicationDependency({
        where: params,
        data: {
          ...data,

          applicationId: data.applicationId
            ? {
                connect: data.applicationId,
              }
            : undefined,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          applicationId: {
            select: {
              id: true,
            },
          },

          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ApplicationDependency })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteApplicationDependency(
    @common.Param() params: ApplicationDependencyWhereUniqueInput
  ): Promise<ApplicationDependency | null> {
    try {
      return await this.service.deleteApplicationDependency({
        where: params,
        select: {
          applicationId: {
            select: {
              id: true,
            },
          },

          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dependsOnApplicationId")
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findDependsOnApplicationId(
    @common.Req() request: Request,
    @common.Param() params: ApplicationDependencyWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findDependsOnApplicationId(params.id, {
      ...query,
      select: {
        DependsOnApplicationDependency: {
          select: {
            id: true,
          },
        },

        applicationDependency: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        i18nKey: true,
        icon: true,
        id: true,
        isActive: true,
        landingUrl: true,
        name: true,
        normalizedName: true,
        note: true,
        publishedDateTime: true,
        publisher: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        versionNumber: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dependsOnApplicationId")
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "update",
    possession: "any",
  })
  async connectDependsOnApplicationId(
    @common.Param() params: ApplicationDependencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependsOnApplicationId: {
        connect: body,
      },
    };
    await this.service.updateApplicationDependency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dependsOnApplicationId")
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "update",
    possession: "any",
  })
  async updateDependsOnApplicationId(
    @common.Param() params: ApplicationDependencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependsOnApplicationId: {
        set: body,
      },
    };
    await this.service.updateApplicationDependency({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dependsOnApplicationId")
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "update",
    possession: "any",
  })
  async disconnectDependsOnApplicationId(
    @common.Param() params: ApplicationDependencyWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dependsOnApplicationId: {
        disconnect: body,
      },
    };
    await this.service.updateApplicationDependency({
      where: params,
      data,
      select: { id: true },
    });
  }
}
