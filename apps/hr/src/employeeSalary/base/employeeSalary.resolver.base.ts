/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeSalary } from "./EmployeeSalary";
import { EmployeeSalaryCountArgs } from "./EmployeeSalaryCountArgs";
import { EmployeeSalaryFindManyArgs } from "./EmployeeSalaryFindManyArgs";
import { EmployeeSalaryFindUniqueArgs } from "./EmployeeSalaryFindUniqueArgs";
import { CreateEmployeeSalaryArgs } from "./CreateEmployeeSalaryArgs";
import { UpdateEmployeeSalaryArgs } from "./UpdateEmployeeSalaryArgs";
import { DeleteEmployeeSalaryArgs } from "./DeleteEmployeeSalaryArgs";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { EmployeeSalaryService } from "../employeeSalary.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeSalary)
export class EmployeeSalaryResolverBase {
  constructor(
    protected readonly service: EmployeeSalaryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "read",
    possession: "any",
  })
  async _employeeSalariesMeta(
    @graphql.Args() args: EmployeeSalaryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeSalary])
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "read",
    possession: "any",
  })
  async employeeSalaries(
    @graphql.Args() args: EmployeeSalaryFindManyArgs
  ): Promise<EmployeeSalary[]> {
    return this.service.employeeSalaries(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeSalary, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "read",
    possession: "own",
  })
  async employeeSalary(
    @graphql.Args() args: EmployeeSalaryFindUniqueArgs
  ): Promise<EmployeeSalary | null> {
    const result = await this.service.employeeSalary(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeSalary)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "create",
    possession: "any",
  })
  async createEmployeeSalary(
    @graphql.Args() args: CreateEmployeeSalaryArgs
  ): Promise<EmployeeSalary> {
    return await this.service.createEmployeeSalary({
      ...args,
      data: {
        ...args.data,

        fiscalMonthId: {
          connect: args.data.fiscalMonthId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeSalary)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "update",
    possession: "any",
  })
  async updateEmployeeSalary(
    @graphql.Args() args: UpdateEmployeeSalaryArgs
  ): Promise<EmployeeSalary | null> {
    try {
      return await this.service.updateEmployeeSalary({
        ...args,
        data: {
          ...args.data,

          fiscalMonthId: {
            connect: args.data.fiscalMonthId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeSalary)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeSalary(
    @graphql.Args() args: DeleteEmployeeSalaryArgs
  ): Promise<EmployeeSalary | null> {
    try {
      return await this.service.deleteEmployeeSalary(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FiscalMonth, {
    nullable: true,
    name: "fiscalMonthId",
  })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async getFiscalMonthId(
    @graphql.Parent() parent: EmployeeSalary
  ): Promise<FiscalMonth | null> {
    const result = await this.service.getFiscalMonthId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
