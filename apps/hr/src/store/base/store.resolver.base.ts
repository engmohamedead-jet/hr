/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Store } from "./Store";
import { StoreCountArgs } from "./StoreCountArgs";
import { StoreFindManyArgs } from "./StoreFindManyArgs";
import { StoreFindUniqueArgs } from "./StoreFindUniqueArgs";
import { CreateStoreArgs } from "./CreateStoreArgs";
import { UpdateStoreArgs } from "./UpdateStoreArgs";
import { DeleteStoreArgs } from "./DeleteStoreArgs";
import { AccountTransactionDetailFindManyArgs } from "../../accountTransactionDetail/base/AccountTransactionDetailFindManyArgs";
import { AccountTransactionDetail } from "../../accountTransactionDetail/base/AccountTransactionDetail";
import { AccountTransactionFindManyArgs } from "../../accountTransaction/base/AccountTransactionFindManyArgs";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";
import { CustomerElevatorFindManyArgs } from "../../customerElevator/base/CustomerElevatorFindManyArgs";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { ElevatorFindManyArgs } from "../../elevator/base/ElevatorFindManyArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceVisitFindManyArgs } from "../../maintenanceVisit/base/MaintenanceVisitFindManyArgs";
import { MaintenanceVisit } from "../../maintenanceVisit/base/MaintenanceVisit";
import { NotificationFindManyArgs } from "../../notification/base/NotificationFindManyArgs";
import { Notification } from "../../notification/base/Notification";
import { PeriodicMaintenanceOrderFindManyArgs } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderFindManyArgs";
import { PeriodicMaintenanceOrder } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrder";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { SaleTaxFindManyArgs } from "../../saleTax/base/SaleTaxFindManyArgs";
import { SaleTax } from "../../saleTax/base/SaleTax";
import { Office } from "../../office/base/Office";
import { StoreType } from "../../storeType/base/StoreType";
import { StoreService } from "../store.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Store)
export class StoreResolverBase {
  constructor(
    protected readonly service: StoreService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async _storesMeta(
    @graphql.Args() args: StoreCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Store])
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async stores(@graphql.Args() args: StoreFindManyArgs): Promise<Store[]> {
    return this.service.stores(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Store, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "own",
  })
  async store(
    @graphql.Args() args: StoreFindUniqueArgs
  ): Promise<Store | null> {
    const result = await this.service.store(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Store)
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "create",
    possession: "any",
  })
  async createStore(@graphql.Args() args: CreateStoreArgs): Promise<Store> {
    return await this.service.createStore({
      ...args,
      data: {
        ...args.data,

        office: {
          connect: args.data.office,
        },

        storeType: {
          connect: args.data.storeType,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Store)
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "update",
    possession: "any",
  })
  async updateStore(
    @graphql.Args() args: UpdateStoreArgs
  ): Promise<Store | null> {
    try {
      return await this.service.updateStore({
        ...args,
        data: {
          ...args.data,

          office: {
            connect: args.data.office,
          },

          storeType: {
            connect: args.data.storeType,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Store)
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "delete",
    possession: "any",
  })
  async deleteStore(
    @graphql.Args() args: DeleteStoreArgs
  ): Promise<Store | null> {
    try {
      return await this.service.deleteStore(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountTransactionDetail], {
    name: "accountTransactionDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "any",
  })
  async findAccountTransactionDetails(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: AccountTransactionDetailFindManyArgs
  ): Promise<AccountTransactionDetail[]> {
    const results = await this.service.findAccountTransactionDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountTransaction], {
    name: "accountTransactions",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async findAccountTransactions(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: AccountTransactionFindManyArgs
  ): Promise<AccountTransaction[]> {
    const results = await this.service.findAccountTransactions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CustomerElevator], { name: "customerElevators" })
  @nestAccessControl.UseRoles({
    resource: "CustomerElevator",
    action: "read",
    possession: "any",
  })
  async findCustomerElevators(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: CustomerElevatorFindManyArgs
  ): Promise<CustomerElevator[]> {
    const results = await this.service.findCustomerElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Elevator], { name: "elevators" })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async findElevators(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: ElevatorFindManyArgs
  ): Promise<Elevator[]> {
    const results = await this.service.findElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FailureReporting], { name: "failureReportings" })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: FailureReportingFindManyArgs
  ): Promise<FailureReporting[]> {
    const results = await this.service.findFailureReportings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceContract], {
    name: "maintenanceContracts",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: MaintenanceContractFindManyArgs
  ): Promise<MaintenanceContract[]> {
    const results = await this.service.findMaintenanceContracts(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceVisit], { name: "maintenanceVisits" })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "any",
  })
  async findMaintenanceVisits(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: MaintenanceVisitFindManyArgs
  ): Promise<MaintenanceVisit[]> {
    const results = await this.service.findMaintenanceVisits(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Notification], { name: "notifications" })
  @nestAccessControl.UseRoles({
    resource: "Notification",
    action: "read",
    possession: "any",
  })
  async findNotifications(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: NotificationFindManyArgs
  ): Promise<Notification[]> {
    const results = await this.service.findNotifications(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PeriodicMaintenanceOrder], {
    name: "periodicMaintenanceOrders",
  })
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async findPeriodicMaintenanceOrders(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: PeriodicMaintenanceOrderFindManyArgs
  ): Promise<PeriodicMaintenanceOrder[]> {
    const results = await this.service.findPeriodicMaintenanceOrders(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleTax], { name: "saleTaxes" })
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "any",
  })
  async findSaleTaxes(
    @graphql.Parent() parent: Store,
    @graphql.Args() args: SaleTaxFindManyArgs
  ): Promise<SaleTax[]> {
    const results = await this.service.findSaleTaxes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Office, {
    nullable: true,
    name: "office",
  })
  @nestAccessControl.UseRoles({
    resource: "Office",
    action: "read",
    possession: "any",
  })
  async getOffice(@graphql.Parent() parent: Store): Promise<Office | null> {
    const result = await this.service.getOffice(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => StoreType, {
    nullable: true,
    name: "storeType",
  })
  @nestAccessControl.UseRoles({
    resource: "StoreType",
    action: "read",
    possession: "any",
  })
  async getStoreType(
    @graphql.Parent() parent: Store
  ): Promise<StoreType | null> {
    const result = await this.service.getStoreType(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
