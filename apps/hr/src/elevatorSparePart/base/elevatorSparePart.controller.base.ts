/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ElevatorSparePartService } from "../elevatorSparePart.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ElevatorSparePartCreateInput } from "./ElevatorSparePartCreateInput";
import { ElevatorSparePart } from "./ElevatorSparePart";
import { ElevatorSparePartFindManyArgs } from "./ElevatorSparePartFindManyArgs";
import { ElevatorSparePartWhereUniqueInput } from "./ElevatorSparePartWhereUniqueInput";
import { ElevatorSparePartUpdateInput } from "./ElevatorSparePartUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ElevatorSparePartControllerBase {
  constructor(
    protected readonly service: ElevatorSparePartService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ElevatorSparePart })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createElevatorSparePart(
    @common.Body() data: ElevatorSparePartCreateInput
  ): Promise<ElevatorSparePart> {
    return await this.service.createElevatorSparePart({
      data: {
        ...data,

        elevator: data.elevator
          ? {
              connect: data.elevator,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        elevator: {
          select: {
            id: true,
          },
        },

        id: true,
        price: true,
        updatedAt: true,
        wholeSalePrice: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ElevatorSparePart] })
  @ApiNestedQuery(ElevatorSparePartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async elevatorSpareParts(
    @common.Req() request: Request
  ): Promise<ElevatorSparePart[]> {
    const args = plainToClass(ElevatorSparePartFindManyArgs, request.query);
    return this.service.elevatorSpareParts({
      ...args,
      select: {
        createdAt: true,

        elevator: {
          select: {
            id: true,
          },
        },

        id: true,
        price: true,
        updatedAt: true,
        wholeSalePrice: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ElevatorSparePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async elevatorSparePart(
    @common.Param() params: ElevatorSparePartWhereUniqueInput
  ): Promise<ElevatorSparePart | null> {
    const result = await this.service.elevatorSparePart({
      where: params,
      select: {
        createdAt: true,

        elevator: {
          select: {
            id: true,
          },
        },

        id: true,
        price: true,
        updatedAt: true,
        wholeSalePrice: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ElevatorSparePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateElevatorSparePart(
    @common.Param() params: ElevatorSparePartWhereUniqueInput,
    @common.Body() data: ElevatorSparePartUpdateInput
  ): Promise<ElevatorSparePart | null> {
    try {
      return await this.service.updateElevatorSparePart({
        where: params,
        data: {
          ...data,

          elevator: data.elevator
            ? {
                connect: data.elevator,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          elevator: {
            select: {
              id: true,
            },
          },

          id: true,
          price: true,
          updatedAt: true,
          wholeSalePrice: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ElevatorSparePart })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteElevatorSparePart(
    @common.Param() params: ElevatorSparePartWhereUniqueInput
  ): Promise<ElevatorSparePart | null> {
    try {
      return await this.service.deleteElevatorSparePart({
        where: params,
        select: {
          createdAt: true,

          elevator: {
            select: {
              id: true,
            },
          },

          id: true,
          price: true,
          updatedAt: true,
          wholeSalePrice: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
