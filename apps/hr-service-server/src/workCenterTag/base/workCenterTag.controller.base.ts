/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WorkCenterTagService } from "../workCenterTag.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WorkCenterTagCreateInput } from "./WorkCenterTagCreateInput";
import { WorkCenterTag } from "./WorkCenterTag";
import { WorkCenterTagFindManyArgs } from "./WorkCenterTagFindManyArgs";
import { WorkCenterTagWhereUniqueInput } from "./WorkCenterTagWhereUniqueInput";
import { WorkCenterTagUpdateInput } from "./WorkCenterTagUpdateInput";
import { WorkCenterWorkCenterTagFindManyArgs } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTagFindManyArgs";
import { WorkCenterWorkCenterTag } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTag";
import { WorkCenterWorkCenterTagWhereUniqueInput } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTagWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WorkCenterTagControllerBase {
  constructor(
    protected readonly service: WorkCenterTagService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkCenterTag })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWorkCenterTag(
    @common.Body() data: WorkCenterTagCreateInput
  ): Promise<WorkCenterTag> {
    return await this.service.createWorkCenterTag({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        Desciption: true,
        code: true,
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkCenterTag] })
  @ApiNestedQuery(WorkCenterTagFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workCenterTags(
    @common.Req() request: Request
  ): Promise<WorkCenterTag[]> {
    const args = plainToClass(WorkCenterTagFindManyArgs, request.query);
    return this.service.workCenterTags({
      ...args,
      select: {
        Desciption: true,
        code: true,
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkCenterTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workCenterTag(
    @common.Param() params: WorkCenterTagWhereUniqueInput
  ): Promise<WorkCenterTag | null> {
    const result = await this.service.workCenterTag({
      where: params,
      select: {
        Desciption: true,
        code: true,
        color: true,
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkCenterTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWorkCenterTag(
    @common.Param() params: WorkCenterTagWhereUniqueInput,
    @common.Body() data: WorkCenterTagUpdateInput
  ): Promise<WorkCenterTag | null> {
    try {
      return await this.service.updateWorkCenterTag({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          Desciption: true,
          code: true,
          color: true,
          createdAt: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkCenterTag })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWorkCenterTag(
    @common.Param() params: WorkCenterTagWhereUniqueInput
  ): Promise<WorkCenterTag | null> {
    try {
      return await this.service.deleteWorkCenterTag({
        where: params,
        select: {
          Desciption: true,
          code: true,
          color: true,
          createdAt: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workCenterWorkCenterTags")
  @ApiNestedQuery(WorkCenterWorkCenterTagFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterWorkCenterTag",
    action: "read",
    possession: "any",
  })
  async findWorkCenterWorkCenterTags(
    @common.Req() request: Request,
    @common.Param() params: WorkCenterTagWhereUniqueInput
  ): Promise<WorkCenterWorkCenterTag[]> {
    const query = plainToClass(
      WorkCenterWorkCenterTagFindManyArgs,
      request.query
    );
    const results = await this.service.findWorkCenterWorkCenterTags(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        workCenter: {
          select: {
            id: true,
          },
        },

        workCenterTagId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workCenterWorkCenterTags")
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "update",
    possession: "any",
  })
  async connectWorkCenterWorkCenterTags(
    @common.Param() params: WorkCenterTagWhereUniqueInput,
    @common.Body() body: WorkCenterWorkCenterTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterWorkCenterTags: {
        connect: body,
      },
    };
    await this.service.updateWorkCenterTag({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workCenterWorkCenterTags")
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "update",
    possession: "any",
  })
  async updateWorkCenterWorkCenterTags(
    @common.Param() params: WorkCenterTagWhereUniqueInput,
    @common.Body() body: WorkCenterWorkCenterTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterWorkCenterTags: {
        set: body,
      },
    };
    await this.service.updateWorkCenterTag({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workCenterWorkCenterTags")
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "update",
    possession: "any",
  })
  async disconnectWorkCenterWorkCenterTags(
    @common.Param() params: WorkCenterTagWhereUniqueInput,
    @common.Body() body: WorkCenterWorkCenterTagWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterWorkCenterTags: {
        disconnect: body,
      },
    };
    await this.service.updateWorkCenterTag({
      where: params,
      data,
      select: { id: true },
    });
  }
}
