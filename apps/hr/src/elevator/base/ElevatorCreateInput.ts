/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsNumber,
  Max,
  IsInt,
  Min,
} from "class-validator";
import { ControlTypeWhereUniqueInput } from "../../controlType/base/ControlTypeWhereUniqueInput";
import { Type } from "class-transformer";
import { CustomerElevatorCreateNestedManyWithoutElevatorsInput } from "./CustomerElevatorCreateNestedManyWithoutElevatorsInput";
import { CustomerUserCreateNestedManyWithoutElevatorsInput } from "./CustomerUserCreateNestedManyWithoutElevatorsInput";
import { Decimal } from "decimal.js";
import { DoorTypeWhereUniqueInput } from "../../doorType/base/DoorTypeWhereUniqueInput";
import { ElevatorSparePartCreateNestedManyWithoutElevatorsInput } from "./ElevatorSparePartCreateNestedManyWithoutElevatorsInput";
import { ElevatorTypeWhereUniqueInput } from "../../elevatorType/base/ElevatorTypeWhereUniqueInput";
import { FailureReportingCreateNestedManyWithoutElevatorsInput } from "./FailureReportingCreateNestedManyWithoutElevatorsInput";
import { InstallationContractCreateNestedManyWithoutElevatorsInput } from "./InstallationContractCreateNestedManyWithoutElevatorsInput";
import { MaintenanceContractCreateNestedManyWithoutElevatorsInput } from "./MaintenanceContractCreateNestedManyWithoutElevatorsInput";
import { MaintenanceVisitCreateNestedManyWithoutElevatorsInput } from "./MaintenanceVisitCreateNestedManyWithoutElevatorsInput";
import { MotorTypeWhereUniqueInput } from "../../motorType/base/MotorTypeWhereUniqueInput";
import { PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput } from "./PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";

@InputType()
class ElevatorCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bannerSize?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cabinetSize?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: () => ControlTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ControlTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => ControlTypeWhereUniqueInput, {
    nullable: true,
  })
  controlTypeId?: ControlTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CustomerElevatorCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => CustomerElevatorCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => CustomerElevatorCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  customerElevators?: CustomerElevatorCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerUserCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => CustomerUserCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => CustomerUserCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  customerUsers?: CustomerUserCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  doorSize?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DoorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DoorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => DoorTypeWhereUniqueInput, {
    nullable: true,
  })
  doorTypeId?: DoorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ElevatorSparePartCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => ElevatorSparePartCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => ElevatorSparePartCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  elevatorSpareParts?: ElevatorSparePartCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => ElevatorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ElevatorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => ElevatorTypeWhereUniqueInput, {
    nullable: true,
  })
  elevatorTypeId?: ElevatorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => FailureReportingCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => FailureReportingCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => FailureReportingCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  failureReportings?: FailureReportingCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  freight?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => InstallationContractCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => InstallationContractCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => InstallationContractCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  installationContracts?: InstallationContractCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => MaintenanceContractCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceContractCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => MaintenanceContractCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  maintenanceContracts?: MaintenanceContractCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => MaintenanceVisitCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceVisitCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => MaintenanceVisitCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  maintenanceVisits?: MaintenanceVisitCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  motorPower?: string | null;

  @ApiProperty({
    required: false,
    type: () => MotorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MotorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => MotorTypeWhereUniqueInput, {
    nullable: true,
  })
  motorTypeId?: MotorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: () => PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput, {
    nullable: true,
  })
  periodicMaintenanceOrders?: PeriodicMaintenanceOrderCreateNestedManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  personsCount?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  stationsCount?: number | null;

  @ApiProperty({
    required: true,
    type: () => StoreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreWhereUniqueInput)
  @Field(() => StoreWhereUniqueInput)
  storeId!: StoreWhereUniqueInput;
}

export { ElevatorCreateInput as ElevatorCreateInput };
