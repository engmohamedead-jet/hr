/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkOrderRouting as PrismaWorkOrderRouting,
  Tenant as PrismaTenant,
  WorkOrder as PrismaWorkOrder,
} from "@prisma/client";

export class WorkOrderRoutingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkOrderRoutingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workOrderRouting.count(args);
  }

  async workOrderRoutings(
    args: Prisma.WorkOrderRoutingFindManyArgs
  ): Promise<PrismaWorkOrderRouting[]> {
    return this.prisma.workOrderRouting.findMany(args);
  }
  async workOrderRouting(
    args: Prisma.WorkOrderRoutingFindUniqueArgs
  ): Promise<PrismaWorkOrderRouting | null> {
    return this.prisma.workOrderRouting.findUnique(args);
  }
  async createWorkOrderRouting(
    args: Prisma.WorkOrderRoutingCreateArgs
  ): Promise<PrismaWorkOrderRouting> {
    return this.prisma.workOrderRouting.create(args);
  }
  async updateWorkOrderRouting(
    args: Prisma.WorkOrderRoutingUpdateArgs
  ): Promise<PrismaWorkOrderRouting> {
    return this.prisma.workOrderRouting.update(args);
  }
  async deleteWorkOrderRouting(
    args: Prisma.WorkOrderRoutingDeleteArgs
  ): Promise<PrismaWorkOrderRouting> {
    return this.prisma.workOrderRouting.delete(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.workOrderRouting
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getWorkOrderId(parentId: string): Promise<PrismaWorkOrder | null> {
    return this.prisma.workOrderRouting
      .findUnique({
        where: { id: parentId },
      })
      .workOrderId();
  }
}
