/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SalePayment } from "./SalePayment";
import { SalePaymentCountArgs } from "./SalePaymentCountArgs";
import { SalePaymentFindManyArgs } from "./SalePaymentFindManyArgs";
import { SalePaymentFindUniqueArgs } from "./SalePaymentFindUniqueArgs";
import { CreateSalePaymentArgs } from "./CreateSalePaymentArgs";
import { UpdateSalePaymentArgs } from "./UpdateSalePaymentArgs";
import { DeleteSalePaymentArgs } from "./DeleteSalePaymentArgs";
import { Bank } from "../../bank/base/Bank";
import { BankBranch } from "../../bankBranch/base/BankBranch";
import { Currency } from "../../currency/base/Currency";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { Sale } from "../../sale/base/Sale";
import { Tenant } from "../../tenant/base/Tenant";
import { SalePaymentService } from "../salePayment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SalePayment)
export class SalePaymentResolverBase {
  constructor(
    protected readonly service: SalePaymentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async _salePaymentsMeta(
    @graphql.Args() args: SalePaymentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SalePayment])
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async salePayments(
    @graphql.Args() args: SalePaymentFindManyArgs
  ): Promise<SalePayment[]> {
    return this.service.salePayments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SalePayment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "own",
  })
  async salePayment(
    @graphql.Args() args: SalePaymentFindUniqueArgs
  ): Promise<SalePayment | null> {
    const result = await this.service.salePayment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalePayment)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "create",
    possession: "any",
  })
  async createSalePayment(
    @graphql.Args() args: CreateSalePaymentArgs
  ): Promise<SalePayment> {
    return await this.service.createSalePayment({
      ...args,
      data: {
        ...args.data,

        bank: args.data.bank
          ? {
              connect: args.data.bank,
            }
          : undefined,

        bankBranch: args.data.bankBranch
          ? {
              connect: args.data.bankBranch,
            }
          : undefined,

        currencyId: args.data.currencyId
          ? {
              connect: args.data.currencyId,
            }
          : undefined,

        paymentMethodId: {
          connect: args.data.paymentMethodId,
        },

        saleId: args.data.saleId
          ? {
              connect: args.data.saleId,
            }
          : undefined,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SalePayment)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "update",
    possession: "any",
  })
  async updateSalePayment(
    @graphql.Args() args: UpdateSalePaymentArgs
  ): Promise<SalePayment | null> {
    try {
      return await this.service.updateSalePayment({
        ...args,
        data: {
          ...args.data,

          bank: args.data.bank
            ? {
                connect: args.data.bank,
              }
            : undefined,

          bankBranch: args.data.bankBranch
            ? {
                connect: args.data.bankBranch,
              }
            : undefined,

          currencyId: args.data.currencyId
            ? {
                connect: args.data.currencyId,
              }
            : undefined,

          paymentMethodId: {
            connect: args.data.paymentMethodId,
          },

          saleId: args.data.saleId
            ? {
                connect: args.data.saleId,
              }
            : undefined,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SalePayment)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "delete",
    possession: "any",
  })
  async deleteSalePayment(
    @graphql.Args() args: DeleteSalePaymentArgs
  ): Promise<SalePayment | null> {
    try {
      return await this.service.deleteSalePayment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Bank, {
    nullable: true,
    name: "bank",
  })
  @nestAccessControl.UseRoles({
    resource: "Bank",
    action: "read",
    possession: "any",
  })
  async getBank(@graphql.Parent() parent: SalePayment): Promise<Bank | null> {
    const result = await this.service.getBank(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => BankBranch, {
    nullable: true,
    name: "bankBranch",
  })
  @nestAccessControl.UseRoles({
    resource: "BankBranch",
    action: "read",
    possession: "any",
  })
  async getBankBranch(
    @graphql.Parent() parent: SalePayment
  ): Promise<BankBranch | null> {
    const result = await this.service.getBankBranch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, {
    nullable: true,
    name: "currencyId",
  })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async getCurrencyId(
    @graphql.Parent() parent: SalePayment
  ): Promise<Currency | null> {
    const result = await this.service.getCurrencyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentMethod, {
    nullable: true,
    name: "paymentMethodId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  async getPaymentMethodId(
    @graphql.Parent() parent: SalePayment
  ): Promise<PaymentMethod | null> {
    const result = await this.service.getPaymentMethodId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sale, {
    nullable: true,
    name: "saleId",
  })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async getSaleId(@graphql.Parent() parent: SalePayment): Promise<Sale | null> {
    const result = await this.service.getSaleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: SalePayment
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
