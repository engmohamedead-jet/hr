/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsDate,
  ValidateNested,
  IsEnum,
  IsString,
  MaxLength,
  IsOptional,
} from "class-validator";
import { Type } from "class-transformer";
import { Elevator } from "../../elevator/base/Elevator";
import { EnumMaintenanceVisitElevatorStatusId } from "./EnumMaintenanceVisitElevatorStatusId";
import { Store } from "../../store/base/Store";
import { IsJSONValue } from "../../validators";
import { GraphQLJSON } from "graphql-type-json";
import { JsonValue } from "type-fest";

@ObjectType()
class MaintenanceVisit {
  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => Elevator,
  })
  @ValidateNested()
  @Type(() => Elevator)
  elevator?: Elevator;

  @ApiProperty({
    required: true,
    enum: EnumMaintenanceVisitElevatorStatusId,
  })
  @IsEnum(EnumMaintenanceVisitElevatorStatusId)
  @Field(() => EnumMaintenanceVisitElevatorStatusId, {
    nullable: true,
  })
  elevatorStatusId?: "Option1";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  spareParts!: string | null;

  @ApiProperty({
    required: true,
    type: () => Store,
  })
  @ValidateNested()
  @Type(() => Store)
  store?: Store;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  visitDate!: Date;

  @ApiProperty({
    required: false,
  })
  @IsJSONValue()
  @IsOptional()
  @Field(() => GraphQLJSON, {
    nullable: true,
  })
  visitDocumentImage!: JsonValue;
}

export { MaintenanceVisit as MaintenanceVisit };
