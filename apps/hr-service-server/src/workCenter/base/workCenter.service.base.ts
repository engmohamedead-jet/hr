/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkCenter as PrismaWorkCenter,
  WorkCenterAlternative as PrismaWorkCenterAlternative,
  WorkCenterCapacity as PrismaWorkCenterCapacity,
  WorkCenterProductivity as PrismaWorkCenterProductivity,
  WorkCenterProductivityLoss as PrismaWorkCenterProductivityLoss,
  WorkCenterRouting as PrismaWorkCenterRouting,
  WorkCenterWorkCenterTag as PrismaWorkCenterWorkCenterTag,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class WorkCenterServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkCenterCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workCenter.count(args);
  }

  async workCenters(
    args: Prisma.WorkCenterFindManyArgs
  ): Promise<PrismaWorkCenter[]> {
    return this.prisma.workCenter.findMany(args);
  }
  async workCenter(
    args: Prisma.WorkCenterFindUniqueArgs
  ): Promise<PrismaWorkCenter | null> {
    return this.prisma.workCenter.findUnique(args);
  }
  async createWorkCenter(
    args: Prisma.WorkCenterCreateArgs
  ): Promise<PrismaWorkCenter> {
    return this.prisma.workCenter.create(args);
  }
  async updateWorkCenter(
    args: Prisma.WorkCenterUpdateArgs
  ): Promise<PrismaWorkCenter> {
    return this.prisma.workCenter.update(args);
  }
  async deleteWorkCenter(
    args: Prisma.WorkCenterDeleteArgs
  ): Promise<PrismaWorkCenter> {
    return this.prisma.workCenter.delete(args);
  }

  async findWorkCenterAlternativeWorkCenters(
    parentId: string,
    args: Prisma.WorkCenterAlternativeFindManyArgs
  ): Promise<PrismaWorkCenterAlternative[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterAlternativeWorkCenters(args);
  }

  async findWorkCenterAlternatives(
    parentId: string,
    args: Prisma.WorkCenterAlternativeFindManyArgs
  ): Promise<PrismaWorkCenterAlternative[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterAlternatives(args);
  }

  async findWorkCenterCapacities(
    parentId: string,
    args: Prisma.WorkCenterCapacityFindManyArgs
  ): Promise<PrismaWorkCenterCapacity[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterCapacities(args);
  }

  async findWorkCenterProductivities(
    parentId: string,
    args: Prisma.WorkCenterProductivityFindManyArgs
  ): Promise<PrismaWorkCenterProductivity[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterProductivities(args);
  }

  async findWorkCenterProductivityLosses(
    parentId: string,
    args: Prisma.WorkCenterProductivityLossFindManyArgs
  ): Promise<PrismaWorkCenterProductivityLoss[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterProductivityLosses(args);
  }

  async findWorkCenterRoutings(
    parentId: string,
    args: Prisma.WorkCenterRoutingFindManyArgs
  ): Promise<PrismaWorkCenterRouting[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterRoutings(args);
  }

  async findWorkCenterWorkCenterTags(
    parentId: string,
    args: Prisma.WorkCenterWorkCenterTagFindManyArgs
  ): Promise<PrismaWorkCenterWorkCenterTag[]> {
    return this.prisma.workCenter
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterWorkCenterTags(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.workCenter
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
