/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImageCategory as PrismaImageCategory } from "@prisma/client";

export class ImageCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageCategory.count(args);
  }

  async imageCategories(
    args: Prisma.ImageCategoryFindManyArgs
  ): Promise<PrismaImageCategory[]> {
    return this.prisma.imageCategory.findMany(args);
  }
  async imageCategory(
    args: Prisma.ImageCategoryFindUniqueArgs
  ): Promise<PrismaImageCategory | null> {
    return this.prisma.imageCategory.findUnique(args);
  }
  async createImageCategory(
    args: Prisma.ImageCategoryCreateArgs
  ): Promise<PrismaImageCategory> {
    return this.prisma.imageCategory.create(args);
  }
  async updateImageCategory(
    args: Prisma.ImageCategoryUpdateArgs
  ): Promise<PrismaImageCategory> {
    return this.prisma.imageCategory.update(args);
  }
  async deleteImageCategory(
    args: Prisma.ImageCategoryDeleteArgs
  ): Promise<PrismaImageCategory> {
    return this.prisma.imageCategory.delete(args);
  }
}
