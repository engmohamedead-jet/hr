/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { CashRepository } from "../../cashRepository/base/CashRepository";

import {
  ValidateNested,
  IsDate,
  IsNumber,
  Max,
  IsString,
  IsOptional,
  IsBoolean,
  MaxLength,
} from "class-validator";

import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { Decimal } from "decimal.js";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { Sale } from "../../sale/base/Sale";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { Store } from "../../store/base/Store";
import { Tenant } from "../../tenant/base/Tenant";

@ObjectType()
class SaleReturn {
  @ApiProperty({
    required: true,
    type: () => CashRepository,
  })
  @ValidateNested()
  @Type(() => CashRepository)
  cashRepositoryId?: CashRepository;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => Customer,
  })
  @ValidateNested()
  @Type(() => Customer)
  customerId?: Customer;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  discountTotal!: Decimal;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => InvoiceType,
  })
  @ValidateNested()
  @Type(() => InvoiceType)
  @IsOptional()
  invoiceTypeId?: InvoiceType | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isCancelled!: boolean;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isReplicated!: boolean;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  netTotal!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  nonTaxableTotal!: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  paid!: Decimal;

  @ApiProperty({
    required: true,
    type: () => PaymentType,
  })
  @ValidateNested()
  @Type(() => PaymentType)
  paymentTypeId?: PaymentType;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  referenceNumber!: string | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  remaining!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  returnTotal!: Decimal;

  @ApiProperty({
    required: false,
    type: () => Sale,
  })
  @ValidateNested()
  @Type(() => Sale)
  @IsOptional()
  saleId?: Sale | null;

  @ApiProperty({
    required: true,
    type: () => SalePriceType,
  })
  @ValidateNested()
  @Type(() => SalePriceType)
  salePriceTyped?: SalePriceType;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  saleReturnDate!: Date;

  @ApiProperty({
    required: false,
    type: () => [SaleReturnDetail],
  })
  @ValidateNested()
  @Type(() => SaleReturnDetail)
  @IsOptional()
  saleReturnDetails?: Array<SaleReturnDetail>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  sequence!: string;

  @ApiProperty({
    required: true,
    type: () => Store,
  })
  @ValidateNested()
  @Type(() => Store)
  storeId?: Store;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  tax!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  taxRate!: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  taxableTotal!: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { SaleReturn as SaleReturn };
