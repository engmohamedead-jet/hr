/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Account } from "../../account/base/Account";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsBoolean,
} from "class-validator";
import { Type } from "class-transformer";
import { Customer } from "../../customer/base/Customer";
import { ExchangeRateDetail } from "../../exchangeRateDetail/base/ExchangeRateDetail";
import { Supplier } from "../../supplier/base/Supplier";

@ObjectType()
class Currency {
  @ApiProperty({
    required: false,
    type: () => [Account],
  })
  @ValidateNested()
  @Type(() => Account)
  @IsOptional()
  accounts?: Array<Account>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(100)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Customer],
  })
  @ValidateNested()
  @Type(() => Customer)
  @IsOptional()
  customers?: Array<Customer>;

  @ApiProperty({
    required: false,
    type: () => [ExchangeRateDetail],
  })
  @ValidateNested()
  @Type(() => ExchangeRateDetail)
  @IsOptional()
  exchangeRateDetails?: Array<ExchangeRateDetail>;

  @ApiProperty({
    required: false,
    type: () => ExchangeRateDetail,
  })
  @ValidateNested()
  @Type(() => ExchangeRateDetail)
  @IsOptional()
  foreignCurrencyName?: ExchangeRateDetail | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  hundredthName!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isDefault!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(300)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Supplier],
  })
  @ValidateNested()
  @Type(() => Supplier)
  @IsOptional()
  suppliers?: Array<Supplier>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(100)
  @Field(() => String)
  symbolField!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Currency as Currency };
