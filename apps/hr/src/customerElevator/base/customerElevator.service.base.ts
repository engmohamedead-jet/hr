/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CustomerElevator as PrismaCustomerElevator,
  FailureReporting as PrismaFailureReporting,
  InstallationContract as PrismaInstallationContract,
  PeriodicMaintenanceOrder as PrismaPeriodicMaintenanceOrder,
  Elevator as PrismaElevator,
  Store as PrismaStore,
} from "@prisma/client";

export class CustomerElevatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CustomerElevatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.customerElevator.count(args);
  }

  async customerElevators(
    args: Prisma.CustomerElevatorFindManyArgs
  ): Promise<PrismaCustomerElevator[]> {
    return this.prisma.customerElevator.findMany(args);
  }
  async customerElevator(
    args: Prisma.CustomerElevatorFindUniqueArgs
  ): Promise<PrismaCustomerElevator | null> {
    return this.prisma.customerElevator.findUnique(args);
  }
  async createCustomerElevator(
    args: Prisma.CustomerElevatorCreateArgs
  ): Promise<PrismaCustomerElevator> {
    return this.prisma.customerElevator.create(args);
  }
  async updateCustomerElevator(
    args: Prisma.CustomerElevatorUpdateArgs
  ): Promise<PrismaCustomerElevator> {
    return this.prisma.customerElevator.update(args);
  }
  async deleteCustomerElevator(
    args: Prisma.CustomerElevatorDeleteArgs
  ): Promise<PrismaCustomerElevator> {
    return this.prisma.customerElevator.delete(args);
  }

  async findFailureReportings(
    parentId: string,
    args: Prisma.FailureReportingFindManyArgs
  ): Promise<PrismaFailureReporting[]> {
    return this.prisma.customerElevator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .failureReportings(args);
  }

  async findInstallationContracts(
    parentId: string,
    args: Prisma.InstallationContractFindManyArgs
  ): Promise<PrismaInstallationContract[]> {
    return this.prisma.customerElevator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .installationContracts(args);
  }

  async findPeriodicMaintenanceOrders(
    parentId: string,
    args: Prisma.PeriodicMaintenanceOrderFindManyArgs
  ): Promise<PrismaPeriodicMaintenanceOrder[]> {
    return this.prisma.customerElevator
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .periodicMaintenanceOrders(args);
  }

  async getElevatorId(parentId: string): Promise<PrismaElevator | null> {
    return this.prisma.customerElevator
      .findUnique({
        where: { id: parentId },
      })
      .elevatorId();
  }

  async getStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.customerElevator
      .findUnique({
        where: { id: parentId },
      })
      .storeId();
  }
}
