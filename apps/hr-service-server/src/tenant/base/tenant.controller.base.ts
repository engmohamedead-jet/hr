/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TenantService } from "../tenant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TenantCreateInput } from "./TenantCreateInput";
import { Tenant } from "./Tenant";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantWhereUniqueInput } from "./TenantWhereUniqueInput";
import { TenantUpdateInput } from "./TenantUpdateInput";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { AttendanceWhereUniqueInput } from "../../attendance/base/AttendanceWhereUniqueInput";
import { BonusRequestFindManyArgs } from "../../bonusRequest/base/BonusRequestFindManyArgs";
import { BonusRequest } from "../../bonusRequest/base/BonusRequest";
import { BonusRequestWhereUniqueInput } from "../../bonusRequest/base/BonusRequestWhereUniqueInput";
import { CheckInOutFindManyArgs } from "../../checkInOut/base/CheckInOutFindManyArgs";
import { CheckInOut } from "../../checkInOut/base/CheckInOut";
import { CheckInOutWhereUniqueInput } from "../../checkInOut/base/CheckInOutWhereUniqueInput";
import { DailyMovementRequestFindManyArgs } from "../../dailyMovementRequest/base/DailyMovementRequestFindManyArgs";
import { DailyMovementRequest } from "../../dailyMovementRequest/base/DailyMovementRequest";
import { DailyMovementRequestWhereUniqueInput } from "../../dailyMovementRequest/base/DailyMovementRequestWhereUniqueInput";
import { DayOffRequestFindManyArgs } from "../../dayOffRequest/base/DayOffRequestFindManyArgs";
import { DayOffRequest } from "../../dayOffRequest/base/DayOffRequest";
import { DayOffRequestWhereUniqueInput } from "../../dayOffRequest/base/DayOffRequestWhereUniqueInput";
import { EmployeeDepartmentFindManyArgs } from "../../employeeDepartment/base/EmployeeDepartmentFindManyArgs";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeDepartmentWhereUniqueInput } from "../../employeeDepartment/base/EmployeeDepartmentWhereUniqueInput";
import { EmployeeGroupFindManyArgs } from "../../employeeGroup/base/EmployeeGroupFindManyArgs";
import { EmployeeGroup } from "../../employeeGroup/base/EmployeeGroup";
import { EmployeeGroupWhereUniqueInput } from "../../employeeGroup/base/EmployeeGroupWhereUniqueInput";
import { EmployeeRoleFindManyArgs } from "../../employeeRole/base/EmployeeRoleFindManyArgs";
import { EmployeeRole } from "../../employeeRole/base/EmployeeRole";
import { EmployeeRoleWhereUniqueInput } from "../../employeeRole/base/EmployeeRoleWhereUniqueInput";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { MachineFindManyArgs } from "../../machine/base/MachineFindManyArgs";
import { Machine } from "../../machine/base/Machine";
import { MachineWhereUniqueInput } from "../../machine/base/MachineWhereUniqueInput";
import { FiscalMonthFindManyArgs } from "../../fiscalMonth/base/FiscalMonthFindManyArgs";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { FiscalMonthWhereUniqueInput } from "../../fiscalMonth/base/FiscalMonthWhereUniqueInput";
import { JobTitleFindManyArgs } from "../../jobTitle/base/JobTitleFindManyArgs";
import { JobTitle } from "../../jobTitle/base/JobTitle";
import { JobTitleWhereUniqueInput } from "../../jobTitle/base/JobTitleWhereUniqueInput";
import { LeaveRequestTypeFindManyArgs } from "../../leaveRequestType/base/LeaveRequestTypeFindManyArgs";
import { LeaveRequestType } from "../../leaveRequestType/base/LeaveRequestType";
import { LeaveRequestTypeWhereUniqueInput } from "../../leaveRequestType/base/LeaveRequestTypeWhereUniqueInput";
import { LeaveRequestFindManyArgs } from "../../leaveRequest/base/LeaveRequestFindManyArgs";
import { LeaveRequest } from "../../leaveRequest/base/LeaveRequest";
import { LeaveRequestWhereUniqueInput } from "../../leaveRequest/base/LeaveRequestWhereUniqueInput";
import { OverNightRequestFindManyArgs } from "../../overNightRequest/base/OverNightRequestFindManyArgs";
import { OverNightRequest } from "../../overNightRequest/base/OverNightRequest";
import { OverNightRequestWhereUniqueInput } from "../../overNightRequest/base/OverNightRequestWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TenantControllerBase {
  constructor(
    protected readonly service: TenantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tenant })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTenant(@common.Body() data: TenantCreateInput): Promise<Tenant> {
    return await this.service.createTenant({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tenant] })
  @ApiNestedQuery(TenantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenants(@common.Req() request: Request): Promise<Tenant[]> {
    const args = plainToClass(TenantFindManyArgs, request.query);
    return this.service.tenants({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    const result = await this.service.tenant({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() data: TenantUpdateInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attendances")
  @ApiNestedQuery(AttendanceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Attendance[]> {
    const query = plainToClass(AttendanceFindManyArgs, request.query);
    const results = await this.service.findAttendances(params.id, {
      ...query,
      select: {
        ApprovedByUserId: {
          select: {
            id: true,
          },
        },

        attendanceDate: true,
        checkInTime: true,
        checkOutTime: true,
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,
        note: true,
        overtimeHours: true,
        reasonForAbsenteeism: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasAbsent: true,
        wasPresent: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectAttendances(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateAttendances(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attendances")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectAttendances(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttendanceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attendances: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bonusRequests")
  @ApiNestedQuery(BonusRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "any",
  })
  async findBonusRequests(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BonusRequest[]> {
    const query = plainToClass(BonusRequestFindManyArgs, request.query);
    const results = await this.service.findBonusRequests(params.id, {
      ...query,
      select: {
        absent: true,
        actual: true,
        allStoreValue: true,
        annualLeave: true,

        approvedByUserId: {
          select: {
            id: true,
          },
        },

        assistantManager: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        finalAmount: true,

        fiscalMonthId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,
        note: true,
        penalty: true,
        percentage2: true,
        present: true,
        proratedValue: true,
        sales: true,
        salesStaff: true,
        salesTargetPercentage: true,
        shopManager: true,
        sickLeave: true,
        target: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        warning: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bonusRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBonusRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BonusRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bonusRequests: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bonusRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBonusRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BonusRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bonusRequests: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bonusRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBonusRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BonusRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bonusRequests: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/checkInOuts")
  @ApiNestedQuery(CheckInOutFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "any",
  })
  async findCheckInOuts(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CheckInOut[]> {
    const query = plainToClass(CheckInOutFindManyArgs, request.query);
    const results = await this.service.findCheckInOuts(params.id, {
      ...query,
      select: {
        approvedByUserId: {
          select: {
            id: true,
          },
        },

        checkDate: true,
        checkTime: true,
        checkType: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,

        machine: {
          select: {
            id: true,
          },
        },

        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/checkInOuts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectCheckInOuts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CheckInOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkInOuts: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/checkInOuts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateCheckInOuts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CheckInOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkInOuts: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/checkInOuts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectCheckInOuts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CheckInOutWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      checkInOuts: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dailyMovements")
  @ApiNestedQuery(DailyMovementRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DailyMovementRequest",
    action: "read",
    possession: "any",
  })
  async findDailyMovements(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<DailyMovementRequest[]> {
    const query = plainToClass(DailyMovementRequestFindManyArgs, request.query);
    const results = await this.service.findDailyMovements(params.id, {
      ...query,
      select: {
        approvedByUserId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,
        movementDate: true,
        note: true,
        reason: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        totalHours: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dailyMovements")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectDailyMovements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DailyMovementRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMovements: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dailyMovements")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateDailyMovements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DailyMovementRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMovements: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dailyMovements")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectDailyMovements(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DailyMovementRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dailyMovements: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/dayOffs")
  @ApiNestedQuery(DayOffRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "DayOffRequest",
    action: "read",
    possession: "any",
  })
  async findDayOffs(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<DayOffRequest[]> {
    const query = plainToClass(DayOffRequestFindManyArgs, request.query);
    const results = await this.service.findDayOffs(params.id, {
      ...query,
      select: {
        approvedByUserId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dayOffDate: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/dayOffs")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectDayOffs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DayOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dayOffs: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/dayOffs")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateDayOffs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DayOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dayOffs: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/dayOffs")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectDayOffs(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: DayOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      dayOffs: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeDepartments")
  @ApiNestedQuery(EmployeeDepartmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async findEmployeeDepartments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeDepartment[]> {
    const query = plainToClass(EmployeeDepartmentFindManyArgs, request.query);
    const results = await this.service.findEmployeeDepartments(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeGroups")
  @ApiNestedQuery(EmployeeGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "any",
  })
  async findEmployeeGroups(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeGroup[]> {
    const query = plainToClass(EmployeeGroupFindManyArgs, request.query);
    const results = await this.service.findEmployeeGroups(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        descripption: true,
        id: true,
        isActive: true,
        name: true,
        normalziedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployeeGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeGroups: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployeeGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeGroups: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeGroups: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeRoles")
  @ApiNestedQuery(EmployeeRoleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "any",
  })
  async findEmployeeRoles(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeRole[]> {
    const query = plainToClass(EmployeeRoleFindManyArgs, request.query);
    const results = await this.service.findEmployeeRoles(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeRoles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployeeRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRoles: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeRoles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployeeRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRoles: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeRoles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeRoles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeRoleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeRoles: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employees")
  @ApiNestedQuery(EmployeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Employee[]> {
    const query = plainToClass(EmployeeFindManyArgs, request.query);
    const results = await this.service.findEmployees(params.id, {
      ...query,
      select: {
        balance: true,
        code: true,
        createdAt: true,

        employeeDepartmentId: {
          select: {
            id: true,
          },
        },

        employeeGroup: {
          select: {
            id: true,
          },
        },

        employeeRoleId: {
          select: {
            id: true,
          },
        },

        hireDate: true,
        id: true,
        isActive: true,

        jobTitle: {
          select: {
            id: true,
          },
        },

        lastYearBalance: true,
        name: true,
        note: true,
        remainingBalance: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        usedBalance: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/fingerprintMachines")
  @ApiNestedQuery(MachineFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async findFingerprintMachines(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Machine[]> {
    const query = plainToClass(MachineFindManyArgs, request.query);
    const results = await this.service.findFingerprintMachines(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        ip: true,
        isAndroid: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fingerprintMachines")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectFingerprintMachines(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MachineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fingerprintMachines: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fingerprintMachines")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateFingerprintMachines(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MachineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fingerprintMachines: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fingerprintMachines")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectFingerprintMachines(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: MachineWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fingerprintMachines: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/fiscalMonths")
  @ApiNestedQuery(FiscalMonthFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async findFiscalMonths(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<FiscalMonth[]> {
    const query = plainToClass(FiscalMonthFindManyArgs, request.query);
    const results = await this.service.findFiscalMonths(params.id, {
      ...query,
      select: {
        bonusRequests: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        endsOn: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        startsFrom: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/fiscalMonths")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectFiscalMonths(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FiscalMonthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fiscalMonths: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/fiscalMonths")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateFiscalMonths(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FiscalMonthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fiscalMonths: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/fiscalMonths")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectFiscalMonths(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: FiscalMonthWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      fiscalMonths: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/jobTitles")
  @ApiNestedQuery(JobTitleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "any",
  })
  async findJobTitles(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<JobTitle[]> {
    const query = plainToClass(JobTitleFindManyArgs, request.query);
    const results = await this.service.findJobTitles(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/jobTitles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectJobTitles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobTitleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobTitles: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/jobTitles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateJobTitles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobTitleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobTitles: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/jobTitles")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectJobTitles(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: JobTitleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      jobTitles: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/leaveRequestTypes")
  @ApiNestedQuery(LeaveRequestTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "read",
    possession: "any",
  })
  async findLeaveRequestTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<LeaveRequestType[]> {
    const query = plainToClass(LeaveRequestTypeFindManyArgs, request.query);
    const results = await this.service.findLeaveRequestTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaveRequestTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectLeaveRequestTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequestTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaveRequestTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateLeaveRequestTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequestTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaveRequestTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectLeaveRequestTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequestTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/leaveRequests")
  @ApiNestedQuery(LeaveRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequest",
    action: "read",
    possession: "any",
  })
  async findLeaveRequests(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<LeaveRequest[]> {
    const query = plainToClass(LeaveRequestFindManyArgs, request.query);
    const results = await this.service.findLeaveRequests(params.id, {
      ...query,
      select: {
        LeaveDate: true,

        approvedByUserId: {
          select: {
            id: true,
          },
        },

        cause: true,
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        isAppreoved: true,

        leaveRequestTypeId: {
          select: {
            id: true,
          },
        },

        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/leaveRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectLeaveRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequests: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/leaveRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateLeaveRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequests: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/leaveRequests")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectLeaveRequests(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: LeaveRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      leaveRequests: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/overNights")
  @ApiNestedQuery(OverNightRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "any",
  })
  async findOverNights(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OverNightRequest[]> {
    const query = plainToClass(OverNightRequestFindManyArgs, request.query);
    const results = await this.service.findOverNights(params.id, {
      ...query,
      select: {
        approvedByUserId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        endDateTime: true,
        id: true,
        isActive: true,
        isAppreoved: true,
        note: true,
        startDateTime: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/overNights")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectOverNights(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OverNightRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      overNights: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/overNights")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateOverNights(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OverNightRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      overNights: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/overNights")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectOverNights(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OverNightRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      overNights: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
