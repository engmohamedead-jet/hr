/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Debit } from "./Debit";
import { DebitCountArgs } from "./DebitCountArgs";
import { DebitFindManyArgs } from "./DebitFindManyArgs";
import { DebitFindUniqueArgs } from "./DebitFindUniqueArgs";
import { CreateDebitArgs } from "./CreateDebitArgs";
import { UpdateDebitArgs } from "./UpdateDebitArgs";
import { DeleteDebitArgs } from "./DeleteDebitArgs";
import { DebitService } from "../debit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Debit)
export class DebitResolverBase {
  constructor(
    protected readonly service: DebitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "read",
    possession: "any",
  })
  async _debitsMeta(
    @graphql.Args() args: DebitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Debit])
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "read",
    possession: "any",
  })
  async debits(@graphql.Args() args: DebitFindManyArgs): Promise<Debit[]> {
    return this.service.debits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Debit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "read",
    possession: "own",
  })
  async debit(
    @graphql.Args() args: DebitFindUniqueArgs
  ): Promise<Debit | null> {
    const result = await this.service.debit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Debit)
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "create",
    possession: "any",
  })
  async createDebit(@graphql.Args() args: CreateDebitArgs): Promise<Debit> {
    return await this.service.createDebit({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Debit)
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "update",
    possession: "any",
  })
  async updateDebit(
    @graphql.Args() args: UpdateDebitArgs
  ): Promise<Debit | null> {
    try {
      return await this.service.updateDebit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Debit)
  @nestAccessControl.UseRoles({
    resource: "Debit",
    action: "delete",
    possession: "any",
  })
  async deleteDebit(
    @graphql.Args() args: DeleteDebitArgs
  ): Promise<Debit | null> {
    try {
      return await this.service.deleteDebit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
