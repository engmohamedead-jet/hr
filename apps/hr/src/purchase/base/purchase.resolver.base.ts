/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Purchase } from "./Purchase";
import { PurchaseCountArgs } from "./PurchaseCountArgs";
import { PurchaseFindManyArgs } from "./PurchaseFindManyArgs";
import { PurchaseFindUniqueArgs } from "./PurchaseFindUniqueArgs";
import { CreatePurchaseArgs } from "./CreatePurchaseArgs";
import { UpdatePurchaseArgs } from "./UpdatePurchaseArgs";
import { DeletePurchaseArgs } from "./DeletePurchaseArgs";
import { PurchaseDetailFindManyArgs } from "../../purchaseDetail/base/PurchaseDetailFindManyArgs";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchaseReturnFindManyArgs } from "../../purchaseReturn/base/PurchaseReturnFindManyArgs";
import { PurchaseReturn } from "../../purchaseReturn/base/PurchaseReturn";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { PurchasePriceType } from "../../purchasePriceType/base/PurchasePriceType";
import { Store } from "../../store/base/Store";
import { Supplier } from "../../supplier/base/Supplier";
import { Tenant } from "../../tenant/base/Tenant";
import { PurchaseService } from "../purchase.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Purchase)
export class PurchaseResolverBase {
  constructor(
    protected readonly service: PurchaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async _purchasesMeta(
    @graphql.Args() args: PurchaseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Purchase])
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async purchases(
    @graphql.Args() args: PurchaseFindManyArgs
  ): Promise<Purchase[]> {
    return this.service.purchases(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Purchase, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "own",
  })
  async purchase(
    @graphql.Args() args: PurchaseFindUniqueArgs
  ): Promise<Purchase | null> {
    const result = await this.service.purchase(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Purchase)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "create",
    possession: "any",
  })
  async createPurchase(
    @graphql.Args() args: CreatePurchaseArgs
  ): Promise<Purchase> {
    return await this.service.createPurchase({
      ...args,
      data: {
        ...args.data,

        cashRepositoryId: {
          connect: args.data.cashRepositoryId,
        },

        invoiceTypeId: args.data.invoiceTypeId
          ? {
              connect: args.data.invoiceTypeId,
            }
          : undefined,

        paymentTermId: args.data.paymentTermId
          ? {
              connect: args.data.paymentTermId,
            }
          : undefined,

        paymentTypeId: {
          connect: args.data.paymentTypeId,
        },

        purchasePriceTypeId: {
          connect: args.data.purchasePriceTypeId,
        },

        storeId: {
          connect: args.data.storeId,
        },

        supplierId: {
          connect: args.data.supplierId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Purchase)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "update",
    possession: "any",
  })
  async updatePurchase(
    @graphql.Args() args: UpdatePurchaseArgs
  ): Promise<Purchase | null> {
    try {
      return await this.service.updatePurchase({
        ...args,
        data: {
          ...args.data,

          cashRepositoryId: {
            connect: args.data.cashRepositoryId,
          },

          invoiceTypeId: args.data.invoiceTypeId
            ? {
                connect: args.data.invoiceTypeId,
              }
            : undefined,

          paymentTermId: args.data.paymentTermId
            ? {
                connect: args.data.paymentTermId,
              }
            : undefined,

          paymentTypeId: {
            connect: args.data.paymentTypeId,
          },

          purchasePriceTypeId: {
            connect: args.data.purchasePriceTypeId,
          },

          storeId: {
            connect: args.data.storeId,
          },

          supplierId: {
            connect: args.data.supplierId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Purchase)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "delete",
    possession: "any",
  })
  async deletePurchase(
    @graphql.Args() args: DeletePurchaseArgs
  ): Promise<Purchase | null> {
    try {
      return await this.service.deletePurchase(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseDetail], { name: "purchaseDetails" })
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseDetails(
    @graphql.Parent() parent: Purchase,
    @graphql.Args() args: PurchaseDetailFindManyArgs
  ): Promise<PurchaseDetail[]> {
    const results = await this.service.findPurchaseDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseReturn], { name: "purchaseReturns" })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturns(
    @graphql.Parent() parent: Purchase,
    @graphql.Args() args: PurchaseReturnFindManyArgs
  ): Promise<PurchaseReturn[]> {
    const results = await this.service.findPurchaseReturns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CashRepository, {
    nullable: true,
    name: "cashRepositoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async getCashRepositoryId(
    @graphql.Parent() parent: Purchase
  ): Promise<CashRepository | null> {
    const result = await this.service.getCashRepositoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InvoiceType, {
    nullable: true,
    name: "invoiceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async getInvoiceTypeId(
    @graphql.Parent() parent: Purchase
  ): Promise<InvoiceType | null> {
    const result = await this.service.getInvoiceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentTerm, {
    nullable: true,
    name: "paymentTermId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async getPaymentTermId(
    @graphql.Parent() parent: Purchase
  ): Promise<PaymentTerm | null> {
    const result = await this.service.getPaymentTermId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentType, {
    nullable: true,
    name: "paymentTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async getPaymentTypeId(
    @graphql.Parent() parent: Purchase
  ): Promise<PaymentType | null> {
    const result = await this.service.getPaymentTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PurchasePriceType, {
    nullable: true,
    name: "purchasePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  async getPurchasePriceTypeId(
    @graphql.Parent() parent: Purchase
  ): Promise<PurchasePriceType | null> {
    const result = await this.service.getPurchasePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(@graphql.Parent() parent: Purchase): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplierId",
  })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async getSupplierId(
    @graphql.Parent() parent: Purchase
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplierId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: Purchase
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
