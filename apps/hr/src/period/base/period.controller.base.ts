/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PeriodService } from "../period.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PeriodCreateInput } from "./PeriodCreateInput";
import { Period } from "./Period";
import { PeriodFindManyArgs } from "./PeriodFindManyArgs";
import { PeriodWhereUniqueInput } from "./PeriodWhereUniqueInput";
import { PeriodUpdateInput } from "./PeriodUpdateInput";
import { PaymentTermFindManyArgs } from "../../paymentTerm/base/PaymentTermFindManyArgs";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentTermWhereUniqueInput } from "../../paymentTerm/base/PaymentTermWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PeriodControllerBase {
  constructor(
    protected readonly service: PeriodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Period })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPeriod(@common.Body() data: PeriodCreateInput): Promise<Period> {
    return await this.service.createPeriod({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Period] })
  @ApiNestedQuery(PeriodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async periods(@common.Req() request: Request): Promise<Period[]> {
    const args = plainToClass(PeriodFindManyArgs, request.query);
    return this.service.periods({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Period })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async period(
    @common.Param() params: PeriodWhereUniqueInput
  ): Promise<Period | null> {
    const result = await this.service.period({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Period })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePeriod(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() data: PeriodUpdateInput
  ): Promise<Period | null> {
    try {
      return await this.service.updatePeriod({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Period })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePeriod(
    @common.Param() params: PeriodWhereUniqueInput
  ): Promise<Period | null> {
    try {
      return await this.service.deletePeriod({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/installmentSaleFeePostingPeriodPaymentTerms")
  @ApiNestedQuery(PaymentTermFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async findInstallmentSaleFeePostingPeriodPaymentTerms(
    @common.Req() request: Request,
    @common.Param() params: PeriodWhereUniqueInput
  ): Promise<PaymentTerm[]> {
    const query = plainToClass(PaymentTermFindManyArgs, request.query);
    const results =
      await this.service.findInstallmentSaleFeePostingPeriodPaymentTerms(
        params.id,
        {
          ...query,
          select: {
            code: true,
            createdAt: true,
            description: true,
            dueDays: true,

            duePeriodId: {
              select: {
                id: true,
              },
            },

            gracePeriod: true,
            id: true,

            installmentSaleFeeId: {
              select: {
                id: true,
              },
            },

            installmentSaleFeePostingPeriod: {
              select: {
                id: true,
              },
            },

            isActive: true,
            isDefault: true,
            isDueOnDate: true,
            name: true,
            normalizedName: true,
            note: true,

            tenantId: {
              select: {
                id: true,
              },
            },

            updatedAt: true,
          },
        }
      );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/installmentSaleFeePostingPeriodPaymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async connectInstallmentSaleFeePostingPeriodPaymentTerms(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFeePostingPeriodPaymentTerms: {
        connect: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/installmentSaleFeePostingPeriodPaymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async updateInstallmentSaleFeePostingPeriodPaymentTerms(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFeePostingPeriodPaymentTerms: {
        set: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/installmentSaleFeePostingPeriodPaymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async disconnectInstallmentSaleFeePostingPeriodPaymentTerms(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFeePostingPeriodPaymentTerms: {
        disconnect: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentTerms1")
  @ApiNestedQuery(PaymentTermFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async findPaymentTerms1(
    @common.Req() request: Request,
    @common.Param() params: PeriodWhereUniqueInput
  ): Promise<PaymentTerm[]> {
    const query = plainToClass(PaymentTermFindManyArgs, request.query);
    const results = await this.service.findPaymentTerms1(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        dueDays: true,

        duePeriodId: {
          select: {
            id: true,
          },
        },

        gracePeriod: true,
        id: true,

        installmentSaleFeeId: {
          select: {
            id: true,
          },
        },

        installmentSaleFeePostingPeriod: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isDefault: true,
        isDueOnDate: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentTerms1")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async connectPaymentTerms1(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms1: {
        connect: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentTerms1")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async updatePaymentTerms1(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms1: {
        set: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentTerms1")
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentTerms1(
    @common.Param() params: PeriodWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms1: {
        disconnect: body,
      },
    };
    await this.service.updatePeriod({
      where: params,
      data,
      select: { id: true },
    });
  }
}
