/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleOrderDetail } from "./SaleOrderDetail";
import { SaleOrderDetailCountArgs } from "./SaleOrderDetailCountArgs";
import { SaleOrderDetailFindManyArgs } from "./SaleOrderDetailFindManyArgs";
import { SaleOrderDetailFindUniqueArgs } from "./SaleOrderDetailFindUniqueArgs";
import { CreateSaleOrderDetailArgs } from "./CreateSaleOrderDetailArgs";
import { UpdateSaleOrderDetailArgs } from "./UpdateSaleOrderDetailArgs";
import { DeleteSaleOrderDetailArgs } from "./DeleteSaleOrderDetailArgs";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { SaleOrder } from "../../saleOrder/base/SaleOrder";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { Tenant } from "../../tenant/base/Tenant";
import { Unit } from "../../unit/base/Unit";
import { SaleOrderDetailService } from "../saleOrderDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleOrderDetail)
export class SaleOrderDetailResolverBase {
  constructor(
    protected readonly service: SaleOrderDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "any",
  })
  async _saleOrderDetailsMeta(
    @graphql.Args() args: SaleOrderDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleOrderDetail])
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "any",
  })
  async saleOrderDetails(
    @graphql.Args() args: SaleOrderDetailFindManyArgs
  ): Promise<SaleOrderDetail[]> {
    return this.service.saleOrderDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleOrderDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "own",
  })
  async saleOrderDetail(
    @graphql.Args() args: SaleOrderDetailFindUniqueArgs
  ): Promise<SaleOrderDetail | null> {
    const result = await this.service.saleOrderDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleOrderDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "create",
    possession: "any",
  })
  async createSaleOrderDetail(
    @graphql.Args() args: CreateSaleOrderDetailArgs
  ): Promise<SaleOrderDetail> {
    return await this.service.createSaleOrderDetail({
      ...args,
      data: {
        ...args.data,

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        saleOrder: {
          connect: args.data.saleOrder,
        },

        salePriceTypeId: {
          connect: args.data.salePriceTypeId,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,

        unitId: {
          connect: args.data.unitId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleOrderDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "update",
    possession: "any",
  })
  async updateSaleOrderDetail(
    @graphql.Args() args: UpdateSaleOrderDetailArgs
  ): Promise<SaleOrderDetail | null> {
    try {
      return await this.service.updateSaleOrderDetail({
        ...args,
        data: {
          ...args.data,

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          saleOrder: {
            connect: args.data.saleOrder,
          },

          salePriceTypeId: {
            connect: args.data.salePriceTypeId,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,

          unitId: {
            connect: args.data.unitId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleOrderDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "delete",
    possession: "any",
  })
  async deleteSaleOrderDetail(
    @graphql.Args() args: DeleteSaleOrderDetailArgs
  ): Promise<SaleOrderDetail | null> {
    try {
      return await this.service.deleteSaleOrderDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SaleOrder, {
    nullable: true,
    name: "saleOrder",
  })
  @nestAccessControl.UseRoles({
    resource: "SaleOrder",
    action: "read",
    possession: "any",
  })
  async getSaleOrder(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<SaleOrder | null> {
    const result = await this.service.getSaleOrder(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalePriceType, {
    nullable: true,
    name: "salePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async getSalePriceTypeId(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<SalePriceType | null> {
    const result = await this.service.getSalePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(
    @graphql.Parent() parent: SaleOrderDetail
  ): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
