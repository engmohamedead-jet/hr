/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductBarcode as PrismaProductBarcode,
  BarcodeType as PrismaBarcodeType,
  Product as PrismaProduct,
  ProductVariant as PrismaProductVariant,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class ProductBarcodeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductBarcodeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productBarcode.count(args);
  }

  async productBarcodes(
    args: Prisma.ProductBarcodeFindManyArgs
  ): Promise<PrismaProductBarcode[]> {
    return this.prisma.productBarcode.findMany(args);
  }
  async productBarcode(
    args: Prisma.ProductBarcodeFindUniqueArgs
  ): Promise<PrismaProductBarcode | null> {
    return this.prisma.productBarcode.findUnique(args);
  }
  async createProductBarcode(
    args: Prisma.ProductBarcodeCreateArgs
  ): Promise<PrismaProductBarcode> {
    return this.prisma.productBarcode.create(args);
  }
  async updateProductBarcode(
    args: Prisma.ProductBarcodeUpdateArgs
  ): Promise<PrismaProductBarcode> {
    return this.prisma.productBarcode.update(args);
  }
  async deleteProductBarcode(
    args: Prisma.ProductBarcodeDeleteArgs
  ): Promise<PrismaProductBarcode> {
    return this.prisma.productBarcode.delete(args);
  }

  async getBarcodeTypeId(parentId: string): Promise<PrismaBarcodeType | null> {
    return this.prisma.productBarcode
      .findUnique({
        where: { id: parentId },
      })
      .barcodeTypeId();
  }

  async getProductId(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.productBarcode
      .findUnique({
        where: { id: parentId },
      })
      .productId();
  }

  async getProductVariantId(
    parentId: string
  ): Promise<PrismaProductVariant | null> {
    return this.prisma.productBarcode
      .findUnique({
        where: { id: parentId },
      })
      .productVariantId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.productBarcode
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
