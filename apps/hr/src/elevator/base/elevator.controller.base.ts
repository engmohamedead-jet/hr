/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ElevatorService } from "../elevator.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ElevatorCreateInput } from "./ElevatorCreateInput";
import { Elevator } from "./Elevator";
import { ElevatorFindManyArgs } from "./ElevatorFindManyArgs";
import { ElevatorWhereUniqueInput } from "./ElevatorWhereUniqueInput";
import { ElevatorUpdateInput } from "./ElevatorUpdateInput";
import { CustomerElevatorFindManyArgs } from "../../customerElevator/base/CustomerElevatorFindManyArgs";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { CustomerElevatorWhereUniqueInput } from "../../customerElevator/base/CustomerElevatorWhereUniqueInput";
import { CustomerUserFindManyArgs } from "../../customerUser/base/CustomerUserFindManyArgs";
import { CustomerUser } from "../../customerUser/base/CustomerUser";
import { CustomerUserWhereUniqueInput } from "../../customerUser/base/CustomerUserWhereUniqueInput";
import { ElevatorSparePartFindManyArgs } from "../../elevatorSparePart/base/ElevatorSparePartFindManyArgs";
import { ElevatorSparePart } from "../../elevatorSparePart/base/ElevatorSparePart";
import { ElevatorSparePartWhereUniqueInput } from "../../elevatorSparePart/base/ElevatorSparePartWhereUniqueInput";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { FailureReportingWhereUniqueInput } from "../../failureReporting/base/FailureReportingWhereUniqueInput";
import { InstallationContractFindManyArgs } from "../../installationContract/base/InstallationContractFindManyArgs";
import { InstallationContract } from "../../installationContract/base/InstallationContract";
import { InstallationContractWhereUniqueInput } from "../../installationContract/base/InstallationContractWhereUniqueInput";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceContractWhereUniqueInput } from "../../maintenanceContract/base/MaintenanceContractWhereUniqueInput";
import { MaintenanceVisitFindManyArgs } from "../../maintenanceVisit/base/MaintenanceVisitFindManyArgs";
import { MaintenanceVisit } from "../../maintenanceVisit/base/MaintenanceVisit";
import { MaintenanceVisitWhereUniqueInput } from "../../maintenanceVisit/base/MaintenanceVisitWhereUniqueInput";
import { PeriodicMaintenanceOrderFindManyArgs } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderFindManyArgs";
import { PeriodicMaintenanceOrder } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrder";
import { PeriodicMaintenanceOrderWhereUniqueInput } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ElevatorControllerBase {
  constructor(
    protected readonly service: ElevatorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Elevator })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createElevator(
    @common.Body() data: ElevatorCreateInput
  ): Promise<Elevator> {
    return await this.service.createElevator({
      data: {
        ...data,

        controlTypeId: data.controlTypeId
          ? {
              connect: data.controlTypeId,
            }
          : undefined,

        doorTypeId: data.doorTypeId
          ? {
              connect: data.doorTypeId,
            }
          : undefined,

        elevatorTypeId: data.elevatorTypeId
          ? {
              connect: data.elevatorTypeId,
            }
          : undefined,

        motorTypeId: data.motorTypeId
          ? {
              connect: data.motorTypeId,
            }
          : undefined,

        storeId: {
          connect: data.storeId,
        },
      },
      select: {
        bannerSize: true,
        cabinetSize: true,
        code: true,

        controlTypeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        doorSize: true,

        doorTypeId: {
          select: {
            id: true,
          },
        },

        elevatorTypeId: {
          select: {
            id: true,
          },
        },

        freight: true,
        id: true,
        motorPower: true,

        motorTypeId: {
          select: {
            id: true,
          },
        },

        name: true,
        normalizedName: true,
        personsCount: true,
        stationsCount: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Elevator] })
  @ApiNestedQuery(ElevatorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async elevators(@common.Req() request: Request): Promise<Elevator[]> {
    const args = plainToClass(ElevatorFindManyArgs, request.query);
    return this.service.elevators({
      ...args,
      select: {
        bannerSize: true,
        cabinetSize: true,
        code: true,

        controlTypeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        doorSize: true,

        doorTypeId: {
          select: {
            id: true,
          },
        },

        elevatorTypeId: {
          select: {
            id: true,
          },
        },

        freight: true,
        id: true,
        motorPower: true,

        motorTypeId: {
          select: {
            id: true,
          },
        },

        name: true,
        normalizedName: true,
        personsCount: true,
        stationsCount: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Elevator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async elevator(
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<Elevator | null> {
    const result = await this.service.elevator({
      where: params,
      select: {
        bannerSize: true,
        cabinetSize: true,
        code: true,

        controlTypeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        doorSize: true,

        doorTypeId: {
          select: {
            id: true,
          },
        },

        elevatorTypeId: {
          select: {
            id: true,
          },
        },

        freight: true,
        id: true,
        motorPower: true,

        motorTypeId: {
          select: {
            id: true,
          },
        },

        name: true,
        normalizedName: true,
        personsCount: true,
        stationsCount: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Elevator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateElevator(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() data: ElevatorUpdateInput
  ): Promise<Elevator | null> {
    try {
      return await this.service.updateElevator({
        where: params,
        data: {
          ...data,

          controlTypeId: data.controlTypeId
            ? {
                connect: data.controlTypeId,
              }
            : undefined,

          doorTypeId: data.doorTypeId
            ? {
                connect: data.doorTypeId,
              }
            : undefined,

          elevatorTypeId: data.elevatorTypeId
            ? {
                connect: data.elevatorTypeId,
              }
            : undefined,

          motorTypeId: data.motorTypeId
            ? {
                connect: data.motorTypeId,
              }
            : undefined,

          storeId: {
            connect: data.storeId,
          },
        },
        select: {
          bannerSize: true,
          cabinetSize: true,
          code: true,

          controlTypeId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          doorSize: true,

          doorTypeId: {
            select: {
              id: true,
            },
          },

          elevatorTypeId: {
            select: {
              id: true,
            },
          },

          freight: true,
          id: true,
          motorPower: true,

          motorTypeId: {
            select: {
              id: true,
            },
          },

          name: true,
          normalizedName: true,
          personsCount: true,
          stationsCount: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Elevator })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteElevator(
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<Elevator | null> {
    try {
      return await this.service.deleteElevator({
        where: params,
        select: {
          bannerSize: true,
          cabinetSize: true,
          code: true,

          controlTypeId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          doorSize: true,

          doorTypeId: {
            select: {
              id: true,
            },
          },

          elevatorTypeId: {
            select: {
              id: true,
            },
          },

          freight: true,
          id: true,
          motorPower: true,

          motorTypeId: {
            select: {
              id: true,
            },
          },

          name: true,
          normalizedName: true,
          personsCount: true,
          stationsCount: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerElevators")
  @ApiNestedQuery(CustomerElevatorFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerElevator",
    action: "read",
    possession: "any",
  })
  async findCustomerElevators(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<CustomerElevator[]> {
    const query = plainToClass(CustomerElevatorFindManyArgs, request.query);
    const results = await this.service.findCustomerElevators(params.id, {
      ...query,
      select: {
        address: true,
        amount: true,
        code: true,
        createdAt: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        hasPendingMaintenanceContractOrders: true,
        id: true,
        maintenanceContractDocumentImage: true,
        maintenanceEndDate: true,
        maintenanceStartDate: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerElevators")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectCustomerElevators(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerElevatorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerElevators: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerElevators")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateCustomerElevators(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerElevatorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerElevators: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerElevators")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerElevators(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerElevatorWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerElevators: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customerUsers")
  @ApiNestedQuery(CustomerUserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  async findCustomerUsers(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<CustomerUser[]> {
    const query = plainToClass(CustomerUserFindManyArgs, request.query);
    const results = await this.service.findCustomerUsers(params.id, {
      ...query,
      select: {
        accessFailedCount: true,
        createdAt: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        email: true,
        emailConfirmed: true,
        entityVersion: true,
        id: true,
        isActive: true,
        isExternal: true,
        lastPasswordChangeTime: true,
        lockoutEnabled: true,
        lockoutEnd: true,
        name: true,
        normalizedEmail: true,
        normalizedUserName: true,
        note: true,
        phoneNumber: true,
        phoneNumberConfirmed: true,
        securityStamp: true,
        shouldChangePasswordOnNextLogin: true,
        surname: true,
        twoFactorEnabled: true,
        updatedAt: true,
        userName: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customerUsers")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectCustomerUsers(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerUsers: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customerUsers")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateCustomerUsers(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerUsers: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customerUsers")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectCustomerUsers(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: CustomerUserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customerUsers: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/elevatorSpareParts")
  @ApiNestedQuery(ElevatorSparePartFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ElevatorSparePart",
    action: "read",
    possession: "any",
  })
  async findElevatorSpareParts(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<ElevatorSparePart[]> {
    const query = plainToClass(ElevatorSparePartFindManyArgs, request.query);
    const results = await this.service.findElevatorSpareParts(params.id, {
      ...query,
      select: {
        createdAt: true,

        elevator: {
          select: {
            id: true,
          },
        },

        id: true,
        price: true,
        updatedAt: true,
        wholeSalePrice: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/elevatorSpareParts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectElevatorSpareParts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: ElevatorSparePartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      elevatorSpareParts: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/elevatorSpareParts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateElevatorSpareParts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: ElevatorSparePartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      elevatorSpareParts: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/elevatorSpareParts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectElevatorSpareParts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: ElevatorSparePartWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      elevatorSpareParts: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/failureReportings")
  @ApiNestedQuery(FailureReportingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<FailureReporting[]> {
    const query = plainToClass(FailureReportingFindManyArgs, request.query);
    const results = await this.service.findFailureReportings(params.id, {
      ...query,
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectFailureReportings(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateFailureReportings(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectFailureReportings(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/installationContracts")
  @ApiNestedQuery(InstallationContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InstallationContract",
    action: "read",
    possession: "any",
  })
  async findInstallationContracts(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<InstallationContract[]> {
    const query = plainToClass(InstallationContractFindManyArgs, request.query);
    const results = await this.service.findInstallationContracts(params.id, {
      ...query,
      select: {
        address: true,
        amount: true,
        cabinetTechnician: true,
        contractDate: true,
        contractNumber: true,

        contractStatusId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        doorTechnician: true,
        electricityTechnician: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        elevatorsCount: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/installationContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectInstallationContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: InstallationContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installationContracts: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/installationContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateInstallationContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: InstallationContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installationContracts: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/installationContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectInstallationContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: InstallationContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installationContracts: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceContracts")
  @ApiNestedQuery(MaintenanceContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<MaintenanceContract[]> {
    const query = plainToClass(MaintenanceContractFindManyArgs, request.query);
    const results = await this.service.findMaintenanceContracts(params.id, {
      ...query,
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceContracts(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceVisits")
  @ApiNestedQuery(MaintenanceVisitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceVisit",
    action: "read",
    possession: "any",
  })
  async findMaintenanceVisits(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<MaintenanceVisit[]> {
    const query = plainToClass(MaintenanceVisitFindManyArgs, request.query);
    const results = await this.service.findMaintenanceVisits(params.id, {
      ...query,
      select: {
        createdAt: true,

        elevator: {
          select: {
            id: true,
          },
        },

        elevatorStatusId: true,
        id: true,
        spareParts: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        visitDate: true,
        visitDocumentImage: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceVisits")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceVisits(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceVisitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceVisits: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceVisits")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceVisits(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceVisitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceVisits: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceVisits")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceVisits(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: MaintenanceVisitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceVisits: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/periodicMaintenanceOrders")
  @ApiNestedQuery(PeriodicMaintenanceOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async findPeriodicMaintenanceOrders(
    @common.Req() request: Request,
    @common.Param() params: ElevatorWhereUniqueInput
  ): Promise<PeriodicMaintenanceOrder[]> {
    const query = plainToClass(
      PeriodicMaintenanceOrderFindManyArgs,
      request.query
    );
    const results = await this.service.findPeriodicMaintenanceOrders(
      params.id,
      {
        ...query,
        select: {
          confirmDate: true,
          contractEndDate: true,
          contractStartDate: true,
          createdAt: true,

          customerElevator: {
            select: {
              id: true,
            },
          },

          customerUserId: {
            select: {
              id: true,
            },
          },

          elevatorId: {
            select: {
              id: true,
            },
          },

          id: true,
          isConfirmed: true,
          orderDate: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async connectPeriodicMaintenanceOrders(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        connect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async updatePeriodicMaintenanceOrders(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        set: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "update",
    possession: "any",
  })
  async disconnectPeriodicMaintenanceOrders(
    @common.Param() params: ElevatorWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        disconnect: body,
      },
    };
    await this.service.updateElevator({
      where: params,
      data,
      select: { id: true },
    });
  }
}
