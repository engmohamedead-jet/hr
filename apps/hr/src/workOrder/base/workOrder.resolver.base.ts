/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkOrder } from "./WorkOrder";
import { WorkOrderCountArgs } from "./WorkOrderCountArgs";
import { WorkOrderFindManyArgs } from "./WorkOrderFindManyArgs";
import { WorkOrderFindUniqueArgs } from "./WorkOrderFindUniqueArgs";
import { CreateWorkOrderArgs } from "./CreateWorkOrderArgs";
import { UpdateWorkOrderArgs } from "./UpdateWorkOrderArgs";
import { DeleteWorkOrderArgs } from "./DeleteWorkOrderArgs";
import { WorkOrderDependencyFindManyArgs } from "../../workOrderDependency/base/WorkOrderDependencyFindManyArgs";
import { WorkOrderDependency } from "../../workOrderDependency/base/WorkOrderDependency";
import { WorkOrderRoutingFindManyArgs } from "../../workOrderRouting/base/WorkOrderRoutingFindManyArgs";
import { WorkOrderRouting } from "../../workOrderRouting/base/WorkOrderRouting";
import { ScrapReason } from "../../scrapReason/base/ScrapReason";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkOrderService } from "../workOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkOrder)
export class WorkOrderResolverBase {
  constructor(
    protected readonly service: WorkOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  async _workOrdersMeta(
    @graphql.Args() args: WorkOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkOrder])
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  async workOrders(
    @graphql.Args() args: WorkOrderFindManyArgs
  ): Promise<WorkOrder[]> {
    return this.service.workOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "own",
  })
  async workOrder(
    @graphql.Args() args: WorkOrderFindUniqueArgs
  ): Promise<WorkOrder | null> {
    const result = await this.service.workOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrder)
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "create",
    possession: "any",
  })
  async createWorkOrder(
    @graphql.Args() args: CreateWorkOrderArgs
  ): Promise<WorkOrder> {
    return await this.service.createWorkOrder({
      ...args,
      data: {
        ...args.data,

        scrapReasonId: args.data.scrapReasonId
          ? {
              connect: args.data.scrapReasonId,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkOrder)
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async updateWorkOrder(
    @graphql.Args() args: UpdateWorkOrderArgs
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.updateWorkOrder({
        ...args,
        data: {
          ...args.data,

          scrapReasonId: args.data.scrapReasonId
            ? {
                connect: args.data.scrapReasonId,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkOrder)
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "delete",
    possession: "any",
  })
  async deleteWorkOrder(
    @graphql.Args() args: DeleteWorkOrderArgs
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.deleteWorkOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderDependency], {
    name: "workOrderBaseDependencies",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async findWorkOrderBaseDependencies(
    @graphql.Parent() parent: WorkOrder,
    @graphql.Args() args: WorkOrderDependencyFindManyArgs
  ): Promise<WorkOrderDependency[]> {
    const results = await this.service.findWorkOrderBaseDependencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderDependency], {
    name: "workOrderDependencies",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async findWorkOrderDependencies(
    @graphql.Parent() parent: WorkOrder,
    @graphql.Args() args: WorkOrderDependencyFindManyArgs
  ): Promise<WorkOrderDependency[]> {
    const results = await this.service.findWorkOrderDependencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderRouting], { name: "workOrderRoutings" })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderRouting",
    action: "read",
    possession: "any",
  })
  async findWorkOrderRoutings(
    @graphql.Parent() parent: WorkOrder,
    @graphql.Args() args: WorkOrderRoutingFindManyArgs
  ): Promise<WorkOrderRouting[]> {
    const results = await this.service.findWorkOrderRoutings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ScrapReason, {
    nullable: true,
    name: "scrapReasonId",
  })
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async getScrapReasonId(
    @graphql.Parent() parent: WorkOrder
  ): Promise<ScrapReason | null> {
    const result = await this.service.getScrapReasonId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkOrder
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
