/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ControlType } from "./ControlType";
import { ControlTypeCountArgs } from "./ControlTypeCountArgs";
import { ControlTypeFindManyArgs } from "./ControlTypeFindManyArgs";
import { ControlTypeFindUniqueArgs } from "./ControlTypeFindUniqueArgs";
import { CreateControlTypeArgs } from "./CreateControlTypeArgs";
import { UpdateControlTypeArgs } from "./UpdateControlTypeArgs";
import { DeleteControlTypeArgs } from "./DeleteControlTypeArgs";
import { ElevatorFindManyArgs } from "../../elevator/base/ElevatorFindManyArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { ControlTypeService } from "../controlType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ControlType)
export class ControlTypeResolverBase {
  constructor(
    protected readonly service: ControlTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "read",
    possession: "any",
  })
  async _controlTypesMeta(
    @graphql.Args() args: ControlTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ControlType])
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "read",
    possession: "any",
  })
  async controlTypes(
    @graphql.Args() args: ControlTypeFindManyArgs
  ): Promise<ControlType[]> {
    return this.service.controlTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ControlType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "read",
    possession: "own",
  })
  async controlType(
    @graphql.Args() args: ControlTypeFindUniqueArgs
  ): Promise<ControlType | null> {
    const result = await this.service.controlType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ControlType)
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "create",
    possession: "any",
  })
  async createControlType(
    @graphql.Args() args: CreateControlTypeArgs
  ): Promise<ControlType> {
    return await this.service.createControlType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ControlType)
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "update",
    possession: "any",
  })
  async updateControlType(
    @graphql.Args() args: UpdateControlTypeArgs
  ): Promise<ControlType | null> {
    try {
      return await this.service.updateControlType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ControlType)
  @nestAccessControl.UseRoles({
    resource: "ControlType",
    action: "delete",
    possession: "any",
  })
  async deleteControlType(
    @graphql.Args() args: DeleteControlTypeArgs
  ): Promise<ControlType | null> {
    try {
      return await this.service.deleteControlType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Elevator], { name: "elevators" })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async findElevators(
    @graphql.Parent() parent: ControlType,
    @graphql.Args() args: ElevatorFindManyArgs
  ): Promise<Elevator[]> {
    const results = await this.service.findElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
