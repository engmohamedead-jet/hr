/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PaymentType as PrismaPaymentType,
  PurchaseReturn as PrismaPurchaseReturn,
  Purchase as PrismaPurchase,
  SaleReturn as PrismaSaleReturn,
  Sale as PrismaSale,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class PaymentTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PaymentTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.paymentType.count(args);
  }

  async paymentTypes(
    args: Prisma.PaymentTypeFindManyArgs
  ): Promise<PrismaPaymentType[]> {
    return this.prisma.paymentType.findMany(args);
  }
  async paymentType(
    args: Prisma.PaymentTypeFindUniqueArgs
  ): Promise<PrismaPaymentType | null> {
    return this.prisma.paymentType.findUnique(args);
  }
  async createPaymentType(
    args: Prisma.PaymentTypeCreateArgs
  ): Promise<PrismaPaymentType> {
    return this.prisma.paymentType.create(args);
  }
  async updatePaymentType(
    args: Prisma.PaymentTypeUpdateArgs
  ): Promise<PrismaPaymentType> {
    return this.prisma.paymentType.update(args);
  }
  async deletePaymentType(
    args: Prisma.PaymentTypeDeleteArgs
  ): Promise<PrismaPaymentType> {
    return this.prisma.paymentType.delete(args);
  }

  async findPurchaseReturns(
    parentId: number,
    args: Prisma.PurchaseReturnFindManyArgs
  ): Promise<PrismaPurchaseReturn[]> {
    return this.prisma.paymentType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturns(args);
  }

  async findPurchases(
    parentId: number,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<PrismaPurchase[]> {
    return this.prisma.paymentType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchases(args);
  }

  async findSaleReturns(
    parentId: number,
    args: Prisma.SaleReturnFindManyArgs
  ): Promise<PrismaSaleReturn[]> {
    return this.prisma.paymentType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturns(args);
  }

  async findSales(
    parentId: number,
    args: Prisma.SaleFindManyArgs
  ): Promise<PrismaSale[]> {
    return this.prisma.paymentType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sales(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.paymentType
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
