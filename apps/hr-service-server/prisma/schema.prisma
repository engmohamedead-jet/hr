datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model EmployeeDepartment {
  code           String?
  createdAt      DateTime   @default(now())
  description    String?
  employees      Employee[]
  id             String     @id @default(cuid())
  isActive       Boolean    @defau1t(1)
  name           String     @unique
  normalizedName String     @unique
  note           String?
  tenantId       Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime   @updatedAt
}

model Employee {
  attendances               Attendance[]
  balance                   Decimal?
  bonusRequests             BonusRequest[]
  checkInOuts               CheckInOut[]
  code                      String?
  createdAt                 DateTime               @default(now())
  dailyMovementRequests     DailyMovementRequest[]
  dayOffRequests            DayOffRequest[]
  employeeDepartmentId      EmployeeDepartment?    @relation(fields: [employeeDepartmentIdId], references: [id])
  employeeDepartmentIdId    String?
  employeeGroup             EmployeeGroup?         @relation(fields: [employeeGroupId], references: [id])
  employeeGroupId           String?
  employeeRoleId            EmployeeRole?          @relation(fields: [employeeRoleIdId], references: [id])
  employeeRoleIdId          String?
  hireDate                  DateTime?
  id                        String                 @id @default(cuid())
  isActive                  Boolean                @default(1)
  jobTitle                  JobTitle?              @relation(fields: [jobTitleId], references: [id])
  jobTitleId                String?
  lastYearBalance           Decimal?
  leavingPermissionRequests LeaveRequest[]
  name                      String
  note                      String?
  overNightRequests         OverNightRequest[]
  remainingBalance          Decimal?
  tenantId                  Tenant?                @relation(fields: [tenantIdId], references: [id])
  tenantIdId                String?
  updatedAt                 DateTime               @updatedAt
  usedBalance               Decimal?
}

model Attendance {
  ApprovedByUserId     User?    @relation(fields: [ApprovedByUserIdId], references: [id])
  ApprovedByUserIdId   String?
  attendanceDate       DateTime
  checkInTime          String?
  checkOutTime         String?
  createdAt            DateTime @default(now())
  employeeId           Employee @relation(fields: [employeeIdId], references: [id])
  employeeIdId         String
  id                   String   @id @default(cuid())
  isActive             Boolean  @default(1)
  isAppreoved          Boolean  @default(0)
  note                 String?
  overtimeHours        String?
  reasonForAbsenteeism String?
  tenantId             Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId           String?
  updatedAt            DateTime @updatedAt
  wasAbsent            String?  @default(0)
  wasPresent           String   @default(1)
}

model JobTitle {
  code           String?
  createdAt      DateTime   @default(now())
  description    String?
  employees      Employee[]
  id             String     @id @default(cuid())
  isActive       Boolean?   @default(1)
  name           String     @unique
  normalizedName String     @unique
  note           String?
  tenantId       Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime   @updatedAt
}

model TenantUser {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  updatedAt DateTime @updatedAt
}

model Tenant {
  attendances                     Attendance[]
  bonusRequests                   BonusRequest[]
  checkInOuts                     CheckInOut[]
  createdAt                       DateTime                         @default(now())
  dailyMovements                  DailyMovementRequest[]
  dayOffs                         DayOffRequest[]
  employeeDepartments             EmployeeDepartment[]
  employeeGroups                  EmployeeGroup[]
  employeeRoles                   EmployeeRole[]
  employees                       Employee[]
  fingerprintMachines             Machine[]
  fiscalMonths                    FiscalMonth[]
  id                              String                           @id @default(cuid())
  jobTitles                       JobTitle[]
  leaveRequestTypes               LeaveRequestType[]
  leaveRequests                   LeaveRequest[]
  overNights                      OverNightRequest[]
  scrapReasons                    ScrapReason[]
  tradingSummaries                TradingSummary[]
  updatedAt                       DateTime                         @updatedAt
  workCenterAlternatives          WorkCenterAlternative[]
  workCenterCapacities            WorkCenterCapacity[]
  workCenterProductivities        WorkCenterProductivity[]
  workCenterProductivityLossTypes WorkCenterProductivityLossType[]
  workCenterProductivityLosses    WorkCenterProductivityLoss[]
  workCenterRoutings              WorkCenterRouting[]
  workCenterTags                  WorkCenterTag[]
  workCenterWorkCenterTags        WorkCenterWorkCenterTag[]
  workCenters                     WorkCenter[]
  workOrderDependencies           WorkOrderDependency[]
  workOrderRoutings               WorkOrderRouting[]
  workOrderStatuses               WorkOrderStatus[]
  workOrders                      WorkOrder[]
  workSheetTypes                  WorkSheetType[]
}

model User {
  attendances    Attendance[]
  bonuses        BonusRequest[]
  checkInOuts    CheckInOut[]
  createdAt      DateTime               @default(now())
  dailyMovements DailyMovementRequest[]
  dayOffs        DayOffRequest[]
  email          String?                @unique
  firstName      String?
  id             String                 @id @default(cuid())
  lastName       String?
  leaveRequests  LeaveRequest[]
  overNights     OverNightRequest[]
  password       String
  roles          Json
  updatedAt      DateTime               @updatedAt
  username       String                 @unique
}

model EmployeeRole {
  code           String?
  createdAt      DateTime   @default(now())
  description    String?
  employees      Employee[]
  id             String     @id @default(cuid())
  isActive       Boolean?   @default(1)
  name           String     @unique
  normalizedName String
  note           String?
  tenantId       Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime   @updatedAt
}

model EmployeeGroup {
  code           String?
  createdAt      DateTime   @default(now())
  descripption   String?
  employees      Employee[]
  id             String     @id @default(cuid())
  isActive       Boolean?   @default(1)
  name           String     @unique
  normalziedName String     @unique
  note           String?
  tenant         Tenant?    @relation(fields: [tenantId], references: [id])
  tenantId       String?
  updatedAt      DateTime   @updatedAt
}

model BonusRequest {
  absent                Decimal?
  actual                Decimal?
  allStoreValue         Decimal?
  annualLeave           Decimal?
  approvedByUserId      User?        @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId    String?
  assistantManager      Decimal?
  createdAt             DateTime     @default(now())
  employee              Employee     @relation(fields: [employeeId], references: [id])
  employeeId            String
  finalAmount           Decimal?
  fiscalMonthId         FiscalMonth? @relation(fields: [fiscalMonthIdId], references: [id])
  fiscalMonthIdId       String?      @unique
  id                    String       @id @default(cuid())
  isActive              Boolean?     @default(1)
  isAppreoved           Boolean      @default(0)
  note                  String?
  penalty               Decimal?
  percentage2           Decimal?
  present               Decimal?
  proratedValue         Decimal?
  sales                 Decimal?
  salesStaff            Decimal?
  salesTargetPercentage Decimal?
  shopManager           Decimal?
  sickLeave             Decimal?
  target                Decimal?
  tenantId              Tenant?      @relation(fields: [tenantIdId], references: [id])
  tenantIdId            String?
  updatedAt             DateTime     @updatedAt
  warning               Decimal?
}

model Machine {
  checkInOuts    CheckInOut[]
  code           String?
  createdAt      DateTime     @default(now())
  id             String       @id @default(cuid())
  ip             String?
  isAndroid      Boolean      @default(0)
  name           String       @unique
  normalizedName String       @unique
  note           String?
  tenantId       Tenant?      @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime     @updatedAt
}

model CheckInOut {
  approvedByUserId   User?                   @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId String?
  checkDate          DateTime
  checkTime          DateTime
  checkType          EnumCheckInOutCheckType
  createdAt          DateTime                @default(now())
  employee           Employee                @relation(fields: [employeeId], references: [id])
  employeeId         String
  id                 String                  @id @default(cuid())
  isActive           Boolean                 @default(1)
  isAppreoved        Boolean                 @default(0)
  machine            Machine                 @relation(fields: [machineId], references: [id])
  machineId          String
  note               String?
  tenantId           Tenant?                 @relation(fields: [tenantIdId], references: [id])
  tenantIdId         String?
  updatedAt          DateTime                @updatedAt
}

model DailyMovementRequest {
  approvedByUserId   User?    @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId String?
  createdAt          DateTime @default(now())
  employeeId         Employee @relation(fields: [employeeIdId], references: [id])
  employeeIdId       String
  id                 String   @id @default(cuid())
  isActive           Boolean  @default(1)
  isAppreoved        Boolean  @default(0)
  movementDate       DateTime
  note               String?
  reason             String?
  tenantId           Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId         String?
  totalHours         Decimal?
  updatedAt          DateTime @updatedAt
}

model DayOffRequest {
  approvedByUserId   User?    @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId String?
  createdAt          DateTime @default(now())
  dayOffDate         DateTime
  employeeId         Employee @relation(fields: [employeeIdId], references: [id])
  employeeIdId       String
  id                 String   @id @default(cuid())
  isActive           Boolean  @default(1)
  isAppreoved        Boolean  @default(0)
  note               String?
  tenantId           Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId         String?
  updatedAt          DateTime @updatedAt
}

model LeaveRequest {
  LeaveDate            DateTime
  approvedByUserId     User?            @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId   String?
  cause                String?
  createdAt            DateTime         @default(now())
  employee             Employee         @relation(fields: [employeeId], references: [id])
  employeeId           String
  id                   String           @id @default(cuid())
  isActive             Boolean          @default(1)
  isAppreoved          Boolean          @default(0)
  leaveRequestTypeId   LeaveRequestType @relation(fields: [leaveRequestTypeIdId], references: [id])
  leaveRequestTypeIdId String
  note                 String?
  tenantId             Tenant?          @relation(fields: [tenantIdId], references: [id])
  tenantIdId           String?
  updatedAt            DateTime         @updatedAt
}

model LeaveRequestType {
  code               String?
  createdAt          DateTime       @default(now())
  description        String?
  id                 String         @id @default(cuid())
  isActive           Boolean?
  leavingPermissions LeaveRequest[]
  name               String?
  normalizedName     String?
  note               String?
  tenantId           Tenant?        @relation(fields: [tenantIdId], references: [id])
  tenantIdId         String?
  updatedAt          DateTime       @updatedAt
}

model OverNightRequest {
  approvedByUserId   User?    @relation(fields: [approvedByUserIdId], references: [id])
  approvedByUserIdId String?
  createdAt          DateTime @default(now())
  employeeId         Employee @relation(fields: [employeeIdId], references: [id])
  employeeIdId       String
  endDateTime        DateTime
  id                 String   @id @default(cuid())
  isActive           Boolean  @default(1)
  isAppreoved        Boolean  @default(0)
  note               String?
  startDateTime      DateTime
  tenantId           Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId         String?
  updatedAt          DateTime @updatedAt
}

model FiscalMonth {
  bonusRequests  BonusRequest?
  code           String?
  createdAt      DateTime      @default(now())
  endsOn         DateTime
  id             String        @id @default(cuid())
  isActive       Boolean       @default(1)
  name           String        @unique
  normalizedName String        @unique
  note           String?
  startsFrom     DateTime
  tenantId       Tenant?       @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime      @updatedAt
}

model TradingSummary {
  createdAt         DateTime @default(now())
  fiscalWeekId      String?
  id                String   @id @default(cuid())
  isActive          Boolean  @default(1)
  note              String?
  partyId           String?
  price             Decimal
  priceTotal        Decimal
  productId         String
  productVariantId  String?
  quantity          Decimal
  tenantId          Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId        String?
  transactionDate   DateTime
  transactionTypeId String?
  unitId            String
  updatedAt         DateTime @updatedAt
}

model WorkCenter {
  analyticDistribution             String?
  code                             String?
  color                            Int?
  costPerHour                      Decimal?
  createdAt                        DateTime                     @default(now())
  defaultCapacity                  Decimal?
  id                               String                       @id @default(cuid())
  isActive                         Boolean                      @default(1)
  isProductive                     Boolean                      @default(0)
  name                             String                       @unique
  normalizedName                   String                       @unique
  note                             String?
  oeeTareget                       Decimal?
  sequence                         Int
  startTime                        Decimal?
  stopTime                         Decimal?
  tenantId                         Tenant?                      @relation(fields: [tenantIdId], references: [id])
  tenantIdId                       String?
  timeEfficiency                   Decimal?
  updatedAt                        DateTime                     @updatedAt
  workCenterAlternativeWorkCenters WorkCenterAlternative[]      @relation(name: "workCenterAlternativeWorkCenters")
  workCenterAlternatives           WorkCenterAlternative[]      @relation(name: "alternativeWorkCenterId")
  workCenterCapacities             WorkCenterCapacity[]
  workCenterProductivities         WorkCenterProductivity[]
  workCenterProductivityLosses     WorkCenterProductivityLoss[]
  workCenterRoutings               WorkCenterRouting[]
  workCenterWorkCenterTags         WorkCenterWorkCenterTag[]
}

model WorkCenterAlternative {
  alternativeWorkCenterId   WorkCenter @relation(name: "alternativeWorkCenterId", fields: [alternativeWorkCenterIdId], references: [id])
  alternativeWorkCenterIdId String
  createdAt                 DateTime   @default(now())
  id                        String     @id @default(cuid())
  isActive                  Boolean?
  note                      String?
  tenantId                  Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId                String?
  updatedAt                 DateTime   @updatedAt
  workCenterId              WorkCenter @relation(name: "workCenterAlternativeWorkCenters", fields: [workCenterIdId], references: [id])
  workCenterIdId            String
}

model WorkCenterCapacity {
  capacity       Decimal
  createdAt      DateTime   @default(now())
  id             String     @id @default(cuid())
  isActive       Boolean    @default(1)
  note           String?
  startTime      Decimal?
  stopTime       Decimal?
  tenantId       Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime   @updatedAt
  workCenterId   WorkCenter @relation(fields: [workCenterIdId], references: [id])
  workCenterIdId String
}

model WorkCenterProductivity {
  createdAt      DateTime    @default(now())
  description    String?
  duration       Decimal?
  endDate        DateTime?
  id             String      @id @default(cuid())
  isActive       Boolean     @default(1)
  note           String?
  startDate      DateTime?
  tenantId       Tenant?     @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime    @updatedAt
  workCenterId   WorkCenter? @relation(fields: [workCenterIdId], references: [id])
  workCenterIdId String?
}

model WorkCenterProductivityLoss {
  code                              String?
  createdAt                         DateTime                                @default(now())
  id                                String                                  @id @default(cuid())
  isActive                          Boolean                                 @default(1)
  isManual                          Boolean                                 @default(0)
  lossType                          EnumWorkCenterProductivityLossLossType? @Availability
  name                              String                                  @unique
  normalizedName                    String                                  @unique
  note                              String?
  sequence                          Int?
  tenantId                          Tenant?                                 @relation(fields: [tenantIdId], references: [id])
  tenantIdId                        String?
  updatedAt                         DateTime                                @updatedAt
  workCenterId                      WorkCenter?                             @relation(fields: [workCenterIdId], references: [id])
  workCenterIdId                    String?
  workCenterProductivityLossTypeI   WorkCenterProductivityLossType          @relation(fields: [workCenterProductivityLossTypeIId], references: [id])
  workCenterProductivityLossTypeIId Int
}

model WorkCenterProductivityLossType {
  code                         String?
  createdAt                    DateTime                     @default(now())
  description                  String?
  id                           Int                          @id @default(autoincrement())
  isActive                     Boolean                      @default(1)
  name                         String                       @unique
  normalizedName               String                       @unique
  note                         String?
  tenantId                     Tenant?                      @relation(fields: [tenantIdId], references: [id])
  tenantIdId                   String?
  updatedAt                    DateTime                     @updatedAt
  workCenterProductivityLosses WorkCenterProductivityLoss[]
}

model WorkCenterRouting {
  billOfMaterialId String?
  code             String?
  createdAt        DateTime   @default(now())
  id               String     @id @default(cuid())
  isActive         Boolean    @default(1)
  name             String     @unique
  normalizedName   String     @unique
  note             String?
  sequence         Int
  tenant           Tenant?    @relation(fields: [tenantId], references: [id])
  tenantId         String?
  timeCycleManual  Decimal?
  timeModeBatch    Int?
  updatedAt        DateTime   @updatedAt
  workCenterId     WorkCenter @relation(fields: [workCenterIdId], references: [id])
  workCenterIdId   String
}

model WorkCenterTag {
  Desciption               String?
  code                     String?
  color                    Int?
  createdAt                DateTime                  @default(now())
  id                       String                    @id @default(cuid())
  isActive                 Boolean                   @default(1)
  name                     String                    @unique
  normalizedName           String                    @unique
  note                     String?
  tenantId                 Tenant?                   @relation(fields: [tenantIdId], references: [id])
  tenantIdId               String?
  updatedAt                DateTime                  @updatedAt
  workCenterWorkCenterTags WorkCenterWorkCenterTag[]
}

model WorkCenterWorkCenterTag {
  createdAt         DateTime      @default(now())
  id                String        @id @default(cuid())
  isActive          Boolean       @default(1)
  note              String?
  tenantId          Tenant?       @relation(fields: [tenantIdId], references: [id])
  tenantIdId        String?
  updatedAt         DateTime      @updatedAt
  workCenter        WorkCenter    @relation(fields: [workCenterId], references: [id])
  workCenterId      String
  workCenterTagId   WorkCenterTag @relation(fields: [workCenterTagIdId], references: [id])
  workCenterTagIdId String
}

model WorkSheetType {
  code           String?
  createdAt      DateTime @default(now())
  id             String   @id @default(cuid())
  isActive       Boolean  @default(1)
  name           String   @unique
  normalizedName String
  note           String?
  tenant         Tenant?  @relation(fields: [tenantId], references: [id])
  tenantId       String?
  updatedAt      DateTime @updatedAt
}

model WorkOrderStatus {
  code           String?
  createdAt      DateTime @default(now())
  id             Int      @id @default(autoincrement())
  isActive       Boolean? @default(1)
  name           String   @unique
  normalizedName String   @unique
  note           String?
  tenantId       Tenant?  @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime @updatedAt
}

model WorkOrder {
  barcode                                String?
  code                                   String?
  costsPerHour                           Decimal?
  createdAt                              DateTime              @default(now())
  duaration                              Decimal?
  duarationExpected                      Decimal?
  duarationPercent                       Decimal?
  duarationUnit                          Decimal?
  dueDate                                DateTime?
  endDate                                DateTime?
  id                                     String                @id @default(cuid())
  isActive                               Boolean               @default(1)
  name                                   String                @unique
  normalizedName                         String                @unique
  note                                   String?
  orderQuantity                          Decimal?
  productionDate                         DateTime?
  quantityProduced                       Decimal?
  quantityReportedFromPreviouseWorkOrder Decimal?
  scrapReasonId                          ScrapReason?          @relation(fields: [scrapReasonIdId], references: [id])
  scrapReasonIdId                        Int?
  scrappedQuantity                       Decimal?
  startDate                              DateTime?
  stockQuantity                          Decimal?
  tenantId                               Tenant?               @relation(fields: [tenantIdId], references: [id])
  tenantIdId                             String?
  updatedAt                              DateTime              @updatedAt
  workOrderBaseDependencies              WorkOrderDependency[] @relation(name: "workOrderBaseDependencies")
  workOrderDependencies                  WorkOrderDependency[] @relation(name: "blockedByWorkOrderId")
  workOrderRoutings                      WorkOrderRouting[]
}

model ScrapReason {
  code           String?
  createdAt      DateTime    @default(now())
  description    String?
  id             Int         @id @default(autoincrement())
  isActive       Boolean     @default(1)
  name           String      @unique
  normalizedName String      @unique
  note           String?
  tenantId       Tenant?     @relation(fields: [tenantIdId], references: [id])
  tenantIdId     String?
  updatedAt      DateTime    @updatedAt
  workOrders     WorkOrder[]
}

model WorkOrderRouting {
  actualCost          Decimal?
  actualEndDate       DateTime?
  actualResourceHours Decimal?
  actualStartDate     DateTime?
  createdAt           DateTime  @default(now())
  id                  String    @id @default(cuid())
  isActive            Boolean?  @default(1)
  note                String?
  plannedCost         Decimal?
  scheduledEndDate    DateTime?
  scheduledStartDate  DateTime?
  sequence            Int?
  tenantId            Tenant?   @relation(fields: [tenantIdId], references: [id])
  tenantIdId          String?
  updatedAt           DateTime  @updatedAt
  workOrderId         WorkOrder @relation(fields: [workOrderIdId], references: [id])
  workOrderIdId       String
}

model WorkOrderDependency {
  blockedByWorkOrderId   WorkOrder  @relation(name: "blockedByWorkOrderId", fields: [blockedByWorkOrderIdId], references: [id])
  blockedByWorkOrderIdId String
  createdAt              DateTime   @default(now())
  id                     String     @id @default(cuid())
  isActive               Boolean    @default(1)
  note                   String?
  tenantId               Tenant?    @relation(fields: [tenantIdId], references: [id])
  tenantIdId             String?
  updatedAt              DateTime   @updatedAt
  workOrderId            WorkOrder? @relation(name: "workOrderBaseDependencies", fields: [workOrderIdId], references: [id])
  workOrderIdId          String?
}

enum EnumCheckInOutCheckType {
  In
  Out
}

enum EnumWorkCenterProductivityLossLossType {
  Availability
  Perfomance
  Quality
  Productive
}
