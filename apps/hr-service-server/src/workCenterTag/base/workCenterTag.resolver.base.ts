/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkCenterTag } from "./WorkCenterTag";
import { WorkCenterTagCountArgs } from "./WorkCenterTagCountArgs";
import { WorkCenterTagFindManyArgs } from "./WorkCenterTagFindManyArgs";
import { WorkCenterTagFindUniqueArgs } from "./WorkCenterTagFindUniqueArgs";
import { CreateWorkCenterTagArgs } from "./CreateWorkCenterTagArgs";
import { UpdateWorkCenterTagArgs } from "./UpdateWorkCenterTagArgs";
import { DeleteWorkCenterTagArgs } from "./DeleteWorkCenterTagArgs";
import { WorkCenterWorkCenterTagFindManyArgs } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTagFindManyArgs";
import { WorkCenterWorkCenterTag } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTag";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkCenterTagService } from "../workCenterTag.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkCenterTag)
export class WorkCenterTagResolverBase {
  constructor(
    protected readonly service: WorkCenterTagService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "any",
  })
  async _workCenterTagsMeta(
    @graphql.Args() args: WorkCenterTagCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkCenterTag])
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "any",
  })
  async workCenterTags(
    @graphql.Args() args: WorkCenterTagFindManyArgs
  ): Promise<WorkCenterTag[]> {
    return this.service.workCenterTags(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkCenterTag, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "own",
  })
  async workCenterTag(
    @graphql.Args() args: WorkCenterTagFindUniqueArgs
  ): Promise<WorkCenterTag | null> {
    const result = await this.service.workCenterTag(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterTag)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "create",
    possession: "any",
  })
  async createWorkCenterTag(
    @graphql.Args() args: CreateWorkCenterTagArgs
  ): Promise<WorkCenterTag> {
    return await this.service.createWorkCenterTag({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterTag)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "update",
    possession: "any",
  })
  async updateWorkCenterTag(
    @graphql.Args() args: UpdateWorkCenterTagArgs
  ): Promise<WorkCenterTag | null> {
    try {
      return await this.service.updateWorkCenterTag({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkCenterTag)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "delete",
    possession: "any",
  })
  async deleteWorkCenterTag(
    @graphql.Args() args: DeleteWorkCenterTagArgs
  ): Promise<WorkCenterTag | null> {
    try {
      return await this.service.deleteWorkCenterTag(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterWorkCenterTag], {
    name: "workCenterWorkCenterTags",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterWorkCenterTag",
    action: "read",
    possession: "any",
  })
  async findWorkCenterWorkCenterTags(
    @graphql.Parent() parent: WorkCenterTag,
    @graphql.Args() args: WorkCenterWorkCenterTagFindManyArgs
  ): Promise<WorkCenterWorkCenterTag[]> {
    const results = await this.service.findWorkCenterWorkCenterTags(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkCenterTag
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
