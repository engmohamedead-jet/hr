/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BonusRequest } from "./BonusRequest";
import { BonusRequestCountArgs } from "./BonusRequestCountArgs";
import { BonusRequestFindManyArgs } from "./BonusRequestFindManyArgs";
import { BonusRequestFindUniqueArgs } from "./BonusRequestFindUniqueArgs";
import { CreateBonusRequestArgs } from "./CreateBonusRequestArgs";
import { UpdateBonusRequestArgs } from "./UpdateBonusRequestArgs";
import { DeleteBonusRequestArgs } from "./DeleteBonusRequestArgs";
import { User } from "../../user/base/User";
import { Employee } from "../../employee/base/Employee";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { Tenant } from "../../tenant/base/Tenant";
import { BonusRequestService } from "../bonusRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BonusRequest)
export class BonusRequestResolverBase {
  constructor(
    protected readonly service: BonusRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "any",
  })
  async _bonusRequestsMeta(
    @graphql.Args() args: BonusRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BonusRequest])
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "any",
  })
  async bonusRequests(
    @graphql.Args() args: BonusRequestFindManyArgs
  ): Promise<BonusRequest[]> {
    return this.service.bonusRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BonusRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "own",
  })
  async bonusRequest(
    @graphql.Args() args: BonusRequestFindUniqueArgs
  ): Promise<BonusRequest | null> {
    const result = await this.service.bonusRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BonusRequest)
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "create",
    possession: "any",
  })
  async createBonusRequest(
    @graphql.Args() args: CreateBonusRequestArgs
  ): Promise<BonusRequest> {
    return await this.service.createBonusRequest({
      ...args,
      data: {
        ...args.data,

        approvedByUserId: args.data.approvedByUserId
          ? {
              connect: args.data.approvedByUserId,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        fiscalMonthId: args.data.fiscalMonthId
          ? {
              connect: args.data.fiscalMonthId,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BonusRequest)
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "update",
    possession: "any",
  })
  async updateBonusRequest(
    @graphql.Args() args: UpdateBonusRequestArgs
  ): Promise<BonusRequest | null> {
    try {
      return await this.service.updateBonusRequest({
        ...args,
        data: {
          ...args.data,

          approvedByUserId: args.data.approvedByUserId
            ? {
                connect: args.data.approvedByUserId,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          fiscalMonthId: args.data.fiscalMonthId
            ? {
                connect: args.data.fiscalMonthId,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BonusRequest)
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "delete",
    possession: "any",
  })
  async deleteBonusRequest(
    @graphql.Args() args: DeleteBonusRequestArgs
  ): Promise<BonusRequest | null> {
    try {
      return await this.service.deleteBonusRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "approvedByUserId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getApprovedByUserId(
    @graphql.Parent() parent: BonusRequest
  ): Promise<User | null> {
    const result = await this.service.getApprovedByUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: BonusRequest
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FiscalMonth, {
    nullable: true,
    name: "fiscalMonthId",
  })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async getFiscalMonthId(
    @graphql.Parent() parent: BonusRequest
  ): Promise<FiscalMonth | null> {
    const result = await this.service.getFiscalMonthId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: BonusRequest
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
