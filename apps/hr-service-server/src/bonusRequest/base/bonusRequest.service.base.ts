/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BonusRequest as PrismaBonusRequest,
  User as PrismaUser,
  Employee as PrismaEmployee,
  FiscalMonth as PrismaFiscalMonth,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class BonusRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BonusRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bonusRequest.count(args);
  }

  async bonusRequests(
    args: Prisma.BonusRequestFindManyArgs
  ): Promise<PrismaBonusRequest[]> {
    return this.prisma.bonusRequest.findMany(args);
  }
  async bonusRequest(
    args: Prisma.BonusRequestFindUniqueArgs
  ): Promise<PrismaBonusRequest | null> {
    return this.prisma.bonusRequest.findUnique(args);
  }
  async createBonusRequest(
    args: Prisma.BonusRequestCreateArgs
  ): Promise<PrismaBonusRequest> {
    return this.prisma.bonusRequest.create(args);
  }
  async updateBonusRequest(
    args: Prisma.BonusRequestUpdateArgs
  ): Promise<PrismaBonusRequest> {
    return this.prisma.bonusRequest.update(args);
  }
  async deleteBonusRequest(
    args: Prisma.BonusRequestDeleteArgs
  ): Promise<PrismaBonusRequest> {
    return this.prisma.bonusRequest.delete(args);
  }

  async getApprovedByUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.bonusRequest
      .findUnique({
        where: { id: parentId },
      })
      .approvedByUserId();
  }

  async getEmployee(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.bonusRequest
      .findUnique({
        where: { id: parentId },
      })
      .employee();
  }

  async getFiscalMonthId(parentId: string): Promise<PrismaFiscalMonth | null> {
    return this.prisma.bonusRequest
      .findUnique({
        where: { id: parentId },
      })
      .fiscalMonthId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.bonusRequest
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
