/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleDetail } from "./SaleDetail";
import { SaleDetailCountArgs } from "./SaleDetailCountArgs";
import { SaleDetailFindManyArgs } from "./SaleDetailFindManyArgs";
import { SaleDetailFindUniqueArgs } from "./SaleDetailFindUniqueArgs";
import { CreateSaleDetailArgs } from "./CreateSaleDetailArgs";
import { UpdateSaleDetailArgs } from "./UpdateSaleDetailArgs";
import { DeleteSaleDetailArgs } from "./DeleteSaleDetailArgs";
import { Product } from "../../product/base/Product";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { Sale } from "../../sale/base/Sale";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { Tenant } from "../../tenant/base/Tenant";
import { Unit } from "../../unit/base/Unit";
import { SaleDetailService } from "../saleDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleDetail)
export class SaleDetailResolverBase {
  constructor(
    protected readonly service: SaleDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async _saleDetailsMeta(
    @graphql.Args() args: SaleDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleDetail])
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async saleDetails(
    @graphql.Args() args: SaleDetailFindManyArgs
  ): Promise<SaleDetail[]> {
    return this.service.saleDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "own",
  })
  async saleDetail(
    @graphql.Args() args: SaleDetailFindUniqueArgs
  ): Promise<SaleDetail | null> {
    const result = await this.service.saleDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "create",
    possession: "any",
  })
  async createSaleDetail(
    @graphql.Args() args: CreateSaleDetailArgs
  ): Promise<SaleDetail> {
    return await this.service.createSaleDetail({
      ...args,
      data: {
        ...args.data,

        productId: {
          connect: args.data.productId,
        },

        productVariantId: args.data.productVariantId
          ? {
              connect: args.data.productVariantId,
            }
          : undefined,

        saleId: {
          connect: args.data.saleId,
        },

        salePriceTypeId: {
          connect: args.data.salePriceTypeId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        unitId: {
          connect: args.data.unitId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "update",
    possession: "any",
  })
  async updateSaleDetail(
    @graphql.Args() args: UpdateSaleDetailArgs
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.updateSaleDetail({
        ...args,
        data: {
          ...args.data,

          productId: {
            connect: args.data.productId,
          },

          productVariantId: args.data.productVariantId
            ? {
                connect: args.data.productVariantId,
              }
            : undefined,

          saleId: {
            connect: args.data.saleId,
          },

          salePriceTypeId: {
            connect: args.data.salePriceTypeId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          unitId: {
            connect: args.data.unitId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleDetail)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "delete",
    possession: "any",
  })
  async deleteSaleDetail(
    @graphql.Args() args: DeleteSaleDetailArgs
  ): Promise<SaleDetail | null> {
    try {
      return await this.service.deleteSaleDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: SaleDetail
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => ProductVariant, {
    nullable: true,
    name: "productVariantId",
  })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async getProductVariantId(
    @graphql.Parent() parent: SaleDetail
  ): Promise<ProductVariant | null> {
    const result = await this.service.getProductVariantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sale, {
    nullable: true,
    name: "saleId",
  })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async getSaleId(@graphql.Parent() parent: SaleDetail): Promise<Sale | null> {
    const result = await this.service.getSaleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalePriceType, {
    nullable: true,
    name: "salePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async getSalePriceTypeId(
    @graphql.Parent() parent: SaleDetail
  ): Promise<SalePriceType | null> {
    const result = await this.service.getSalePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: SaleDetail
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(@graphql.Parent() parent: SaleDetail): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
