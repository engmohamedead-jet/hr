/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeDepartment } from "./EmployeeDepartment";
import { EmployeeDepartmentCountArgs } from "./EmployeeDepartmentCountArgs";
import { EmployeeDepartmentFindManyArgs } from "./EmployeeDepartmentFindManyArgs";
import { EmployeeDepartmentFindUniqueArgs } from "./EmployeeDepartmentFindUniqueArgs";
import { CreateEmployeeDepartmentArgs } from "./CreateEmployeeDepartmentArgs";
import { UpdateEmployeeDepartmentArgs } from "./UpdateEmployeeDepartmentArgs";
import { DeleteEmployeeDepartmentArgs } from "./DeleteEmployeeDepartmentArgs";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeDepartmentService } from "../employeeDepartment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeDepartment)
export class EmployeeDepartmentResolverBase {
  constructor(
    protected readonly service: EmployeeDepartmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async _employeeDepartmentsMeta(
    @graphql.Args() args: EmployeeDepartmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeDepartment])
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async employeeDepartments(
    @graphql.Args() args: EmployeeDepartmentFindManyArgs
  ): Promise<EmployeeDepartment[]> {
    return this.service.employeeDepartments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeDepartment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "own",
  })
  async employeeDepartment(
    @graphql.Args() args: EmployeeDepartmentFindUniqueArgs
  ): Promise<EmployeeDepartment | null> {
    const result = await this.service.employeeDepartment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeDepartment)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "create",
    possession: "any",
  })
  async createEmployeeDepartment(
    @graphql.Args() args: CreateEmployeeDepartmentArgs
  ): Promise<EmployeeDepartment> {
    return await this.service.createEmployeeDepartment({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeDepartment)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "update",
    possession: "any",
  })
  async updateEmployeeDepartment(
    @graphql.Args() args: UpdateEmployeeDepartmentArgs
  ): Promise<EmployeeDepartment | null> {
    try {
      return await this.service.updateEmployeeDepartment({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeDepartment)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeDepartment(
    @graphql.Args() args: DeleteEmployeeDepartmentArgs
  ): Promise<EmployeeDepartment | null> {
    try {
      return await this.service.deleteEmployeeDepartment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: EmployeeDepartment,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: EmployeeDepartment
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
