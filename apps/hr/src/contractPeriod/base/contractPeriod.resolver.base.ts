/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContractPeriod } from "./ContractPeriod";
import { ContractPeriodCountArgs } from "./ContractPeriodCountArgs";
import { ContractPeriodFindManyArgs } from "./ContractPeriodFindManyArgs";
import { ContractPeriodFindUniqueArgs } from "./ContractPeriodFindUniqueArgs";
import { CreateContractPeriodArgs } from "./CreateContractPeriodArgs";
import { UpdateContractPeriodArgs } from "./UpdateContractPeriodArgs";
import { DeleteContractPeriodArgs } from "./DeleteContractPeriodArgs";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { ContractPeriodService } from "../contractPeriod.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContractPeriod)
export class ContractPeriodResolverBase {
  constructor(
    protected readonly service: ContractPeriodService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "read",
    possession: "any",
  })
  async _contractPeriodsMeta(
    @graphql.Args() args: ContractPeriodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContractPeriod])
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "read",
    possession: "any",
  })
  async contractPeriods(
    @graphql.Args() args: ContractPeriodFindManyArgs
  ): Promise<ContractPeriod[]> {
    return this.service.contractPeriods(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContractPeriod, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "read",
    possession: "own",
  })
  async contractPeriod(
    @graphql.Args() args: ContractPeriodFindUniqueArgs
  ): Promise<ContractPeriod | null> {
    const result = await this.service.contractPeriod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContractPeriod)
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "create",
    possession: "any",
  })
  async createContractPeriod(
    @graphql.Args() args: CreateContractPeriodArgs
  ): Promise<ContractPeriod> {
    return await this.service.createContractPeriod({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContractPeriod)
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "update",
    possession: "any",
  })
  async updateContractPeriod(
    @graphql.Args() args: UpdateContractPeriodArgs
  ): Promise<ContractPeriod | null> {
    try {
      return await this.service.updateContractPeriod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContractPeriod)
  @nestAccessControl.UseRoles({
    resource: "ContractPeriod",
    action: "delete",
    possession: "any",
  })
  async deleteContractPeriod(
    @graphql.Args() args: DeleteContractPeriodArgs
  ): Promise<ContractPeriod | null> {
    try {
      return await this.service.deleteContractPeriod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceContract], {
    name: "maintenanceContracts",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @graphql.Parent() parent: ContractPeriod,
    @graphql.Args() args: MaintenanceContractFindManyArgs
  ): Promise<MaintenanceContract[]> {
    const results = await this.service.findMaintenanceContracts(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
