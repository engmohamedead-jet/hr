/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";

import {
  ValidateNested,
  IsOptional,
  IsNumber,
  Max,
  IsDate,
  IsString,
  IsBoolean,
  MaxLength,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { Currency } from "../../currency/base/Currency";
import { Employee } from "../../employee/base/Employee";
import { ExpenseItem } from "../../expenseItem/base/ExpenseItem";
import { Supplier } from "../../supplier/base/Supplier";
import { Tenant } from "../../tenant/base/Tenant";
import { VoucherType } from "../../voucherType/base/VoucherType";

@ObjectType()
class PaymentVoucher {
  @ApiProperty({
    required: false,
    type: () => AccountTransaction,
  })
  @ValidateNested()
  @Type(() => AccountTransaction)
  @IsOptional()
  accountTransactionId?: AccountTransaction | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  amount!: Decimal | null;

  @ApiProperty({
    required: true,
    type: () => CashRepository,
  })
  @ValidateNested()
  @Type(() => CashRepository)
  cashRepositoryId?: CashRepository;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
    type: () => Currency,
  })
  @ValidateNested()
  @Type(() => Currency)
  currency?: Currency;

  @ApiProperty({
    required: false,
    type: () => Employee,
  })
  @ValidateNested()
  @Type(() => Employee)
  @IsOptional()
  employeeId?: Employee | null;

  @ApiProperty({
    required: false,
    type: () => ExpenseItem,
  })
  @ValidateNested()
  @Type(() => ExpenseItem)
  @IsOptional()
  expenseItemId?: ExpenseItem | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  paymentVoucherDate!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  statementReference!: string | null;

  @ApiProperty({
    required: false,
    type: () => Supplier,
  })
  @ValidateNested()
  @Type(() => Supplier)
  @IsOptional()
  supplier?: Supplier | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantId?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => VoucherType,
  })
  @ValidateNested()
  @Type(() => VoucherType)
  @IsOptional()
  voucherTypeId?: VoucherType | null;
}

export { PaymentVoucher as PaymentVoucher };
