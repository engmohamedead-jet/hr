/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InstallmentSaleFee } from "./InstallmentSaleFee";
import { InstallmentSaleFeeCountArgs } from "./InstallmentSaleFeeCountArgs";
import { InstallmentSaleFeeFindManyArgs } from "./InstallmentSaleFeeFindManyArgs";
import { InstallmentSaleFeeFindUniqueArgs } from "./InstallmentSaleFeeFindUniqueArgs";
import { CreateInstallmentSaleFeeArgs } from "./CreateInstallmentSaleFeeArgs";
import { UpdateInstallmentSaleFeeArgs } from "./UpdateInstallmentSaleFeeArgs";
import { DeleteInstallmentSaleFeeArgs } from "./DeleteInstallmentSaleFeeArgs";
import { PaymentTermFindManyArgs } from "../../paymentTerm/base/PaymentTermFindManyArgs";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { Account } from "../../account/base/Account";
import { InstallmentSaleFeeService } from "../installmentSaleFee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InstallmentSaleFee)
export class InstallmentSaleFeeResolverBase {
  constructor(
    protected readonly service: InstallmentSaleFeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async _installmentSaleFeesMeta(
    @graphql.Args() args: InstallmentSaleFeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InstallmentSaleFee])
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async installmentSaleFees(
    @graphql.Args() args: InstallmentSaleFeeFindManyArgs
  ): Promise<InstallmentSaleFee[]> {
    return this.service.installmentSaleFees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InstallmentSaleFee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "own",
  })
  async installmentSaleFee(
    @graphql.Args() args: InstallmentSaleFeeFindUniqueArgs
  ): Promise<InstallmentSaleFee | null> {
    const result = await this.service.installmentSaleFee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstallmentSaleFee)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "create",
    possession: "any",
  })
  async createInstallmentSaleFee(
    @graphql.Args() args: CreateInstallmentSaleFeeArgs
  ): Promise<InstallmentSaleFee> {
    return await this.service.createInstallmentSaleFee({
      ...args,
      data: {
        ...args.data,

        account: args.data.account
          ? {
              connect: args.data.account,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InstallmentSaleFee)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "update",
    possession: "any",
  })
  async updateInstallmentSaleFee(
    @graphql.Args() args: UpdateInstallmentSaleFeeArgs
  ): Promise<InstallmentSaleFee | null> {
    try {
      return await this.service.updateInstallmentSaleFee({
        ...args,
        data: {
          ...args.data,

          account: args.data.account
            ? {
                connect: args.data.account,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InstallmentSaleFee)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "delete",
    possession: "any",
  })
  async deleteInstallmentSaleFee(
    @graphql.Args() args: DeleteInstallmentSaleFeeArgs
  ): Promise<InstallmentSaleFee | null> {
    try {
      return await this.service.deleteInstallmentSaleFee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PaymentTerm], { name: "paymentTerms" })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async findPaymentTerms(
    @graphql.Parent() parent: InstallmentSaleFee,
    @graphql.Args() args: PaymentTermFindManyArgs
  ): Promise<PaymentTerm[]> {
    const results = await this.service.findPaymentTerms(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Account, {
    nullable: true,
    name: "account",
  })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async getAccount(
    @graphql.Parent() parent: InstallmentSaleFee
  ): Promise<Account | null> {
    const result = await this.service.getAccount(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
