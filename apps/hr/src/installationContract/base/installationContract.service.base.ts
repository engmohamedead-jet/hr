/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InstallationContract as PrismaInstallationContract,
  ContractStatus as PrismaContractStatus,
  CustomerElevator as PrismaCustomerElevator,
  Elevator as PrismaElevator,
} from "@prisma/client";

export class InstallationContractServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstallationContractCountArgs, "select">
  ): Promise<number> {
    return this.prisma.installationContract.count(args);
  }

  async installationContracts(
    args: Prisma.InstallationContractFindManyArgs
  ): Promise<PrismaInstallationContract[]> {
    return this.prisma.installationContract.findMany(args);
  }
  async installationContract(
    args: Prisma.InstallationContractFindUniqueArgs
  ): Promise<PrismaInstallationContract | null> {
    return this.prisma.installationContract.findUnique(args);
  }
  async createInstallationContract(
    args: Prisma.InstallationContractCreateArgs
  ): Promise<PrismaInstallationContract> {
    return this.prisma.installationContract.create(args);
  }
  async updateInstallationContract(
    args: Prisma.InstallationContractUpdateArgs
  ): Promise<PrismaInstallationContract> {
    return this.prisma.installationContract.update(args);
  }
  async deleteInstallationContract(
    args: Prisma.InstallationContractDeleteArgs
  ): Promise<PrismaInstallationContract> {
    return this.prisma.installationContract.delete(args);
  }

  async getContractStatusId(
    parentId: string
  ): Promise<PrismaContractStatus | null> {
    return this.prisma.installationContract
      .findUnique({
        where: { id: parentId },
      })
      .contractStatusId();
  }

  async getCustomerElevatorId(
    parentId: string
  ): Promise<PrismaCustomerElevator | null> {
    return this.prisma.installationContract
      .findUnique({
        where: { id: parentId },
      })
      .customerElevatorId();
  }

  async getElevatorId(parentId: string): Promise<PrismaElevator | null> {
    return this.prisma.installationContract
      .findUnique({
        where: { id: parentId },
      })
      .elevatorId();
  }
}
