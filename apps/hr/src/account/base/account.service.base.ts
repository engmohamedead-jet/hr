/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Account as PrismaAccount,
  ProductGroup as PrismaProductGroup,
  InstallmentSaleFee as PrismaInstallmentSaleFee,
  AccountCategory as PrismaAccountCategory,
  AccountType as PrismaAccountType,
  Currency as PrismaCurrency,
} from "@prisma/client";

export class AccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AccountCountArgs, "select">): Promise<number> {
    return this.prisma.account.count(args);
  }

  async accounts(args: Prisma.AccountFindManyArgs): Promise<PrismaAccount[]> {
    return this.prisma.account.findMany(args);
  }
  async account(
    args: Prisma.AccountFindUniqueArgs
  ): Promise<PrismaAccount | null> {
    return this.prisma.account.findUnique(args);
  }
  async createAccount(args: Prisma.AccountCreateArgs): Promise<PrismaAccount> {
    return this.prisma.account.create(args);
  }
  async updateAccount(args: Prisma.AccountUpdateArgs): Promise<PrismaAccount> {
    return this.prisma.account.update(args);
  }
  async deleteAccount(args: Prisma.AccountDeleteArgs): Promise<PrismaAccount> {
    return this.prisma.account.delete(args);
  }

  async findProductGroupPurchaseReturnAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ProductGroupPurchaseReturnAccounts(args);
  }

  async findProductGroupSaleAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .ProductGroupSaleAccounts(args);
  }

  async findInstallmentSaleFees(
    parentId: string,
    args: Prisma.InstallmentSaleFeeFindManyArgs
  ): Promise<PrismaInstallmentSaleFee[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .installmentSaleFees(args);
  }

  async findProductGroupCostOfGoodsSoldAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupCostOfGoodsSoldAccounts(args);
  }

  async findProductGroupInventoryAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupInventoryAccounts(args);
  }

  async findProductGroupPurchaseAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupPurchaseAccounts(args);
  }

  async findProductGroupPurchaseDiscountAccounts(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupPurchaseDiscountAccounts(args);
  }

  async findProductGroupSaleDiscountAccountIds(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupSaleDiscountAccountIds(args);
  }

  async findProductGroupSaleReturnAccountIds(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.account
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroupSaleReturnAccountIds(args);
  }

  async getAccountCategory(
    parentId: string
  ): Promise<PrismaAccountCategory | null> {
    return this.prisma.account
      .findUnique({
        where: { id: parentId },
      })
      .accountCategory();
  }

  async getAccountTypeId(parentId: string): Promise<PrismaAccountType | null> {
    return this.prisma.account
      .findUnique({
        where: { id: parentId },
      })
      .accountTypeId();
  }

  async getCurrencyId(parentId: string): Promise<PrismaCurrency | null> {
    return this.prisma.account
      .findUnique({
        where: { id: parentId },
      })
      .currencyId();
  }
}
