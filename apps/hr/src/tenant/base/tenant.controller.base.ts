/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TenantService } from "../tenant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TenantCreateInput } from "./TenantCreateInput";
import { Tenant } from "./Tenant";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantWhereUniqueInput } from "./TenantWhereUniqueInput";
import { TenantUpdateInput } from "./TenantUpdateInput";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountWhereUniqueInput } from "../../account/base/AccountWhereUniqueInput";
import { ApplicationDependencyFindManyArgs } from "../../applicationDependency/base/ApplicationDependencyFindManyArgs";
import { ApplicationDependency } from "../../applicationDependency/base/ApplicationDependency";
import { ApplicationDependencyWhereUniqueInput } from "../../applicationDependency/base/ApplicationDependencyWhereUniqueInput";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { ApplicationWhereUniqueInput } from "../../application/base/ApplicationWhereUniqueInput";
import { AttributeValueFindManyArgs } from "../../attributeValue/base/AttributeValueFindManyArgs";
import { AttributeValue } from "../../attributeValue/base/AttributeValue";
import { AttributeValueWhereUniqueInput } from "../../attributeValue/base/AttributeValueWhereUniqueInput";
import { AttributeFindManyArgs } from "../../attribute/base/AttributeFindManyArgs";
import { Attribute } from "../../attribute/base/Attribute";
import { AttributeWhereUniqueInput } from "../../attribute/base/AttributeWhereUniqueInput";
import { BankBranchFindManyArgs } from "../../bankBranch/base/BankBranchFindManyArgs";
import { BankBranch } from "../../bankBranch/base/BankBranch";
import { BankBranchWhereUniqueInput } from "../../bankBranch/base/BankBranchWhereUniqueInput";
import { BankTypeFindManyArgs } from "../../bankType/base/BankTypeFindManyArgs";
import { BankType } from "../../bankType/base/BankType";
import { BankTypeWhereUniqueInput } from "../../bankType/base/BankTypeWhereUniqueInput";
import { BarcodeTypeFindManyArgs } from "../../barcodeType/base/BarcodeTypeFindManyArgs";
import { BarcodeType } from "../../barcodeType/base/BarcodeType";
import { BarcodeTypeWhereUniqueInput } from "../../barcodeType/base/BarcodeTypeWhereUniqueInput";
import { BillOfMaterialDetailFindManyArgs } from "../../billOfMaterialDetail/base/BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { BillOfMaterialDetailWhereUniqueInput } from "../../billOfMaterialDetail/base/BillOfMaterialDetailWhereUniqueInput";
import { BillOfMaterialTypeFindManyArgs } from "../../billOfMaterialType/base/BillOfMaterialTypeFindManyArgs";
import { BillOfMaterialType } from "../../billOfMaterialType/base/BillOfMaterialType";
import { BillOfMaterialTypeWhereUniqueInput } from "../../billOfMaterialType/base/BillOfMaterialTypeWhereUniqueInput";
import { BillOfMaterialFindManyArgs } from "../../billOfMaterial/base/BillOfMaterialFindManyArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { BillOfMaterialWhereUniqueInput } from "../../billOfMaterial/base/BillOfMaterialWhereUniqueInput";
import { CashRepositoryFindManyArgs } from "../../cashRepository/base/CashRepositoryFindManyArgs";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { CashRepositoryWhereUniqueInput } from "../../cashRepository/base/CashRepositoryWhereUniqueInput";
import { CurrencyFindManyArgs } from "../../currency/base/CurrencyFindManyArgs";
import { Currency } from "../../currency/base/Currency";
import { CurrencyWhereUniqueInput } from "../../currency/base/CurrencyWhereUniqueInput";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { CustomerWhereUniqueInput } from "../../customer/base/CustomerWhereUniqueInput";
import { EmployeeClassFindManyArgs } from "../../employeeClass/base/EmployeeClassFindManyArgs";
import { EmployeeClass } from "../../employeeClass/base/EmployeeClass";
import { EmployeeClassWhereUniqueInput } from "../../employeeClass/base/EmployeeClassWhereUniqueInput";
import { EmployeeDepartmentFindManyArgs } from "../../employeeDepartment/base/EmployeeDepartmentFindManyArgs";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeDepartmentWhereUniqueInput } from "../../employeeDepartment/base/EmployeeDepartmentWhereUniqueInput";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { EmployeeWhereUniqueInput } from "../../employee/base/EmployeeWhereUniqueInput";
import { InstallmentSaleFeeFindManyArgs } from "../../installmentSaleFee/base/InstallmentSaleFeeFindManyArgs";
import { InstallmentSaleFee } from "../../installmentSaleFee/base/InstallmentSaleFee";
import { InstallmentSaleFeeWhereUniqueInput } from "../../installmentSaleFee/base/InstallmentSaleFeeWhereUniqueInput";
import { InvoiceTypeFindManyArgs } from "../../invoiceType/base/InvoiceTypeFindManyArgs";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { InvoiceTypeWhereUniqueInput } from "../../invoiceType/base/InvoiceTypeWhereUniqueInput";
import { OrderStatusFindManyArgs } from "../../orderStatus/base/OrderStatusFindManyArgs";
import { OrderStatus } from "../../orderStatus/base/OrderStatus";
import { OrderStatusWhereUniqueInput } from "../../orderStatus/base/OrderStatusWhereUniqueInput";
import { PaymentMethodFindManyArgs } from "../../paymentMethod/base/PaymentMethodFindManyArgs";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { PaymentMethodWhereUniqueInput } from "../../paymentMethod/base/PaymentMethodWhereUniqueInput";
import { PaymentStatusFindManyArgs } from "../../paymentStatus/base/PaymentStatusFindManyArgs";
import { PaymentStatus } from "../../paymentStatus/base/PaymentStatus";
import { PaymentStatusWhereUniqueInput } from "../../paymentStatus/base/PaymentStatusWhereUniqueInput";
import { PaymentTermFindManyArgs } from "../../paymentTerm/base/PaymentTermFindManyArgs";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentTermWhereUniqueInput } from "../../paymentTerm/base/PaymentTermWhereUniqueInput";
import { PaymentTypeFindManyArgs } from "../../paymentType/base/PaymentTypeFindManyArgs";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { PaymentTypeWhereUniqueInput } from "../../paymentType/base/PaymentTypeWhereUniqueInput";
import { PeriodFindManyArgs } from "../../period/base/PeriodFindManyArgs";
import { Period } from "../../period/base/Period";
import { PeriodWhereUniqueInput } from "../../period/base/PeriodWhereUniqueInput";
import { PrintTemplateContentFindManyArgs } from "../../printTemplateContent/base/PrintTemplateContentFindManyArgs";
import { PrintTemplateContent } from "../../printTemplateContent/base/PrintTemplateContent";
import { PrintTemplateContentWhereUniqueInput } from "../../printTemplateContent/base/PrintTemplateContentWhereUniqueInput";
import { PrintTemplateGroupFindManyArgs } from "../../printTemplateGroup/base/PrintTemplateGroupFindManyArgs";
import { PrintTemplateGroup } from "../../printTemplateGroup/base/PrintTemplateGroup";
import { PrintTemplateGroupWhereUniqueInput } from "../../printTemplateGroup/base/PrintTemplateGroupWhereUniqueInput";
import { PrintTemplateFindManyArgs } from "../../printTemplate/base/PrintTemplateFindManyArgs";
import { PrintTemplate } from "../../printTemplate/base/PrintTemplate";
import { PrintTemplateWhereUniqueInput } from "../../printTemplate/base/PrintTemplateWhereUniqueInput";
import { ProductBarcodeFindManyArgs } from "../../productBarcode/base/ProductBarcodeFindManyArgs";
import { ProductBarcode } from "../../productBarcode/base/ProductBarcode";
import { ProductBarcodeWhereUniqueInput } from "../../productBarcode/base/ProductBarcodeWhereUniqueInput";
import { ProductCategoryFindManyArgs } from "../../productCategory/base/ProductCategoryFindManyArgs";
import { ProductCategory } from "../../productCategory/base/ProductCategory";
import { ProductCategoryWhereUniqueInput } from "../../productCategory/base/ProductCategoryWhereUniqueInput";
import { ProductDepartmentFindManyArgs } from "../../productDepartment/base/ProductDepartmentFindManyArgs";
import { ProductDepartment } from "../../productDepartment/base/ProductDepartment";
import { ProductDepartmentWhereUniqueInput } from "../../productDepartment/base/ProductDepartmentWhereUniqueInput";
import { ProductGroupFindManyArgs } from "../../productGroup/base/ProductGroupFindManyArgs";
import { ProductGroup } from "../../productGroup/base/ProductGroup";
import { ProductGroupWhereUniqueInput } from "../../productGroup/base/ProductGroupWhereUniqueInput";
import { ProductTypeFindManyArgs } from "../../productType/base/ProductTypeFindManyArgs";
import { ProductType } from "../../productType/base/ProductType";
import { ProductTypeWhereUniqueInput } from "../../productType/base/ProductTypeWhereUniqueInput";
import { ProductUnitFindManyArgs } from "../../productUnit/base/ProductUnitFindManyArgs";
import { ProductUnit } from "../../productUnit/base/ProductUnit";
import { ProductUnitWhereUniqueInput } from "../../productUnit/base/ProductUnitWhereUniqueInput";
import { ProductVariantFindManyArgs } from "../../productVariant/base/ProductVariantFindManyArgs";
import { ProductVariant } from "../../productVariant/base/ProductVariant";
import { ProductVariantWhereUniqueInput } from "../../productVariant/base/ProductVariantWhereUniqueInput";
import { ProductionAvailabilityFindManyArgs } from "../../productionAvailability/base/ProductionAvailabilityFindManyArgs";
import { ProductionAvailability } from "../../productionAvailability/base/ProductionAvailability";
import { ProductionAvailabilityWhereUniqueInput } from "../../productionAvailability/base/ProductionAvailabilityWhereUniqueInput";
import { ProductionDocumentFindManyArgs } from "../../productionDocument/base/ProductionDocumentFindManyArgs";
import { ProductionDocument } from "../../productionDocument/base/ProductionDocument";
import { ProductionDocumentWhereUniqueInput } from "../../productionDocument/base/ProductionDocumentWhereUniqueInput";
import { ProductionOrderFindManyArgs } from "../../productionOrder/base/ProductionOrderFindManyArgs";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { ProductionOrderWhereUniqueInput } from "../../productionOrder/base/ProductionOrderWhereUniqueInput";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { ProductWhereUniqueInput } from "../../product/base/ProductWhereUniqueInput";
import { PurchaseDetailFindManyArgs } from "../../purchaseDetail/base/PurchaseDetailFindManyArgs";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchaseDetailWhereUniqueInput } from "../../purchaseDetail/base/PurchaseDetailWhereUniqueInput";
import { PurchasePriceTypeFindManyArgs } from "../../purchasePriceType/base/PurchasePriceTypeFindManyArgs";
import { PurchasePriceType } from "../../purchasePriceType/base/PurchasePriceType";
import { PurchasePriceTypeWhereUniqueInput } from "../../purchasePriceType/base/PurchasePriceTypeWhereUniqueInput";
import { PurchaseReturnDetailFindManyArgs } from "../../purchaseReturnDetail/base/PurchaseReturnDetailFindManyArgs";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { PurchaseReturnDetailWhereUniqueInput } from "../../purchaseReturnDetail/base/PurchaseReturnDetailWhereUniqueInput";
import { PurchaseReturnFindManyArgs } from "../../purchaseReturn/base/PurchaseReturnFindManyArgs";
import { PurchaseReturn } from "../../purchaseReturn/base/PurchaseReturn";
import { PurchaseReturnWhereUniqueInput } from "../../purchaseReturn/base/PurchaseReturnWhereUniqueInput";
import { PurchaseFindManyArgs } from "../../purchase/base/PurchaseFindManyArgs";
import { Purchase } from "../../purchase/base/Purchase";
import { PurchaseWhereUniqueInput } from "../../purchase/base/PurchaseWhereUniqueInput";
import { ResourceTypeFindManyArgs } from "../../resourceType/base/ResourceTypeFindManyArgs";
import { ResourceType } from "../../resourceType/base/ResourceType";
import { ResourceTypeWhereUniqueInput } from "../../resourceType/base/ResourceTypeWhereUniqueInput";
import { ResourceFindManyArgs } from "../../resource/base/ResourceFindManyArgs";
import { Resource } from "../../resource/base/Resource";
import { ResourceWhereUniqueInput } from "../../resource/base/ResourceWhereUniqueInput";
import { RoleGroupFindManyArgs } from "../../roleGroup/base/RoleGroupFindManyArgs";
import { RoleGroup } from "../../roleGroup/base/RoleGroup";
import { RoleGroupWhereUniqueInput } from "../../roleGroup/base/RoleGroupWhereUniqueInput";
import { SalaryItemGroupFindManyArgs } from "../../salaryItemGroup/base/SalaryItemGroupFindManyArgs";
import { SalaryItemGroup } from "../../salaryItemGroup/base/SalaryItemGroup";
import { SalaryItemGroupWhereUniqueInput } from "../../salaryItemGroup/base/SalaryItemGroupWhereUniqueInput";
import { SalaryItemTypeFindManyArgs } from "../../salaryItemType/base/SalaryItemTypeFindManyArgs";
import { SalaryItemType } from "../../salaryItemType/base/SalaryItemType";
import { SalaryItemTypeWhereUniqueInput } from "../../salaryItemType/base/SalaryItemTypeWhereUniqueInput";
import { SalaryItemFindManyArgs } from "../../salaryItem/base/SalaryItemFindManyArgs";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { SalaryItemWhereUniqueInput } from "../../salaryItem/base/SalaryItemWhereUniqueInput";
import { SalaryLawFindManyArgs } from "../../salaryLaw/base/SalaryLawFindManyArgs";
import { SalaryLaw } from "../../salaryLaw/base/SalaryLaw";
import { SalaryLawWhereUniqueInput } from "../../salaryLaw/base/SalaryLawWhereUniqueInput";
import { SaleDetailFindManyArgs } from "../../saleDetail/base/SaleDetailFindManyArgs";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SaleDetailWhereUniqueInput } from "../../saleDetail/base/SaleDetailWhereUniqueInput";
import { SaleOrderDetailFindManyArgs } from "../../saleOrderDetail/base/SaleOrderDetailFindManyArgs";
import { SaleOrderDetail } from "../../saleOrderDetail/base/SaleOrderDetail";
import { SaleOrderDetailWhereUniqueInput } from "../../saleOrderDetail/base/SaleOrderDetailWhereUniqueInput";
import { SaleOrderFindManyArgs } from "../../saleOrder/base/SaleOrderFindManyArgs";
import { SaleOrder } from "../../saleOrder/base/SaleOrder";
import { SaleOrderWhereUniqueInput } from "../../saleOrder/base/SaleOrderWhereUniqueInput";
import { SalePaymentFindManyArgs } from "../../salePayment/base/SalePaymentFindManyArgs";
import { SalePayment } from "../../salePayment/base/SalePayment";
import { SalePaymentWhereUniqueInput } from "../../salePayment/base/SalePaymentWhereUniqueInput";
import { SalePersonFindManyArgs } from "../../salePerson/base/SalePersonFindManyArgs";
import { SalePerson } from "../../salePerson/base/SalePerson";
import { SalePersonWhereUniqueInput } from "../../salePerson/base/SalePersonWhereUniqueInput";
import { SalePriceTypeFindManyArgs } from "../../salePriceType/base/SalePriceTypeFindManyArgs";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { SalePriceTypeWhereUniqueInput } from "../../salePriceType/base/SalePriceTypeWhereUniqueInput";
import { SaleQuotationDetailFindManyArgs } from "../../saleQuotationDetail/base/SaleQuotationDetailFindManyArgs";
import { SaleQuotationDetail } from "../../saleQuotationDetail/base/SaleQuotationDetail";
import { SaleQuotationDetailWhereUniqueInput } from "../../saleQuotationDetail/base/SaleQuotationDetailWhereUniqueInput";
import { SaleQuotationFindManyArgs } from "../../saleQuotation/base/SaleQuotationFindManyArgs";
import { SaleQuotation } from "../../saleQuotation/base/SaleQuotation";
import { SaleQuotationWhereUniqueInput } from "../../saleQuotation/base/SaleQuotationWhereUniqueInput";
import { SaleReturnDetailFindManyArgs } from "../../saleReturnDetail/base/SaleReturnDetailFindManyArgs";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { SaleReturnDetailWhereUniqueInput } from "../../saleReturnDetail/base/SaleReturnDetailWhereUniqueInput";
import { SaleReturnFindManyArgs } from "../../saleReturn/base/SaleReturnFindManyArgs";
import { SaleReturn } from "../../saleReturn/base/SaleReturn";
import { SaleReturnWhereUniqueInput } from "../../saleReturn/base/SaleReturnWhereUniqueInput";
import { SaleTaxFindManyArgs } from "../../saleTax/base/SaleTaxFindManyArgs";
import { SaleTax } from "../../saleTax/base/SaleTax";
import { SaleTaxWhereUniqueInput } from "../../saleTax/base/SaleTaxWhereUniqueInput";
import { SaleTeamFindManyArgs } from "../../saleTeam/base/SaleTeamFindManyArgs";
import { SaleTeam } from "../../saleTeam/base/SaleTeam";
import { SaleTeamWhereUniqueInput } from "../../saleTeam/base/SaleTeamWhereUniqueInput";
import { SaleFindManyArgs } from "../../sale/base/SaleFindManyArgs";
import { Sale } from "../../sale/base/Sale";
import { SaleWhereUniqueInput } from "../../sale/base/SaleWhereUniqueInput";
import { ScrapReasonFindManyArgs } from "../../scrapReason/base/ScrapReasonFindManyArgs";
import { ScrapReason } from "../../scrapReason/base/ScrapReason";
import { ScrapReasonWhereUniqueInput } from "../../scrapReason/base/ScrapReasonWhereUniqueInput";
import { ShippingStatusFindManyArgs } from "../../shippingStatus/base/ShippingStatusFindManyArgs";
import { ShippingStatus } from "../../shippingStatus/base/ShippingStatus";
import { ShippingStatusWhereUniqueInput } from "../../shippingStatus/base/ShippingStatusWhereUniqueInput";
import { StoreFindManyArgs } from "../../store/base/StoreFindManyArgs";
import { Store } from "../../store/base/Store";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";
import { SupplierFindManyArgs } from "../../supplier/base/SupplierFindManyArgs";
import { Supplier } from "../../supplier/base/Supplier";
import { SupplierWhereUniqueInput } from "../../supplier/base/SupplierWhereUniqueInput";
import { UnitFindManyArgs } from "../../unit/base/UnitFindManyArgs";
import { Unit } from "../../unit/base/Unit";
import { UnitWhereUniqueInput } from "../../unit/base/UnitWhereUniqueInput";
import { UserFindManyArgs } from "../../user/base/UserFindManyArgs";
import { User } from "../../user/base/User";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { WorkCenterRoutingFindManyArgs } from "../../workCenterRouting/base/WorkCenterRoutingFindManyArgs";
import { WorkCenterRouting } from "../../workCenterRouting/base/WorkCenterRouting";
import { WorkCenterRoutingWhereUniqueInput } from "../../workCenterRouting/base/WorkCenterRoutingWhereUniqueInput";
import { WorkCenterFindManyArgs } from "../../workCenter/base/WorkCenterFindManyArgs";
import { WorkCenter } from "../../workCenter/base/WorkCenter";
import { WorkCenterWhereUniqueInput } from "../../workCenter/base/WorkCenterWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TenantControllerBase {
  constructor(
    protected readonly service: TenantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tenant })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTenant(@common.Body() data: TenantCreateInput): Promise<Tenant> {
    return await this.service.createTenant({
      data: data,
      select: {
        code: true,
        createdAt: true,
        creatorUserId: true,
        description: true,
        email: true,
        id: true,
        isActive: true,
        lastModifierUserIdl: true,
        name: true,
        normalizedName: true,
        note: true,
        tenancyName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tenant] })
  @ApiNestedQuery(TenantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenants(@common.Req() request: Request): Promise<Tenant[]> {
    const args = plainToClass(TenantFindManyArgs, request.query);
    return this.service.tenants({
      ...args,
      select: {
        code: true,
        createdAt: true,
        creatorUserId: true,
        description: true,
        email: true,
        id: true,
        isActive: true,
        lastModifierUserIdl: true,
        name: true,
        normalizedName: true,
        note: true,
        tenancyName: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    const result = await this.service.tenant({
      where: params,
      select: {
        code: true,
        createdAt: true,
        creatorUserId: true,
        description: true,
        email: true,
        id: true,
        isActive: true,
        lastModifierUserIdl: true,
        name: true,
        normalizedName: true,
        note: true,
        tenancyName: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTenant(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() data: TenantUpdateInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          creatorUserId: true,
          description: true,
          email: true,
          id: true,
          isActive: true,
          lastModifierUserIdl: true,
          name: true,
          normalizedName: true,
          note: true,
          tenancyName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tenant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTenant(
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant({
        where: params,
        select: {
          code: true,
          createdAt: true,
          creatorUserId: true,
          description: true,
          email: true,
          id: true,
          isActive: true,
          lastModifierUserIdl: true,
          name: true,
          normalizedName: true,
          note: true,
          tenancyName: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findAccounts(params.id, {
      ...query,
      select: {
        accountNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isMasterAccount: true,
        name: true,
        normalizedName: true,
        note: true,

        parentAccountId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectAccounts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateAccounts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accounts")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectAccounts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accounts: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applicationDependencies")
  @ApiNestedQuery(ApplicationDependencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "any",
  })
  async findApplicationDependencies(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ApplicationDependency[]> {
    const query = plainToClass(
      ApplicationDependencyFindManyArgs,
      request.query
    );
    const results = await this.service.findApplicationDependencies(params.id, {
      ...query,
      select: {
        applicationId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applicationDependencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectApplicationDependencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDependencies: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applicationDependencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateApplicationDependencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDependencies: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applicationDependencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectApplicationDependencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applicationDependencies: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/applications")
  @ApiNestedQuery(ApplicationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findApplications(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Application[]> {
    const query = plainToClass(ApplicationFindManyArgs, request.query);
    const results = await this.service.findApplications(params.id, {
      ...query,
      select: {
        DependsOnApplicationDependency: {
          select: {
            id: true,
          },
        },

        applicationDependency: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        i18nKey: true,
        icon: true,
        id: true,
        isActive: true,
        landingUrl: true,
        name: true,
        normalizedName: true,
        note: true,
        publishedDateTime: true,
        publisher: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        versionNumber: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectApplications(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateApplications(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/applications")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectApplications(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ApplicationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      applications: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attributeValues")
  @ApiNestedQuery(AttributeValueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "read",
    possession: "any",
  })
  async findAttributeValues(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<AttributeValue[]> {
    const query = plainToClass(AttributeValueFindManyArgs, request.query);
    const results = await this.service.findAttributeValues(params.id, {
      ...query,
      select: {
        attributeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isActive: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributeValues")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectAttributeValues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeValues: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributeValues")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateAttributeValues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeValues: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributeValues")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectAttributeValues(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributeValues: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/attributes")
  @ApiNestedQuery(AttributeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Attribute",
    action: "read",
    possession: "any",
  })
  async findAttributes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Attribute[]> {
    const query = plainToClass(AttributeFindManyArgs, request.query);
    const results = await this.service.findAttributes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectAttributes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateAttributes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/attributes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectAttributes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: AttributeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      attributes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bankBranches")
  @ApiNestedQuery(BankBranchFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BankBranch",
    action: "read",
    possession: "any",
  })
  async findBankBranches(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BankBranch[]> {
    const query = plainToClass(BankBranchFindManyArgs, request.query);
    const results = await this.service.findBankBranches(params.id, {
      ...query,
      select: {
        address: true,

        bank: {
          select: {
            id: true,
          },
        },

        code: true,
        contactPhoneNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bankBranches")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBankBranches(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankBranchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankBranches: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bankBranches")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBankBranches(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankBranchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankBranches: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bankBranches")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBankBranches(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankBranchWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankBranches: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bankTypes")
  @ApiNestedQuery(BankTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BankType",
    action: "read",
    possession: "any",
  })
  async findBankTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BankType[]> {
    const query = plainToClass(BankTypeFindManyArgs, request.query);
    const results = await this.service.findBankTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bankTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBankTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bankTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBankTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bankTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBankTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BankTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/barcodeTypes")
  @ApiNestedQuery(BarcodeTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "any",
  })
  async findBarcodeTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BarcodeType[]> {
    const query = plainToClass(BarcodeTypeFindManyArgs, request.query);
    const results = await this.service.findBarcodeTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/barcodeTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBarcodeTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BarcodeTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      barcodeTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/barcodeTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBarcodeTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BarcodeTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      barcodeTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/barcodeTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBarcodeTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BarcodeTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      barcodeTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterialDetails")
  @ApiNestedQuery(BillOfMaterialDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BillOfMaterialDetail[]> {
    const query = plainToClass(BillOfMaterialDetailFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterialDetails(params.id, {
      ...query,
      select: {
        billOfMaterial: {
          select: {
            id: true,
          },
        },

        costShare: true,
        createdAt: true,
        id: true,
        isActive: true,
        isManualConsumption: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        tenant: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        workCenterRoutingId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterialDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterialDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterialDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterialTypes")
  @ApiNestedQuery(BillOfMaterialTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BillOfMaterialType[]> {
    const query = plainToClass(BillOfMaterialTypeFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterialTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterialTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterialTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterialTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterialTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterialTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterialTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterials")
  @ApiNestedQuery(BillOfMaterialFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterials(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<BillOfMaterial[]> {
    const query = plainToClass(BillOfMaterialFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterials(params.id, {
      ...query,
      select: {
        billOfMaterialTypeId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        daysToPrepareManufacturingOrder: true,
        endDate: true,
        id: true,
        isActive: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,
        startDate: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterials(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterials(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterials(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/cashRepositories")
  @ApiNestedQuery(CashRepositoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async findCashRepositories(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<CashRepository[]> {
    const query = plainToClass(CashRepositoryFindManyArgs, request.query);
    const results = await this.service.findCashRepositories(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        parentCashRepositoryId: {
          select: {
            id: true,
          },
        },

        purchases: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/cashRepositories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectCashRepositories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CashRepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashRepositories: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/cashRepositories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateCashRepositories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CashRepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashRepositories: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/cashRepositories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectCashRepositories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CashRepositoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      cashRepositories: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/currencies")
  @ApiNestedQuery(CurrencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async findCurrencies(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Currency[]> {
    const query = plainToClass(CurrencyFindManyArgs, request.query);
    const results = await this.service.findCurrencies(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/currencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectCurrencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CurrencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      currencies: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/currencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateCurrencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CurrencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      currencies: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/currencies")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectCurrencies(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CurrencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      currencies: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/customers")
  @ApiNestedQuery(CustomerFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async findCustomers(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Customer[]> {
    const query = plainToClass(CustomerFindManyArgs, request.query);
    const results = await this.service.findCustomers(params.id, {
      ...query,
      select: {
        DefaultSalePriceTypeId: true,
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        firstBalance: true,
        firstBalanceDate: true,
        id: true,
        isActive: true,
        isSystem: true,
        isUnderRevision: true,
        maxAllowedDebit: true,
        name: true,
        normalizedName: true,
        phoneNumber: true,
        previousBalance: true,
        revisionDate: true,
        saleDiscountRate: true,
        supplierId: true,
        taxNumber: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectCustomers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateCustomers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/customers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectCustomers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: CustomerWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      customers: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeClasses")
  @ApiNestedQuery(EmployeeClassFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  async findEmployeeClasses(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeClass[]> {
    const query = plainToClass(EmployeeClassFindManyArgs, request.query);
    const results = await this.service.findEmployeeClasses(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeClasses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployeeClasses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClasses: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeClasses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployeeClasses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClasses: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeClasses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeClasses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeClassWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClasses: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeDepartments")
  @ApiNestedQuery(EmployeeDepartmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async findEmployeeDepartments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<EmployeeDepartment[]> {
    const query = plainToClass(EmployeeDepartmentFindManyArgs, request.query);
    const results = await this.service.findEmployeeDepartments(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        parentEmployeeDepartmentId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeDepartments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employees")
  @ApiNestedQuery(EmployeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Employee[]> {
    const query = plainToClass(EmployeeFindManyArgs, request.query);
    const results = await this.service.findEmployees(params.id, {
      ...query,
      select: {
        balance: true,
        code: true,
        createdAt: true,

        employeeClassId: {
          select: {
            id: true,
          },
        },

        employeeDepartmentId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        lastYearBalance: true,
        name: true,
        normalizedName: true,
        note: true,
        remainingBalance: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        usedBalance: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectEmployees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: EmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employees: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/installmentSaleFees")
  @ApiNestedQuery(InstallmentSaleFeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async findInstallmentSaleFees(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<InstallmentSaleFee[]> {
    const query = plainToClass(InstallmentSaleFeeFindManyArgs, request.query);
    const results = await this.service.findInstallmentSaleFees(params.id, {
      ...query,
      select: {
        accountId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isFlatAmount: true,
        name: true,
        normalizedName: true,
        note: true,
        rate: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectInstallmentSaleFees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateInstallmentSaleFees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectInstallmentSaleFees(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/invoiceTypes")
  @ApiNestedQuery(InvoiceTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async findInvoiceTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<InvoiceType[]> {
    const query = plainToClass(InvoiceTypeFindManyArgs, request.query);
    const results = await this.service.findInvoiceTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/invoiceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectInvoiceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/invoiceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateInvoiceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/invoiceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectInvoiceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: InvoiceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      invoiceTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/orderStatuses")
  @ApiNestedQuery(OrderStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "OrderStatus",
    action: "read",
    possession: "any",
  })
  async findOrderStatuses(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<OrderStatus[]> {
    const query = plainToClass(OrderStatusFindManyArgs, request.query);
    const results = await this.service.findOrderStatuses(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        productionOrders: {
          select: {
            id: true,
          },
        },

        saleOrders: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/orderStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectOrderStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrderStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderStatuses: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/orderStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateOrderStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrderStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderStatuses: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/orderStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectOrderStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: OrderStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      orderStatuses: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentMethods")
  @ApiNestedQuery(PaymentMethodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentMethod",
    action: "read",
    possession: "any",
  })
  async findPaymentMethods(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PaymentMethod[]> {
    const query = plainToClass(PaymentMethodFindManyArgs, request.query);
    const results = await this.service.findPaymentMethods(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentMethods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPaymentMethods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentMethodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentMethods: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentMethods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePaymentMethods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentMethodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentMethods: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentMethods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentMethods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentMethodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentMethods: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentStatuses")
  @ApiNestedQuery(PaymentStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentStatus",
    action: "read",
    possession: "any",
  })
  async findPaymentStatuses(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PaymentStatus[]> {
    const query = plainToClass(PaymentStatusFindManyArgs, request.query);
    const results = await this.service.findPaymentStatuses(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        saleOrders: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPaymentStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentStatuses: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePaymentStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentStatuses: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentStatuses: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentTerms")
  @ApiNestedQuery(PaymentTermFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async findPaymentTerms(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PaymentTerm[]> {
    const query = plainToClass(PaymentTermFindManyArgs, request.query);
    const results = await this.service.findPaymentTerms(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        dueDays: true,

        duePeriodId: {
          select: {
            id: true,
          },
        },

        gracePeriod: true,
        id: true,

        installmentSaleFeeId: {
          select: {
            id: true,
          },
        },

        installmentSaleFeePostingPeriod: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isDefault: true,
        isDueOnDate: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPaymentTerms(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePaymentTerms(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentTerms")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentTerms(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTermWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTerms: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentTypes")
  @ApiNestedQuery(PaymentTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async findPaymentTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PaymentType[]> {
    const query = plainToClass(PaymentTypeFindManyArgs, request.query);
    const results = await this.service.findPaymentTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPaymentTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePaymentTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PaymentTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/periods")
  @ApiNestedQuery(PeriodFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "any",
  })
  async findPeriods(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Period[]> {
    const query = plainToClass(PeriodFindManyArgs, request.query);
    const results = await this.service.findPeriods(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/periods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPeriods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PeriodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periods: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/periods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePeriods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PeriodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periods: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/periods")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPeriods(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PeriodWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periods: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/printTemplateContents")
  @ApiNestedQuery(PrintTemplateContentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateContent",
    action: "read",
    possession: "any",
  })
  async findPrintTemplateContents(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PrintTemplateContent[]> {
    const query = plainToClass(PrintTemplateContentFindManyArgs, request.query);
    const results = await this.service.findPrintTemplateContents(params.id, {
      ...query,
      select: {
        createdAt: true,
        display: true,
        fieldValue: true,
        id: true,
        isActive: true,
        key: true,
        note: true,

        printTemplateId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/printTemplateContents")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPrintTemplateContents(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateContents: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/printTemplateContents")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePrintTemplateContents(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateContents: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/printTemplateContents")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPrintTemplateContents(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateContentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateContents: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/printTemplateGroups")
  @ApiNestedQuery(PrintTemplateGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateGroup",
    action: "read",
    possession: "any",
  })
  async findPrintTemplateGroups(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PrintTemplateGroup[]> {
    const query = plainToClass(PrintTemplateGroupFindManyArgs, request.query);
    const results = await this.service.findPrintTemplateGroups(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/printTemplateGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPrintTemplateGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateGroups: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/printTemplateGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePrintTemplateGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateGroups: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/printTemplateGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPrintTemplateGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplateGroups: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/printTemplates")
  @ApiNestedQuery(PrintTemplateFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "read",
    possession: "any",
  })
  async findPrintTemplates(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PrintTemplate[]> {
    const query = plainToClass(PrintTemplateFindManyArgs, request.query);
    const results = await this.service.findPrintTemplates(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        filePath: true,
        id: true,
        isActive: true,
        isCustomized: true,
        isFavourite: true,
        name: true,
        normalizedName: true,
        note: true,
        paperLayout: true,
        paperSize: true,
        previewImage: true,

        printTemplateContents: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/printTemplates")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPrintTemplates(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplates: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/printTemplates")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePrintTemplates(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplates: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/printTemplates")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPrintTemplates(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PrintTemplateWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      printTemplates: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productBarcodes")
  @ApiNestedQuery(ProductBarcodeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async findProductBarcodes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductBarcode[]> {
    const query = plainToClass(ProductBarcodeFindManyArgs, request.query);
    const results = await this.service.findProductBarcodes(params.id, {
      ...query,
      select: {
        barcode: true,

        barcodeTypeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isActive: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductBarcodes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductBarcodes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductBarcodes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productCategories")
  @ApiNestedQuery(ProductCategoryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductCategory",
    action: "read",
    possession: "any",
  })
  async findProductCategories(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductCategory[]> {
    const query = plainToClass(ProductCategoryFindManyArgs, request.query);
    const results = await this.service.findProductCategories(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productCategories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductCategories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategories: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productCategories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductCategories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategories: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productCategories")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductCategories(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductCategoryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productCategories: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productDepartments")
  @ApiNestedQuery(ProductDepartmentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductDepartment",
    action: "read",
    possession: "any",
  })
  async findProductDepartments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductDepartment[]> {
    const query = plainToClass(ProductDepartmentFindManyArgs, request.query);
    const results = await this.service.findProductDepartments(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        parentProductDepartmentId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productDepartments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productDepartments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productDepartments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductDepartments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductDepartmentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productDepartments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findProductGroups(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findProductGroups(params.id, {
      ...query,
      select: {
        code: true,

        costOfGoodsSoldAccount: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccount: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        parentProductGroupId: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGroups: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGroups: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productGroups: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productTypes")
  @ApiNestedQuery(ProductTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductType",
    action: "read",
    possession: "any",
  })
  async findProductTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductType[]> {
    const query = plainToClass(ProductTypeFindManyArgs, request.query);
    const results = await this.service.findProductTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isActive: true,
        isComponent: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productUnits")
  @ApiNestedQuery(ProductUnitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "read",
    possession: "any",
  })
  async findProductUnits(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductUnit[]> {
    const query = plainToClass(ProductUnitFindManyArgs, request.query);
    const results = await this.service.findProductUnits(params.id, {
      ...query,
      select: {
        barcode: true,

        compareUnitId: {
          select: {
            id: true,
          },
        },

        compareUnitQuantity: true,
        costPrice: true,
        createdAt: true,
        id: true,
        isActive: true,
        isCostPriceIncludingTax: true,
        isDefaultForPurchase: true,
        isDefaultForSale: true,
        isSalePriceIncludingTax: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        salePrice: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productUnits")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productUnits: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productUnits")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productUnits: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productUnits")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductUnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productUnits: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productVariants")
  @ApiNestedQuery(ProductVariantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async findProductVariants(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductVariant[]> {
    const query = plainToClass(ProductVariantFindManyArgs, request.query);
    const results = await this.service.findProductVariants(params.id, {
      ...query,
      select: {
        attributeValueId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isActive: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productVariants")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductVariants(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariants: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productVariants")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductVariants(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariants: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productVariants")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductVariants(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductVariantWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productVariants: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productionAvailabilities")
  @ApiNestedQuery(ProductionAvailabilityFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductionAvailability",
    action: "read",
    possession: "any",
  })
  async findProductionAvailabilities(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductionAvailability[]> {
    const query = plainToClass(
      ProductionAvailabilityFindManyArgs,
      request.query
    );
    const results = await this.service.findProductionAvailabilities(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantIId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productionAvailabilities")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductionAvailabilities(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionAvailabilities: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productionAvailabilities")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductionAvailabilities(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionAvailabilities: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productionAvailabilities")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductionAvailabilities(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionAvailabilityWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionAvailabilities: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productionDocuments")
  @ApiNestedQuery(ProductionDocumentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "read",
    possession: "any",
  })
  async findProductionDocuments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductionDocument[]> {
    const query = plainToClass(ProductionDocumentFindManyArgs, request.query);
    const results = await this.service.findProductionDocuments(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        note: true,
        priority: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productionDocuments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductionDocuments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionDocuments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productionDocuments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductionDocuments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionDocuments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productionDocuments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductionDocuments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionDocumentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionDocuments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productionOrders")
  @ApiNestedQuery(ProductionOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductionOrder",
    action: "read",
    possession: "any",
  })
  async findProductionOrders(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ProductionOrder[]> {
    const query = plainToClass(ProductionOrderFindManyArgs, request.query);
    const results = await this.service.findProductionOrders(params.id, {
      ...query,
      select: {
        billOfMaterialId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        deadlineDate: true,
        description: true,
        finishDate: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        orderDate: true,

        orderStatusId: {
          select: {
            id: true,
          },
        },

        productId: {
          select: {
            id: true,
          },
        },

        productQuantity: true,
        sequenceNumber: true,
        startDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        unit: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProductionOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProductionOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productionOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProductionOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductionOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productionOrders: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/products")
  @ApiNestedQuery(ProductFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Product[]> {
    const query = plainToClass(ProductFindManyArgs, request.query);
    const results = await this.service.findProducts(params.id, {
      ...query,
      select: {
        barcode: true,
        canExpire: true,
        code: true,
        costPrice: true,
        costPriceIncludesTax: true,
        createdAt: true,
        currentStockQuantity: true,
        daysToManufacture: true,

        defaultStoreId: {
          select: {
            id: true,
          },
        },

        defaultUnitId: {
          select: {
            id: true,
          },
        },

        description: true,
        discontinuedDate: true,
        discountRate: true,
        expireAlarmInDays: true,
        expireIsDefaultAfterDaysFromPurchase: true,
        firstStockQuantity: true,
        id: true,
        isActive: true,
        isCompound: true,
        isFavorite: true,
        maintainInventory: true,
        minimumSalePrice: true,
        name: true,
        normalizedName: true,
        note: true,
        photo: true,

        productCategoryId: {
          select: {
            id: true,
          },
        },

        productDepartmentId: {
          select: {
            id: true,
          },
        },

        productGroupId: {
          select: {
            id: true,
          },
        },

        productTypeId: {
          select: {
            id: true,
          },
        },

        profitRate: true,
        reorderQuantity: true,
        salePrice: true,
        salePriceIncludesTax: true,

        saleTaxId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectProducts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateProducts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/products")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectProducts(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ProductWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      products: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseDetails")
  @ApiNestedQuery(PurchaseDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PurchaseDetail[]> {
    const query = plainToClass(PurchaseDetailFindManyArgs, request.query);
    const results = await this.service.findPurchaseDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPurchaseDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePurchaseDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchasePriceTypes")
  @ApiNestedQuery(PurchasePriceTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchasePriceType",
    action: "read",
    possession: "any",
  })
  async findPurchasePriceTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PurchasePriceType[]> {
    const query = plainToClass(PurchasePriceTypeFindManyArgs, request.query);
    const results = await this.service.findPurchasePriceTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        purchaseDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturnDetails: {
          select: {
            id: true,
          },
        },

        purchaseReturns: {
          select: {
            id: true,
          },
        },

        purchases: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchasePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPurchasePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchasePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasePriceTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchasePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePurchasePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchasePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasePriceTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchasePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPurchasePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchasePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchasePriceTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseReturnDetails")
  @ApiNestedQuery(PurchaseReturnDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturnDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PurchaseReturnDetail[]> {
    const query = plainToClass(PurchaseReturnDetailFindManyArgs, request.query);
    const results = await this.service.findPurchaseReturnDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPurchaseReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseReturns")
  @ApiNestedQuery(PurchaseReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturns(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<PurchaseReturn[]> {
    const query = plainToClass(PurchaseReturnFindManyArgs, request.query);
    const results = await this.service.findPurchaseReturns(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnDate: true,
        purchaseReturnTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPurchaseReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturns: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchases")
  @ApiNestedQuery(PurchaseFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Purchase",
    action: "read",
    possession: "any",
  })
  async findPurchases(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Purchase[]> {
    const query = plainToClass(PurchaseFindManyArgs, request.query);
    const results = await this.service.findPurchases(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseDate: true,

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchases")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectPurchases(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchases")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updatePurchases(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchases")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectPurchases(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: PurchaseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchases: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/resourceTypes")
  @ApiNestedQuery(ResourceTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ResourceType",
    action: "read",
    possession: "any",
  })
  async findResourceTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ResourceType[]> {
    const query = plainToClass(ResourceTypeFindManyArgs, request.query);
    const results = await this.service.findResourceTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/resourceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectResourceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resourceTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/resourceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateResourceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resourceTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/resourceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectResourceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resourceTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/resources")
  @ApiNestedQuery(ResourceFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Resource",
    action: "read",
    possession: "any",
  })
  async findResources(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Resource[]> {
    const query = plainToClass(ResourceFindManyArgs, request.query);
    const results = await this.service.findResources(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        resourceTypeId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        timeEfficiency: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/resources")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectResources(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/resources")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateResources(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/resources")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectResources(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ResourceWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      resources: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/roleGroups")
  @ApiNestedQuery(RoleGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "read",
    possession: "any",
  })
  async findRoleGroups(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<RoleGroup[]> {
    const query = plainToClass(RoleGroupFindManyArgs, request.query);
    const results = await this.service.findRoleGroups(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/roleGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectRoleGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roleGroups: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/roleGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateRoleGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roleGroups: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/roleGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectRoleGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: RoleGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      roleGroups: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salaryItemGroups")
  @ApiNestedQuery(SalaryItemGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemGroup",
    action: "read",
    possession: "any",
  })
  async findSalaryItemGroups(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalaryItemGroup[]> {
    const query = plainToClass(SalaryItemGroupFindManyArgs, request.query);
    const results = await this.service.findSalaryItemGroups(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salaryItemGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalaryItemGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemGroups: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salaryItemGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalaryItemGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemGroups: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salaryItemGroups")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalaryItemGroups(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemGroups: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salaryItemTypes")
  @ApiNestedQuery(SalaryItemTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalaryItemType",
    action: "read",
    possession: "any",
  })
  async findSalaryItemTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalaryItemType[]> {
    const query = plainToClass(SalaryItemTypeFindManyArgs, request.query);
    const results = await this.service.findSalaryItemTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salaryItemTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalaryItemTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salaryItemTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalaryItemTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salaryItemTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalaryItemTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItemTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salaryItems")
  @ApiNestedQuery(SalaryItemFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async findSalaryItems(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalaryItem[]> {
    const query = plainToClass(SalaryItemFindManyArgs, request.query);
    const results = await this.service.findSalaryItems(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        salaryItemGroupId: {
          select: {
            id: true,
          },
        },

        salaryItemTypeId: {
          select: {
            id: true,
          },
        },

        salaryLawId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salaryItems")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalaryItems(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItems: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salaryItems")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalaryItems(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItems: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salaryItems")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalaryItems(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryItemWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryItems: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salaryLaws")
  @ApiNestedQuery(SalaryLawFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalaryLaw",
    action: "read",
    possession: "any",
  })
  async findSalaryLaws(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalaryLaw[]> {
    const query = plainToClass(SalaryLawFindManyArgs, request.query);
    const results = await this.service.findSalaryLaws(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        effectiveDate: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salaryLaws")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalaryLaws(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryLawWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryLaws: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salaryLaws")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalaryLaws(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryLawWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryLaws: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salaryLaws")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalaryLaws(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalaryLawWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salaryLaws: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleDetails")
  @ApiNestedQuery(SaleDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async findSaleDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleDetail[]> {
    const query = plainToClass(SaleDetailFindManyArgs, request.query);
    const results = await this.service.findSaleDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleOrderDetails")
  @ApiNestedQuery(SaleOrderDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "any",
  })
  async findSaleOrderDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleOrderDetail[]> {
    const query = plainToClass(SaleOrderDetailFindManyArgs, request.query);
    const results = await this.service.findSaleOrderDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isTaxed: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleOrder: {
          select: {
            id: true,
          },
        },

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        sequence: true,

        tenant: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleOrderDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleOrderDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrderDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleOrderDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleOrderDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrderDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleOrderDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleOrderDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrderDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleOrders")
  @ApiNestedQuery(SaleOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleOrder",
    action: "read",
    possession: "any",
  })
  async findSaleOrders(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleOrder[]> {
    const query = plainToClass(SaleOrderFindManyArgs, request.query);
    const results = await this.service.findSaleOrders(params.id, {
      ...query,
      select: {
        billingAddress: true,

        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        deliveryDate: true,
        discountTotal: true,
        expectedDeliveryDate: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,

        orderStatus: {
          select: {
            id: true,
          },
        },

        paymentStatus: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        saleOrderDate: true,

        salePriceType: {
          select: {
            id: true,
          },
        },

        salePriceTypeId: true,

        saleQuotation: {
          select: {
            id: true,
          },
        },

        saleTotal: true,
        shippingAddress: true,
        shippingCost: true,

        shippingStatus: {
          select: {
            id: true,
          },
        },

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        transactionDateTime: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrders: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrders: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleOrders")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleOrders(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleOrders: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePayments")
  @ApiNestedQuery(SalePaymentFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async findSalePayments(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalePayment[]> {
    const query = plainToClass(SalePaymentFindManyArgs, request.query);
    const results = await this.service.findSalePayments(params.id, {
      ...query,
      select: {
        LocalCurrencyRatl: true,

        bank: {
          select: {
            id: true,
          },
        },

        bankBrach: true,

        bankBranch: {
          select: {
            id: true,
          },
        },

        chequeNumber: true,
        createdAt: true,
        creditCardNumber: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        foreignCurrencyRate: true,
        id: true,
        isCheque: true,
        note: true,
        paidValue: true,
        paymentDate: true,

        paymentMethodId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleId: {
          select: {
            id: true,
          },
        },

        seqeunce: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalePayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalePayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePayments")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalePayments(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePaymentWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePayments: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePeople")
  @ApiNestedQuery(SalePersonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async findSalePeople(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalePerson[]> {
    const query = plainToClass(SalePersonFindManyArgs, request.query);
    const results = await this.service.findSalePeople(params.id, {
      ...query,
      select: {
        accountId: {
          select: {
            id: true,
          },
        },

        address: true,
        code: true,
        commissionRate: true,
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        phoneNumber: true,
        photo: true,

        saleTeamId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalePeople(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalePeople(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalePeople(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePriceTypes")
  @ApiNestedQuery(SalePriceTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async findSalePriceTypes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SalePriceType[]> {
    const query = plainToClass(SalePriceTypeFindManyArgs, request.query);
    const results = await this.service.findSalePriceTypes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        saleDetails: {
          select: {
            id: true,
          },
        },

        saleOrderDetails: {
          select: {
            id: true,
          },
        },

        saleOrders: {
          select: {
            id: true,
          },
        },

        saleQuotationDetails: {
          select: {
            id: true,
          },
        },

        saleReturnDetails: {
          select: {
            id: true,
          },
        },

        saleReturns: {
          select: {
            id: true,
          },
        },

        sales: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSalePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePriceTypes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSalePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePriceTypes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePriceTypes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSalePriceTypes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SalePriceTypeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePriceTypes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleQuotationDetails")
  @ApiNestedQuery(SaleQuotationDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleQuotationDetail",
    action: "read",
    possession: "any",
  })
  async findSaleQuotationDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleQuotationDetail[]> {
    const query = plainToClass(SaleQuotationDetailFindManyArgs, request.query);
    const results = await this.service.findSaleQuotationDetails(params.id, {
      ...query,
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        salePriceType: {
          select: {
            id: true,
          },
        },

        saleQuotationId: {
          select: {
            id: true,
          },
        },

        sequence: true,
        shippingCharge: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleQuotationDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleQuotationDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleQuotationDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleQuotationDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotationDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleQuotations")
  @ApiNestedQuery(SaleQuotationFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleQuotation",
    action: "read",
    possession: "any",
  })
  async findSaleQuotations(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleQuotation[]> {
    const query = plainToClass(SaleQuotationFindManyArgs, request.query);
    const results = await this.service.findSaleQuotations(params.id, {
      ...query,
      select: {
        createdAt: true,
        discount: true,
        discountRate: true,
        expectedDeliveryDate: true,
        id: true,
        internalMemo: true,
        isActive: true,
        isCancelled: true,
        nonTaxableTotal: true,
        note: true,
        referenceNumber: true,
        saleQuotationDate: true,
        sequenceNumber: true,
        taxRate: true,
        taxTotal: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        terms: true,
        transactionDateTime: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleQuotations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleQuotations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotations: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleQuotations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleQuotations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotations: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleQuotations")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleQuotations(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleQuotationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleQuotations: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleReturnDetails")
  @ApiNestedQuery(SaleReturnDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleReturnDetail",
    action: "read",
    possession: "any",
  })
  async findSaleReturnDetails(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleReturnDetail[]> {
    const query = plainToClass(SaleReturnDetailFindManyArgs, request.query);
    const results = await this.service.findSaleReturnDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        salePriceType: {
          select: {
            id: true,
          },
        },

        saleReturnId: {
          select: {
            id: true,
          },
        },

        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleReturnDetails(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturnDetails: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleReturns")
  @ApiNestedQuery(SaleReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async findSaleReturns(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleReturn[]> {
    const query = plainToClass(SaleReturnFindManyArgs, request.query);
    const results = await this.service.findSaleReturns(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        returnTotal: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTyped: {
          select: {
            id: true,
          },
        },

        saleReturnDate: true,
        sequence: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleReturns(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleTaxes")
  @ApiNestedQuery(SaleTaxFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "any",
  })
  async findSaleTaxes(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleTax[]> {
    const query = plainToClass(SaleTaxFindManyArgs, request.query);
    const results = await this.service.findSaleTaxes(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleTaxes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleTaxes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTaxes: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleTaxes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleTaxes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTaxes: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleTaxes")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleTaxes(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTaxWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTaxes: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleTeams")
  @ApiNestedQuery(SaleTeamFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "any",
  })
  async findSaleTeams(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<SaleTeam[]> {
    const query = plainToClass(SaleTeamFindManyArgs, request.query);
    const results = await this.service.findSaleTeams(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleTeams")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSaleTeams(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTeams: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleTeams")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSaleTeams(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTeams: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleTeams")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSaleTeams(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleTeamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleTeams: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sales")
  @ApiNestedQuery(SaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async findSales(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Sale[]> {
    const query = plainToClass(SaleFindManyArgs, request.query);
    const results = await this.service.findSales(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTerm: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        saleDate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        saleTotal: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSales(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSales(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sales")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSales(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SaleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sales: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/scrapReasons")
  @ApiNestedQuery(ScrapReasonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async findScrapReasons(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ScrapReason[]> {
    const query = plainToClass(ScrapReasonFindManyArgs, request.query);
    const results = await this.service.findScrapReasons(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/scrapReasons")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectScrapReasons(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScrapReasonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapReasons: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/scrapReasons")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateScrapReasons(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScrapReasonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapReasons: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/scrapReasons")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectScrapReasons(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ScrapReasonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      scrapReasons: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/shippingStatuses")
  @ApiNestedQuery(ShippingStatusFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ShippingStatus",
    action: "read",
    possession: "any",
  })
  async findShippingStatuses(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<ShippingStatus[]> {
    const query = plainToClass(ShippingStatusFindManyArgs, request.query);
    const results = await this.service.findShippingStatuses(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        saleOrders: {
          select: {
            id: true,
          },
        },

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/shippingStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectShippingStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ShippingStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shippingStatuses: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/shippingStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateShippingStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ShippingStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shippingStatuses: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/shippingStatuses")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectShippingStatuses(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: ShippingStatusWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      shippingStatuses: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/stores")
  @ApiNestedQuery(StoreFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async findStores(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Store[]> {
    const query = plainToClass(StoreFindManyArgs, request.query);
    const results = await this.service.findStores(params.id, {
      ...query,
      select: {
        addressLine1: true,
        allowSale: true,
        cellPhoneNumber: true,
        code: true,
        createdAt: true,
        fax: true,
        homePhoneNumber: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        street: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/stores")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectStores(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: StoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stores: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/stores")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateStores(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: StoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stores: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/stores")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectStores(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: StoreWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      stores: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/suppliers")
  @ApiNestedQuery(SupplierFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async findSuppliers(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Supplier[]> {
    const query = plainToClass(SupplierFindManyArgs, request.query);
    const results = await this.service.findSuppliers(params.id, {
      ...query,
      select: {
        address: true,
        code: true,
        createdAt: true,
        credit: true,

        currency: {
          select: {
            id: true,
          },
        },

        customerId: {
          select: {
            id: true,
          },
        },

        debit: true,
        description: true,
        email: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        phoneNumber: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        website: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectSuppliers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateSuppliers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/suppliers")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectSuppliers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: SupplierWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      suppliers: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/units")
  @ApiNestedQuery(UnitFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async findUnits(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<Unit[]> {
    const query = plainToClass(UnitFindManyArgs, request.query);
    const results = await this.service.findUnits(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isCompound: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        productUnitCompareUnits: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/units")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      units: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/units")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      units: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/units")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectUnits(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UnitWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      units: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/users")
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async findUsers(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<User[]> {
    const query = plainToClass(UserFindManyArgs, request.query);
    const results = await this.service.findUsers(params.id, {
      ...query,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        isActive: true,
        lastName: true,
        roles: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        username: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectUsers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateUsers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/users")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectUsers(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: UserWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      users: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workCenterRoutings")
  @ApiNestedQuery(WorkCenterRoutingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterRouting",
    action: "read",
    possession: "any",
  })
  async findWorkCenterRoutings(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<WorkCenterRouting[]> {
    const query = plainToClass(WorkCenterRoutingFindManyArgs, request.query);
    const results = await this.service.findWorkCenterRoutings(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        timeCycleManual: true,
        timeModeBatch: true,
        updatedAt: true,

        workCenterId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workCenterRoutings")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectWorkCenterRoutings(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterRoutings: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workCenterRoutings")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateWorkCenterRoutings(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterRoutings: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workCenterRoutings")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectWorkCenterRoutings(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenterRoutings: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workCenters")
  @ApiNestedQuery(WorkCenterFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkCenter",
    action: "read",
    possession: "any",
  })
  async findWorkCenters(
    @common.Req() request: Request,
    @common.Param() params: TenantWhereUniqueInput
  ): Promise<WorkCenter[]> {
    const query = plainToClass(WorkCenterFindManyArgs, request.query);
    const results = await this.service.findWorkCenters(params.id, {
      ...query,
      select: {
        analyticDistribution: true,
        code: true,
        color: true,
        costPerHour: true,
        createdAt: true,
        defaultCapacity: true,
        id: true,
        isActive: true,
        isProductive: true,
        name: true,
        normalizedName: true,
        note: true,
        oeeTareget: true,
        sequence: true,
        startTime: true,
        stopTime: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        timeEfficiency: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workCenters")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async connectWorkCenters(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenters: {
        connect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workCenters")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateWorkCenters(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenters: {
        set: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workCenters")
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async disconnectWorkCenters(
    @common.Param() params: TenantWhereUniqueInput,
    @common.Body() body: WorkCenterWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workCenters: {
        disconnect: body,
      },
    };
    await this.service.updateTenant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
