/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Attendance } from "../../attendance/base/Attendance";
import { ValidateNested, IsOptional, IsDate, IsString } from "class-validator";
import { Type } from "class-transformer";
import { BonusRequest } from "../../bonusRequest/base/BonusRequest";
import { CheckInOut } from "../../checkInOut/base/CheckInOut";
import { DailyMovementRequest } from "../../dailyMovementRequest/base/DailyMovementRequest";
import { DayOffRequest } from "../../dayOffRequest/base/DayOffRequest";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeGroup } from "../../employeeGroup/base/EmployeeGroup";
import { EmployeeRole } from "../../employeeRole/base/EmployeeRole";
import { Employee } from "../../employee/base/Employee";
import { Machine } from "../../machine/base/Machine";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { JobTitle } from "../../jobTitle/base/JobTitle";
import { LeaveRequestType } from "../../leaveRequestType/base/LeaveRequestType";
import { LeaveRequest } from "../../leaveRequest/base/LeaveRequest";
import { OverNightRequest } from "../../overNightRequest/base/OverNightRequest";
import { ScrapReason } from "../../scrapReason/base/ScrapReason";
import { TradingSummary } from "../../tradingSummary/base/TradingSummary";
import { WorkCenterAlternative } from "../../workCenterAlternative/base/WorkCenterAlternative";
import { WorkCenterCapacity } from "../../workCenterCapacity/base/WorkCenterCapacity";
import { WorkCenterProductivity } from "../../workCenterProductivity/base/WorkCenterProductivity";
import { WorkCenterProductivityLossType } from "../../workCenterProductivityLossType/base/WorkCenterProductivityLossType";
import { WorkCenterProductivityLoss } from "../../workCenterProductivityLoss/base/WorkCenterProductivityLoss";
import { WorkCenterRouting } from "../../workCenterRouting/base/WorkCenterRouting";
import { WorkCenterTag } from "../../workCenterTag/base/WorkCenterTag";
import { WorkCenterWorkCenterTag } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTag";
import { WorkCenter } from "../../workCenter/base/WorkCenter";
import { WorkOrderDependency } from "../../workOrderDependency/base/WorkOrderDependency";
import { WorkOrderRouting } from "../../workOrderRouting/base/WorkOrderRouting";
import { WorkOrderStatus } from "../../workOrderStatus/base/WorkOrderStatus";
import { WorkOrder } from "../../workOrder/base/WorkOrder";
import { WorkSheetType } from "../../workSheetType/base/WorkSheetType";

@ObjectType()
class Tenant {
  @ApiProperty({
    required: false,
    type: () => [Attendance],
  })
  @ValidateNested()
  @Type(() => Attendance)
  @IsOptional()
  attendances?: Array<Attendance>;

  @ApiProperty({
    required: false,
    type: () => [BonusRequest],
  })
  @ValidateNested()
  @Type(() => BonusRequest)
  @IsOptional()
  bonusRequests?: Array<BonusRequest>;

  @ApiProperty({
    required: false,
    type: () => [CheckInOut],
  })
  @ValidateNested()
  @Type(() => CheckInOut)
  @IsOptional()
  checkInOuts?: Array<CheckInOut>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [DailyMovementRequest],
  })
  @ValidateNested()
  @Type(() => DailyMovementRequest)
  @IsOptional()
  dailyMovements?: Array<DailyMovementRequest>;

  @ApiProperty({
    required: false,
    type: () => [DayOffRequest],
  })
  @ValidateNested()
  @Type(() => DayOffRequest)
  @IsOptional()
  dayOffs?: Array<DayOffRequest>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeDepartment],
  })
  @ValidateNested()
  @Type(() => EmployeeDepartment)
  @IsOptional()
  employeeDepartments?: Array<EmployeeDepartment>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeGroup],
  })
  @ValidateNested()
  @Type(() => EmployeeGroup)
  @IsOptional()
  employeeGroups?: Array<EmployeeGroup>;

  @ApiProperty({
    required: false,
    type: () => [EmployeeRole],
  })
  @ValidateNested()
  @Type(() => EmployeeRole)
  @IsOptional()
  employeeRoles?: Array<EmployeeRole>;

  @ApiProperty({
    required: false,
    type: () => [Employee],
  })
  @ValidateNested()
  @Type(() => Employee)
  @IsOptional()
  employees?: Array<Employee>;

  @ApiProperty({
    required: false,
    type: () => [Machine],
  })
  @ValidateNested()
  @Type(() => Machine)
  @IsOptional()
  fingerprintMachines?: Array<Machine>;

  @ApiProperty({
    required: false,
    type: () => [FiscalMonth],
  })
  @ValidateNested()
  @Type(() => FiscalMonth)
  @IsOptional()
  fiscalMonths?: Array<FiscalMonth>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [JobTitle],
  })
  @ValidateNested()
  @Type(() => JobTitle)
  @IsOptional()
  jobTitles?: Array<JobTitle>;

  @ApiProperty({
    required: false,
    type: () => [LeaveRequestType],
  })
  @ValidateNested()
  @Type(() => LeaveRequestType)
  @IsOptional()
  leaveRequestTypes?: Array<LeaveRequestType>;

  @ApiProperty({
    required: false,
    type: () => [LeaveRequest],
  })
  @ValidateNested()
  @Type(() => LeaveRequest)
  @IsOptional()
  leaveRequests?: Array<LeaveRequest>;

  @ApiProperty({
    required: false,
    type: () => [OverNightRequest],
  })
  @ValidateNested()
  @Type(() => OverNightRequest)
  @IsOptional()
  overNights?: Array<OverNightRequest>;

  @ApiProperty({
    required: false,
    type: () => [ScrapReason],
  })
  @ValidateNested()
  @Type(() => ScrapReason)
  @IsOptional()
  scrapReasons?: Array<ScrapReason>;

  @ApiProperty({
    required: false,
    type: () => [TradingSummary],
  })
  @ValidateNested()
  @Type(() => TradingSummary)
  @IsOptional()
  tradingSummaries?: Array<TradingSummary>;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterAlternative],
  })
  @ValidateNested()
  @Type(() => WorkCenterAlternative)
  @IsOptional()
  workCenterAlternatives?: Array<WorkCenterAlternative>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterCapacity],
  })
  @ValidateNested()
  @Type(() => WorkCenterCapacity)
  @IsOptional()
  workCenterCapacities?: Array<WorkCenterCapacity>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterProductivity],
  })
  @ValidateNested()
  @Type(() => WorkCenterProductivity)
  @IsOptional()
  workCenterProductivities?: Array<WorkCenterProductivity>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterProductivityLossType],
  })
  @ValidateNested()
  @Type(() => WorkCenterProductivityLossType)
  @IsOptional()
  workCenterProductivityLossTypes?: Array<WorkCenterProductivityLossType>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterProductivityLoss],
  })
  @ValidateNested()
  @Type(() => WorkCenterProductivityLoss)
  @IsOptional()
  workCenterProductivityLosses?: Array<WorkCenterProductivityLoss>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterRouting],
  })
  @ValidateNested()
  @Type(() => WorkCenterRouting)
  @IsOptional()
  workCenterRoutings?: Array<WorkCenterRouting>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterTag],
  })
  @ValidateNested()
  @Type(() => WorkCenterTag)
  @IsOptional()
  workCenterTags?: Array<WorkCenterTag>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenterWorkCenterTag],
  })
  @ValidateNested()
  @Type(() => WorkCenterWorkCenterTag)
  @IsOptional()
  workCenterWorkCenterTags?: Array<WorkCenterWorkCenterTag>;

  @ApiProperty({
    required: false,
    type: () => [WorkCenter],
  })
  @ValidateNested()
  @Type(() => WorkCenter)
  @IsOptional()
  workCenters?: Array<WorkCenter>;

  @ApiProperty({
    required: false,
    type: () => [WorkOrderDependency],
  })
  @ValidateNested()
  @Type(() => WorkOrderDependency)
  @IsOptional()
  workOrderDependencies?: Array<WorkOrderDependency>;

  @ApiProperty({
    required: false,
    type: () => [WorkOrderRouting],
  })
  @ValidateNested()
  @Type(() => WorkOrderRouting)
  @IsOptional()
  workOrderRoutings?: Array<WorkOrderRouting>;

  @ApiProperty({
    required: false,
    type: () => [WorkOrderStatus],
  })
  @ValidateNested()
  @Type(() => WorkOrderStatus)
  @IsOptional()
  workOrderStatuses?: Array<WorkOrderStatus>;

  @ApiProperty({
    required: false,
    type: () => [WorkOrder],
  })
  @ValidateNested()
  @Type(() => WorkOrder)
  @IsOptional()
  workOrders?: Array<WorkOrder>;

  @ApiProperty({
    required: false,
    type: () => [WorkSheetType],
  })
  @ValidateNested()
  @Type(() => WorkSheetType)
  @IsOptional()
  workSheetTypes?: Array<WorkSheetType>;
}

export { Tenant as Tenant };
