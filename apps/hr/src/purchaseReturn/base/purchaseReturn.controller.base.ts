/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { PurchaseReturnService } from "../purchaseReturn.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { PurchaseReturnCreateInput } from "./PurchaseReturnCreateInput";
import { PurchaseReturn } from "./PurchaseReturn";
import { PurchaseReturnFindManyArgs } from "./PurchaseReturnFindManyArgs";
import { PurchaseReturnWhereUniqueInput } from "./PurchaseReturnWhereUniqueInput";
import { PurchaseReturnUpdateInput } from "./PurchaseReturnUpdateInput";
import { PurchaseReturnDetailFindManyArgs } from "../../purchaseReturnDetail/base/PurchaseReturnDetailFindManyArgs";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { PurchaseReturnDetailWhereUniqueInput } from "../../purchaseReturnDetail/base/PurchaseReturnDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class PurchaseReturnControllerBase {
  constructor(
    protected readonly service: PurchaseReturnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PurchaseReturn })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createPurchaseReturn(
    @common.Body() data: PurchaseReturnCreateInput
  ): Promise<PurchaseReturn> {
    return await this.service.createPurchaseReturn({
      data: {
        ...data,

        cashRepositoryId: {
          connect: data.cashRepositoryId,
        },

        invoiceTypeId: data.invoiceTypeId
          ? {
              connect: data.invoiceTypeId,
            }
          : undefined,

        paymentTermId: data.paymentTermId
          ? {
              connect: data.paymentTermId,
            }
          : undefined,

        paymentTypeId: {
          connect: data.paymentTypeId,
        },

        purchaseId: data.purchaseId
          ? {
              connect: data.purchaseId,
            }
          : undefined,

        purchasePriceTypeId: {
          connect: data.purchasePriceTypeId,
        },

        storeId: {
          connect: data.storeId,
        },

        supplierId: {
          connect: data.supplierId,
        },

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnDate: true,
        purchaseReturnTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [PurchaseReturn] })
  @ApiNestedQuery(PurchaseReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchaseReturns(
    @common.Req() request: Request
  ): Promise<PurchaseReturn[]> {
    const args = plainToClass(PurchaseReturnFindManyArgs, request.query);
    return this.service.purchaseReturns({
      ...args,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnDate: true,
        purchaseReturnTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PurchaseReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async purchaseReturn(
    @common.Param() params: PurchaseReturnWhereUniqueInput
  ): Promise<PurchaseReturn | null> {
    const result = await this.service.purchaseReturn({
      where: params,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTermId: {
          select: {
            id: true,
          },
        },

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        purchaseId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnDate: true,
        purchaseReturnTotal: true,
        referenceNumber: true,
        remaining: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        supplierId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PurchaseReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updatePurchaseReturn(
    @common.Param() params: PurchaseReturnWhereUniqueInput,
    @common.Body() data: PurchaseReturnUpdateInput
  ): Promise<PurchaseReturn | null> {
    try {
      return await this.service.updatePurchaseReturn({
        where: params,
        data: {
          ...data,

          cashRepositoryId: {
            connect: data.cashRepositoryId,
          },

          invoiceTypeId: data.invoiceTypeId
            ? {
                connect: data.invoiceTypeId,
              }
            : undefined,

          paymentTermId: data.paymentTermId
            ? {
                connect: data.paymentTermId,
              }
            : undefined,

          paymentTypeId: {
            connect: data.paymentTypeId,
          },

          purchaseId: data.purchaseId
            ? {
                connect: data.purchaseId,
              }
            : undefined,

          purchasePriceTypeId: {
            connect: data.purchasePriceTypeId,
          },

          storeId: {
            connect: data.storeId,
          },

          supplierId: {
            connect: data.supplierId,
          },

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTermId: {
            select: {
              id: true,
            },
          },

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          purchaseId: {
            select: {
              id: true,
            },
          },

          purchasePriceTypeId: {
            select: {
              id: true,
            },
          },

          purchaseReturnDate: true,
          purchaseReturnTotal: true,
          referenceNumber: true,
          remaining: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PurchaseReturn })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deletePurchaseReturn(
    @common.Param() params: PurchaseReturnWhereUniqueInput
  ): Promise<PurchaseReturn | null> {
    try {
      return await this.service.deletePurchaseReturn({
        where: params,
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTermId: {
            select: {
              id: true,
            },
          },

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          purchaseId: {
            select: {
              id: true,
            },
          },

          purchasePriceTypeId: {
            select: {
              id: true,
            },
          },

          purchaseReturnDate: true,
          purchaseReturnTotal: true,
          referenceNumber: true,
          remaining: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          supplierId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseReturnDetails")
  @ApiNestedQuery(PurchaseReturnDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturnDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnDetails(
    @common.Req() request: Request,
    @common.Param() params: PurchaseReturnWhereUniqueInput
  ): Promise<PurchaseReturnDetail[]> {
    const query = plainToClass(PurchaseReturnDetailFindManyArgs, request.query);
    const results = await this.service.findPurchaseReturnDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        isTaxed: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        purchasePriceTypeId: {
          select: {
            id: true,
          },
        },

        purchaseReturnId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "update",
    possession: "any",
  })
  async connectPurchaseReturnDetails(
    @common.Param() params: PurchaseReturnWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        connect: body,
      },
    };
    await this.service.updatePurchaseReturn({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturnDetails(
    @common.Param() params: PurchaseReturnWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        set: body,
      },
    };
    await this.service.updatePurchaseReturn({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseReturnDetails")
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturn",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseReturnDetails(
    @common.Param() params: PurchaseReturnWhereUniqueInput,
    @common.Body() body: PurchaseReturnDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnDetails: {
        disconnect: body,
      },
    };
    await this.service.updatePurchaseReturn({
      where: params,
      data,
      select: { id: true },
    });
  }
}
