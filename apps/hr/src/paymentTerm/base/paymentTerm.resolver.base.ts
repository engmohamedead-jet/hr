/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PaymentTerm } from "./PaymentTerm";
import { PaymentTermCountArgs } from "./PaymentTermCountArgs";
import { PaymentTermFindManyArgs } from "./PaymentTermFindManyArgs";
import { PaymentTermFindUniqueArgs } from "./PaymentTermFindUniqueArgs";
import { CreatePaymentTermArgs } from "./CreatePaymentTermArgs";
import { UpdatePaymentTermArgs } from "./UpdatePaymentTermArgs";
import { DeletePaymentTermArgs } from "./DeletePaymentTermArgs";
import { Period } from "../../period/base/Period";
import { InstallmentSaleFee } from "../../installmentSaleFee/base/InstallmentSaleFee";
import { PaymentTermService } from "../paymentTerm.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PaymentTerm)
export class PaymentTermResolverBase {
  constructor(
    protected readonly service: PaymentTermService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async _paymentTermsMeta(
    @graphql.Args() args: PaymentTermCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PaymentTerm])
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async paymentTerms(
    @graphql.Args() args: PaymentTermFindManyArgs
  ): Promise<PaymentTerm[]> {
    return this.service.paymentTerms(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PaymentTerm, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "own",
  })
  async paymentTerm(
    @graphql.Args() args: PaymentTermFindUniqueArgs
  ): Promise<PaymentTerm | null> {
    const result = await this.service.paymentTerm(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTerm)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "create",
    possession: "any",
  })
  async createPaymentTerm(
    @graphql.Args() args: CreatePaymentTermArgs
  ): Promise<PaymentTerm> {
    return await this.service.createPaymentTerm({
      ...args,
      data: {
        ...args.data,

        duePeriodId: args.data.duePeriodId
          ? {
              connect: args.data.duePeriodId,
            }
          : undefined,

        installmentSaleFeeId: args.data.installmentSaleFeeId
          ? {
              connect: args.data.installmentSaleFeeId,
            }
          : undefined,

        installmentSaleFeePostingPeriodId: args.data
          .installmentSaleFeePostingPeriodId
          ? {
              connect: args.data.installmentSaleFeePostingPeriodId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PaymentTerm)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "update",
    possession: "any",
  })
  async updatePaymentTerm(
    @graphql.Args() args: UpdatePaymentTermArgs
  ): Promise<PaymentTerm | null> {
    try {
      return await this.service.updatePaymentTerm({
        ...args,
        data: {
          ...args.data,

          duePeriodId: args.data.duePeriodId
            ? {
                connect: args.data.duePeriodId,
              }
            : undefined,

          installmentSaleFeeId: args.data.installmentSaleFeeId
            ? {
                connect: args.data.installmentSaleFeeId,
              }
            : undefined,

          installmentSaleFeePostingPeriodId: args.data
            .installmentSaleFeePostingPeriodId
            ? {
                connect: args.data.installmentSaleFeePostingPeriodId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PaymentTerm)
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "delete",
    possession: "any",
  })
  async deletePaymentTerm(
    @graphql.Args() args: DeletePaymentTermArgs
  ): Promise<PaymentTerm | null> {
    try {
      return await this.service.deletePaymentTerm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Period, {
    nullable: true,
    name: "duePeriodId",
  })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "any",
  })
  async getDuePeriodId(
    @graphql.Parent() parent: PaymentTerm
  ): Promise<Period | null> {
    const result = await this.service.getDuePeriodId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InstallmentSaleFee, {
    nullable: true,
    name: "installmentSaleFeeId",
  })
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async getInstallmentSaleFeeId(
    @graphql.Parent() parent: PaymentTerm
  ): Promise<InstallmentSaleFee | null> {
    const result = await this.service.getInstallmentSaleFeeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Period, {
    nullable: true,
    name: "installmentSaleFeePostingPeriodId",
  })
  @nestAccessControl.UseRoles({
    resource: "Period",
    action: "read",
    possession: "any",
  })
  async getInstallmentSaleFeePostingPeriodId(
    @graphql.Parent() parent: PaymentTerm
  ): Promise<Period | null> {
    const result = await this.service.getInstallmentSaleFeePostingPeriodId(
      parent.id
    );

    if (!result) {
      return null;
    }
    return result;
  }
}
