/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OverNightRequest } from "./OverNightRequest";
import { OverNightRequestCountArgs } from "./OverNightRequestCountArgs";
import { OverNightRequestFindManyArgs } from "./OverNightRequestFindManyArgs";
import { OverNightRequestFindUniqueArgs } from "./OverNightRequestFindUniqueArgs";
import { CreateOverNightRequestArgs } from "./CreateOverNightRequestArgs";
import { UpdateOverNightRequestArgs } from "./UpdateOverNightRequestArgs";
import { DeleteOverNightRequestArgs } from "./DeleteOverNightRequestArgs";
import { User } from "../../user/base/User";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { OverNightRequestService } from "../overNightRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OverNightRequest)
export class OverNightRequestResolverBase {
  constructor(
    protected readonly service: OverNightRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "any",
  })
  async _overNightRequestsMeta(
    @graphql.Args() args: OverNightRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OverNightRequest])
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "any",
  })
  async overNightRequests(
    @graphql.Args() args: OverNightRequestFindManyArgs
  ): Promise<OverNightRequest[]> {
    return this.service.overNightRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OverNightRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "own",
  })
  async overNightRequest(
    @graphql.Args() args: OverNightRequestFindUniqueArgs
  ): Promise<OverNightRequest | null> {
    const result = await this.service.overNightRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OverNightRequest)
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "create",
    possession: "any",
  })
  async createOverNightRequest(
    @graphql.Args() args: CreateOverNightRequestArgs
  ): Promise<OverNightRequest> {
    return await this.service.createOverNightRequest({
      ...args,
      data: {
        ...args.data,

        approvedByUserId: args.data.approvedByUserId
          ? {
              connect: args.data.approvedByUserId,
            }
          : undefined,

        employeeId: {
          connect: args.data.employeeId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OverNightRequest)
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "update",
    possession: "any",
  })
  async updateOverNightRequest(
    @graphql.Args() args: UpdateOverNightRequestArgs
  ): Promise<OverNightRequest | null> {
    try {
      return await this.service.updateOverNightRequest({
        ...args,
        data: {
          ...args.data,

          approvedByUserId: args.data.approvedByUserId
            ? {
                connect: args.data.approvedByUserId,
              }
            : undefined,

          employeeId: {
            connect: args.data.employeeId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OverNightRequest)
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "delete",
    possession: "any",
  })
  async deleteOverNightRequest(
    @graphql.Args() args: DeleteOverNightRequestArgs
  ): Promise<OverNightRequest | null> {
    try {
      return await this.service.deleteOverNightRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "approvedByUserId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getApprovedByUserId(
    @graphql.Parent() parent: OverNightRequest
  ): Promise<User | null> {
    const result = await this.service.getApprovedByUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employeeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployeeId(
    @graphql.Parent() parent: OverNightRequest
  ): Promise<Employee | null> {
    const result = await this.service.getEmployeeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: OverNightRequest
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
