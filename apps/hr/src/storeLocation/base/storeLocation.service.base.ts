/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  StoreLocation as PrismaStoreLocation,
  Store as PrismaStore,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class StoreLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StoreLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.storeLocation.count(args);
  }

  async storeLocations(
    args: Prisma.StoreLocationFindManyArgs
  ): Promise<PrismaStoreLocation[]> {
    return this.prisma.storeLocation.findMany(args);
  }
  async storeLocation(
    args: Prisma.StoreLocationFindUniqueArgs
  ): Promise<PrismaStoreLocation | null> {
    return this.prisma.storeLocation.findUnique(args);
  }
  async createStoreLocation(
    args: Prisma.StoreLocationCreateArgs
  ): Promise<PrismaStoreLocation> {
    return this.prisma.storeLocation.create(args);
  }
  async updateStoreLocation(
    args: Prisma.StoreLocationUpdateArgs
  ): Promise<PrismaStoreLocation> {
    return this.prisma.storeLocation.update(args);
  }
  async deleteStoreLocation(
    args: Prisma.StoreLocationDeleteArgs
  ): Promise<PrismaStoreLocation> {
    return this.prisma.storeLocation.delete(args);
  }

  async getStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.storeLocation
      .findUnique({
        where: { id: parentId },
      })
      .storeId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.storeLocation
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
