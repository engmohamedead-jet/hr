/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeSalaryDetail } from "./EmployeeSalaryDetail";
import { EmployeeSalaryDetailCountArgs } from "./EmployeeSalaryDetailCountArgs";
import { EmployeeSalaryDetailFindManyArgs } from "./EmployeeSalaryDetailFindManyArgs";
import { EmployeeSalaryDetailFindUniqueArgs } from "./EmployeeSalaryDetailFindUniqueArgs";
import { CreateEmployeeSalaryDetailArgs } from "./CreateEmployeeSalaryDetailArgs";
import { UpdateEmployeeSalaryDetailArgs } from "./UpdateEmployeeSalaryDetailArgs";
import { DeleteEmployeeSalaryDetailArgs } from "./DeleteEmployeeSalaryDetailArgs";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { EmployeeSalaryDetailService } from "../employeeSalaryDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeSalaryDetail)
export class EmployeeSalaryDetailResolverBase {
  constructor(
    protected readonly service: EmployeeSalaryDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "any",
  })
  async _employeeSalaryDetailsMeta(
    @graphql.Args() args: EmployeeSalaryDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeSalaryDetail])
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "any",
  })
  async employeeSalaryDetails(
    @graphql.Args() args: EmployeeSalaryDetailFindManyArgs
  ): Promise<EmployeeSalaryDetail[]> {
    return this.service.employeeSalaryDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeSalaryDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "own",
  })
  async employeeSalaryDetail(
    @graphql.Args() args: EmployeeSalaryDetailFindUniqueArgs
  ): Promise<EmployeeSalaryDetail | null> {
    const result = await this.service.employeeSalaryDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeSalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "create",
    possession: "any",
  })
  async createEmployeeSalaryDetail(
    @graphql.Args() args: CreateEmployeeSalaryDetailArgs
  ): Promise<EmployeeSalaryDetail> {
    return await this.service.createEmployeeSalaryDetail({
      ...args,
      data: {
        ...args.data,

        salaryItemId: {
          connect: args.data.salaryItemId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeSalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "update",
    possession: "any",
  })
  async updateEmployeeSalaryDetail(
    @graphql.Args() args: UpdateEmployeeSalaryDetailArgs
  ): Promise<EmployeeSalaryDetail | null> {
    try {
      return await this.service.updateEmployeeSalaryDetail({
        ...args,
        data: {
          ...args.data,

          salaryItemId: {
            connect: args.data.salaryItemId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeSalaryDetail)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeSalaryDetail(
    @graphql.Args() args: DeleteEmployeeSalaryDetailArgs
  ): Promise<EmployeeSalaryDetail | null> {
    try {
      return await this.service.deleteEmployeeSalaryDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalaryItem, {
    nullable: true,
    name: "salaryItemId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async getSalaryItemId(
    @graphql.Parent() parent: EmployeeSalaryDetail
  ): Promise<SalaryItem | null> {
    const result = await this.service.getSalaryItemId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
