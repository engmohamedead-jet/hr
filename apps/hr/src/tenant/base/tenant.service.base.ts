/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Tenant as PrismaTenant,
  Account as PrismaAccount,
  ApplicationDependency as PrismaApplicationDependency,
  Application as PrismaApplication,
  AttributeValue as PrismaAttributeValue,
  Attribute as PrismaAttribute,
  BankBranch as PrismaBankBranch,
  BankType as PrismaBankType,
  BarcodeType as PrismaBarcodeType,
  BillOfMaterialDetail as PrismaBillOfMaterialDetail,
  BillOfMaterialType as PrismaBillOfMaterialType,
  BillOfMaterial as PrismaBillOfMaterial,
  CashRepository as PrismaCashRepository,
  Currency as PrismaCurrency,
  Customer as PrismaCustomer,
  EmployeeClass as PrismaEmployeeClass,
  EmployeeDepartment as PrismaEmployeeDepartment,
  Employee as PrismaEmployee,
  ExpenseItem as PrismaExpenseItem,
  InstallmentSaleFee as PrismaInstallmentSaleFee,
  InvoiceType as PrismaInvoiceType,
  OrderStatus as PrismaOrderStatus,
  PaymentMethod as PrismaPaymentMethod,
  PaymentStatus as PrismaPaymentStatus,
  PaymentTerm as PrismaPaymentTerm,
  PaymentType as PrismaPaymentType,
  PaymentVoucher as PrismaPaymentVoucher,
  Period as PrismaPeriod,
  PrintTemplateContent as PrismaPrintTemplateContent,
  PrintTemplateGroup as PrismaPrintTemplateGroup,
  PrintTemplate as PrismaPrintTemplate,
  ProductBarcode as PrismaProductBarcode,
  ProductCategory as PrismaProductCategory,
  ProductDepartment as PrismaProductDepartment,
  ProductGroup as PrismaProductGroup,
  ProductType as PrismaProductType,
  ProductUnit as PrismaProductUnit,
  ProductVariant as PrismaProductVariant,
  ProductionAvailability as PrismaProductionAvailability,
  ProductionDocument as PrismaProductionDocument,
  ProductionOrder as PrismaProductionOrder,
  Product as PrismaProduct,
  PurchaseDetail as PrismaPurchaseDetail,
  PurchasePriceType as PrismaPurchasePriceType,
  PurchaseReturnDetail as PrismaPurchaseReturnDetail,
  PurchaseReturn as PrismaPurchaseReturn,
  Purchase as PrismaPurchase,
  ReceiptVoucher as PrismaReceiptVoucher,
  ResourceType as PrismaResourceType,
  Resource as PrismaResource,
  RoleGroup as PrismaRoleGroup,
  SalaryItemGroup as PrismaSalaryItemGroup,
  SalaryItemType as PrismaSalaryItemType,
  SalaryItem as PrismaSalaryItem,
  SalaryLaw as PrismaSalaryLaw,
  SaleDetail as PrismaSaleDetail,
  SaleOrderDetail as PrismaSaleOrderDetail,
  SaleOrder as PrismaSaleOrder,
  SalePayment as PrismaSalePayment,
  SalePerson as PrismaSalePerson,
  SalePriceType as PrismaSalePriceType,
  SaleQuotationDetail as PrismaSaleQuotationDetail,
  SaleQuotation as PrismaSaleQuotation,
  SaleReturnDetail as PrismaSaleReturnDetail,
  SaleReturn as PrismaSaleReturn,
  SaleTax as PrismaSaleTax,
  SaleTeam as PrismaSaleTeam,
  Sale as PrismaSale,
  ScrapReason as PrismaScrapReason,
  SettingGroup as PrismaSettingGroup,
  Setting as PrismaSetting,
  Shift as PrismaShift,
  ShippingStatus as PrismaShippingStatus,
  StoreLocation as PrismaStoreLocation,
  StoreType as PrismaStoreType,
  Store as PrismaStore,
  Supplier as PrismaSupplier,
  TimeMode as PrismaTimeMode,
  TimeoffType as PrismaTimeoffType,
  Unit as PrismaUnit,
  User as PrismaUser,
  VoucherType as PrismaVoucherType,
  WorkCenterRouting as PrismaWorkCenterRouting,
  WorkCenter as PrismaWorkCenter,
} from "@prisma/client";

export class TenantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TenantCountArgs, "select">): Promise<number> {
    return this.prisma.tenant.count(args);
  }

  async tenants(args: Prisma.TenantFindManyArgs): Promise<PrismaTenant[]> {
    return this.prisma.tenant.findMany(args);
  }
  async tenant(
    args: Prisma.TenantFindUniqueArgs
  ): Promise<PrismaTenant | null> {
    return this.prisma.tenant.findUnique(args);
  }
  async createTenant(args: Prisma.TenantCreateArgs): Promise<PrismaTenant> {
    return this.prisma.tenant.create(args);
  }
  async updateTenant(args: Prisma.TenantUpdateArgs): Promise<PrismaTenant> {
    return this.prisma.tenant.update(args);
  }
  async deleteTenant(args: Prisma.TenantDeleteArgs): Promise<PrismaTenant> {
    return this.prisma.tenant.delete(args);
  }

  async findAccounts(
    parentId: string,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }

  async findApplicationDependencies(
    parentId: string,
    args: Prisma.ApplicationDependencyFindManyArgs
  ): Promise<PrismaApplicationDependency[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applicationDependencies(args);
  }

  async findApplications(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .applications(args);
  }

  async findAttributeValues(
    parentId: string,
    args: Prisma.AttributeValueFindManyArgs
  ): Promise<PrismaAttributeValue[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attributeValues(args);
  }

  async findAttributes(
    parentId: string,
    args: Prisma.AttributeFindManyArgs
  ): Promise<PrismaAttribute[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attributes(args);
  }

  async findBankBranches(
    parentId: string,
    args: Prisma.BankBranchFindManyArgs
  ): Promise<PrismaBankBranch[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankBranches(args);
  }

  async findBankTypes(
    parentId: string,
    args: Prisma.BankTypeFindManyArgs
  ): Promise<PrismaBankType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankTypes(args);
  }

  async findBarcodeTypes(
    parentId: string,
    args: Prisma.BarcodeTypeFindManyArgs
  ): Promise<PrismaBarcodeType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .barcodeTypes(args);
  }

  async findBillOfMaterialDetails(
    parentId: string,
    args: Prisma.BillOfMaterialDetailFindManyArgs
  ): Promise<PrismaBillOfMaterialDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billOfMaterialDetails(args);
  }

  async findBillOfMaterialTypes(
    parentId: string,
    args: Prisma.BillOfMaterialTypeFindManyArgs
  ): Promise<PrismaBillOfMaterialType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billOfMaterialTypes(args);
  }

  async findBillOfMaterials(
    parentId: string,
    args: Prisma.BillOfMaterialFindManyArgs
  ): Promise<PrismaBillOfMaterial[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .billOfMaterials(args);
  }

  async findCashRepositories(
    parentId: string,
    args: Prisma.CashRepositoryFindManyArgs
  ): Promise<PrismaCashRepository[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .cashRepositories(args);
  }

  async findCurrencies(
    parentId: string,
    args: Prisma.CurrencyFindManyArgs
  ): Promise<PrismaCurrency[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .currencies(args);
  }

  async findCustomers(
    parentId: string,
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .customers(args);
  }

  async findEmployeeClasses(
    parentId: string,
    args: Prisma.EmployeeClassFindManyArgs
  ): Promise<PrismaEmployeeClass[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeClasses(args);
  }

  async findEmployeeDepartments(
    parentId: string,
    args: Prisma.EmployeeDepartmentFindManyArgs
  ): Promise<PrismaEmployeeDepartment[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeDepartments(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }

  async findExpenseItems(
    parentId: string,
    args: Prisma.ExpenseItemFindManyArgs
  ): Promise<PrismaExpenseItem[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .expenseItems(args);
  }

  async findInstallmentSaleFees(
    parentId: string,
    args: Prisma.InstallmentSaleFeeFindManyArgs
  ): Promise<PrismaInstallmentSaleFee[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .installmentSaleFees(args);
  }

  async findInvoiceTypes(
    parentId: string,
    args: Prisma.InvoiceTypeFindManyArgs
  ): Promise<PrismaInvoiceType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .invoiceTypes(args);
  }

  async findOrderStatuses(
    parentId: string,
    args: Prisma.OrderStatusFindManyArgs
  ): Promise<PrismaOrderStatus[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .orderStatuses(args);
  }

  async findPaymentMethods(
    parentId: string,
    args: Prisma.PaymentMethodFindManyArgs
  ): Promise<PrismaPaymentMethod[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentMethods(args);
  }

  async findPaymentStatuses(
    parentId: string,
    args: Prisma.PaymentStatusFindManyArgs
  ): Promise<PrismaPaymentStatus[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentStatuses(args);
  }

  async findPaymentTerms(
    parentId: string,
    args: Prisma.PaymentTermFindManyArgs
  ): Promise<PrismaPaymentTerm[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentTerms(args);
  }

  async findPaymentTypes(
    parentId: string,
    args: Prisma.PaymentTypeFindManyArgs
  ): Promise<PrismaPaymentType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentTypes(args);
  }

  async findPaymentVouchers(
    parentId: string,
    args: Prisma.PaymentVoucherFindManyArgs
  ): Promise<PrismaPaymentVoucher[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentVouchers(args);
  }

  async findPeriods(
    parentId: string,
    args: Prisma.PeriodFindManyArgs
  ): Promise<PrismaPeriod[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .periods(args);
  }

  async findPrintTemplateContents(
    parentId: string,
    args: Prisma.PrintTemplateContentFindManyArgs
  ): Promise<PrismaPrintTemplateContent[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .printTemplateContents(args);
  }

  async findPrintTemplateGroups(
    parentId: string,
    args: Prisma.PrintTemplateGroupFindManyArgs
  ): Promise<PrismaPrintTemplateGroup[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .printTemplateGroups(args);
  }

  async findPrintTemplates(
    parentId: string,
    args: Prisma.PrintTemplateFindManyArgs
  ): Promise<PrismaPrintTemplate[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .printTemplates(args);
  }

  async findProductBarcodes(
    parentId: string,
    args: Prisma.ProductBarcodeFindManyArgs
  ): Promise<PrismaProductBarcode[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productBarcodes(args);
  }

  async findProductCategories(
    parentId: string,
    args: Prisma.ProductCategoryFindManyArgs
  ): Promise<PrismaProductCategory[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productCategories(args);
  }

  async findProductDepartments(
    parentId: string,
    args: Prisma.ProductDepartmentFindManyArgs
  ): Promise<PrismaProductDepartment[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productDepartments(args);
  }

  async findProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroups(args);
  }

  async findProductTypes(
    parentId: string,
    args: Prisma.ProductTypeFindManyArgs
  ): Promise<PrismaProductType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productTypes(args);
  }

  async findProductUnits(
    parentId: string,
    args: Prisma.ProductUnitFindManyArgs
  ): Promise<PrismaProductUnit[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productUnits(args);
  }

  async findProductVariants(
    parentId: string,
    args: Prisma.ProductVariantFindManyArgs
  ): Promise<PrismaProductVariant[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productVariants(args);
  }

  async findProductionAvailabilities(
    parentId: string,
    args: Prisma.ProductionAvailabilityFindManyArgs
  ): Promise<PrismaProductionAvailability[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionAvailabilities(args);
  }

  async findProductionDocuments(
    parentId: string,
    args: Prisma.ProductionDocumentFindManyArgs
  ): Promise<PrismaProductionDocument[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionDocuments(args);
  }

  async findProductionOrders(
    parentId: string,
    args: Prisma.ProductionOrderFindManyArgs
  ): Promise<PrismaProductionOrder[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionOrders(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }

  async findPurchaseDetails(
    parentId: string,
    args: Prisma.PurchaseDetailFindManyArgs
  ): Promise<PrismaPurchaseDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseDetails(args);
  }

  async findPurchasePriceTypes(
    parentId: string,
    args: Prisma.PurchasePriceTypeFindManyArgs
  ): Promise<PrismaPurchasePriceType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchasePriceTypes(args);
  }

  async findPurchaseReturnDetails(
    parentId: string,
    args: Prisma.PurchaseReturnDetailFindManyArgs
  ): Promise<PrismaPurchaseReturnDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturnDetails(args);
  }

  async findPurchaseReturns(
    parentId: string,
    args: Prisma.PurchaseReturnFindManyArgs
  ): Promise<PrismaPurchaseReturn[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturns(args);
  }

  async findPurchases(
    parentId: string,
    args: Prisma.PurchaseFindManyArgs
  ): Promise<PrismaPurchase[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchases(args);
  }

  async findReceiptVouchers(
    parentId: string,
    args: Prisma.ReceiptVoucherFindManyArgs
  ): Promise<PrismaReceiptVoucher[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receiptVouchers(args);
  }

  async findResourceTypes(
    parentId: string,
    args: Prisma.ResourceTypeFindManyArgs
  ): Promise<PrismaResourceType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .resourceTypes(args);
  }

  async findResources(
    parentId: string,
    args: Prisma.ResourceFindManyArgs
  ): Promise<PrismaResource[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .resources(args);
  }

  async findRoleGroups(
    parentId: string,
    args: Prisma.RoleGroupFindManyArgs
  ): Promise<PrismaRoleGroup[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .roleGroups(args);
  }

  async findSalaryItemGroups(
    parentId: string,
    args: Prisma.SalaryItemGroupFindManyArgs
  ): Promise<PrismaSalaryItemGroup[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaryItemGroups(args);
  }

  async findSalaryItemTypes(
    parentId: string,
    args: Prisma.SalaryItemTypeFindManyArgs
  ): Promise<PrismaSalaryItemType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaryItemTypes(args);
  }

  async findSalaryItems(
    parentId: string,
    args: Prisma.SalaryItemFindManyArgs
  ): Promise<PrismaSalaryItem[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaryItems(args);
  }

  async findSalaryLaws(
    parentId: string,
    args: Prisma.SalaryLawFindManyArgs
  ): Promise<PrismaSalaryLaw[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaryLaws(args);
  }

  async findSaleDetails(
    parentId: string,
    args: Prisma.SaleDetailFindManyArgs
  ): Promise<PrismaSaleDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleDetails(args);
  }

  async findSaleOrderDetails(
    parentId: string,
    args: Prisma.SaleOrderDetailFindManyArgs
  ): Promise<PrismaSaleOrderDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleOrderDetails(args);
  }

  async findSaleOrders(
    parentId: string,
    args: Prisma.SaleOrderFindManyArgs
  ): Promise<PrismaSaleOrder[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleOrders(args);
  }

  async findSalePayments(
    parentId: string,
    args: Prisma.SalePaymentFindManyArgs
  ): Promise<PrismaSalePayment[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salePayments(args);
  }

  async findSalePeople(
    parentId: string,
    args: Prisma.SalePersonFindManyArgs
  ): Promise<PrismaSalePerson[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salePeople(args);
  }

  async findSalePriceTypes(
    parentId: string,
    args: Prisma.SalePriceTypeFindManyArgs
  ): Promise<PrismaSalePriceType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salePriceTypes(args);
  }

  async findSaleQuotationDetails(
    parentId: string,
    args: Prisma.SaleQuotationDetailFindManyArgs
  ): Promise<PrismaSaleQuotationDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleQuotationDetails(args);
  }

  async findSaleQuotations(
    parentId: string,
    args: Prisma.SaleQuotationFindManyArgs
  ): Promise<PrismaSaleQuotation[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleQuotations(args);
  }

  async findSaleReturnDetails(
    parentId: string,
    args: Prisma.SaleReturnDetailFindManyArgs
  ): Promise<PrismaSaleReturnDetail[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturnDetails(args);
  }

  async findSaleReturns(
    parentId: string,
    args: Prisma.SaleReturnFindManyArgs
  ): Promise<PrismaSaleReturn[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturns(args);
  }

  async findSaleTaxes(
    parentId: string,
    args: Prisma.SaleTaxFindManyArgs
  ): Promise<PrismaSaleTax[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleTaxes(args);
  }

  async findSaleTeams(
    parentId: string,
    args: Prisma.SaleTeamFindManyArgs
  ): Promise<PrismaSaleTeam[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleTeams(args);
  }

  async findSales(
    parentId: string,
    args: Prisma.SaleFindManyArgs
  ): Promise<PrismaSale[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sales(args);
  }

  async findScrapReasons(
    parentId: string,
    args: Prisma.ScrapReasonFindManyArgs
  ): Promise<PrismaScrapReason[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .scrapReasons(args);
  }

  async findSettingGroups(
    parentId: string,
    args: Prisma.SettingGroupFindManyArgs
  ): Promise<PrismaSettingGroup[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .settingGroups(args);
  }

  async findSettings(
    parentId: string,
    args: Prisma.SettingFindManyArgs
  ): Promise<PrismaSetting[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .settings(args);
  }

  async findShifts(
    parentId: string,
    args: Prisma.ShiftFindManyArgs
  ): Promise<PrismaShift[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shifts(args);
  }

  async findShippingStatuses(
    parentId: string,
    args: Prisma.ShippingStatusFindManyArgs
  ): Promise<PrismaShippingStatus[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .shippingStatuses(args);
  }

  async findStoreLocations(
    parentId: string,
    args: Prisma.StoreLocationFindManyArgs
  ): Promise<PrismaStoreLocation[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .storeLocations(args);
  }

  async findStoreTypes(
    parentId: string,
    args: Prisma.StoreTypeFindManyArgs
  ): Promise<PrismaStoreType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .storeTypes(args);
  }

  async findStores(
    parentId: string,
    args: Prisma.StoreFindManyArgs
  ): Promise<PrismaStore[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .stores(args);
  }

  async findSuppliers(
    parentId: string,
    args: Prisma.SupplierFindManyArgs
  ): Promise<PrismaSupplier[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .suppliers(args);
  }

  async findTimeModes(
    parentId: string,
    args: Prisma.TimeModeFindManyArgs
  ): Promise<PrismaTimeMode[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeModes(args);
  }

  async findTimeoffTypes(
    parentId: string,
    args: Prisma.TimeoffTypeFindManyArgs
  ): Promise<PrismaTimeoffType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .timeoffTypes(args);
  }

  async findUnits(
    parentId: string,
    args: Prisma.UnitFindManyArgs
  ): Promise<PrismaUnit[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .units(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }

  async findVoucherTypes(
    parentId: string,
    args: Prisma.VoucherTypeFindManyArgs
  ): Promise<PrismaVoucherType[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .voucherTypes(args);
  }

  async findWorkCenterRoutings(
    parentId: string,
    args: Prisma.WorkCenterRoutingFindManyArgs
  ): Promise<PrismaWorkCenterRouting[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterRoutings(args);
  }

  async findWorkCenters(
    parentId: string,
    args: Prisma.WorkCenterFindManyArgs
  ): Promise<PrismaWorkCenter[]> {
    return this.prisma.tenant
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenters(args);
  }
}
