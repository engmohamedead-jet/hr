/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PressType } from "./PressType";
import { PressTypeCountArgs } from "./PressTypeCountArgs";
import { PressTypeFindManyArgs } from "./PressTypeFindManyArgs";
import { PressTypeFindUniqueArgs } from "./PressTypeFindUniqueArgs";
import { CreatePressTypeArgs } from "./CreatePressTypeArgs";
import { UpdatePressTypeArgs } from "./UpdatePressTypeArgs";
import { DeletePressTypeArgs } from "./DeletePressTypeArgs";
import { PressTypeService } from "../pressType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PressType)
export class PressTypeResolverBase {
  constructor(
    protected readonly service: PressTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "read",
    possession: "any",
  })
  async _pressTypesMeta(
    @graphql.Args() args: PressTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PressType])
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "read",
    possession: "any",
  })
  async pressTypes(
    @graphql.Args() args: PressTypeFindManyArgs
  ): Promise<PressType[]> {
    return this.service.pressTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PressType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "read",
    possession: "own",
  })
  async pressType(
    @graphql.Args() args: PressTypeFindUniqueArgs
  ): Promise<PressType | null> {
    const result = await this.service.pressType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PressType)
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "create",
    possession: "any",
  })
  async createPressType(
    @graphql.Args() args: CreatePressTypeArgs
  ): Promise<PressType> {
    return await this.service.createPressType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PressType)
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "update",
    possession: "any",
  })
  async updatePressType(
    @graphql.Args() args: UpdatePressTypeArgs
  ): Promise<PressType | null> {
    try {
      return await this.service.updatePressType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PressType)
  @nestAccessControl.UseRoles({
    resource: "PressType",
    action: "delete",
    possession: "any",
  })
  async deletePressType(
    @graphql.Args() args: DeletePressTypeArgs
  ): Promise<PressType | null> {
    try {
      return await this.service.deletePressType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
