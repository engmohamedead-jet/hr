/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Period as PrismaPeriod,
  PaymentTerm as PrismaPaymentTerm,
} from "@prisma/client";

export class PeriodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PeriodCountArgs, "select">): Promise<number> {
    return this.prisma.period.count(args);
  }

  async periods(args: Prisma.PeriodFindManyArgs): Promise<PrismaPeriod[]> {
    return this.prisma.period.findMany(args);
  }
  async period(
    args: Prisma.PeriodFindUniqueArgs
  ): Promise<PrismaPeriod | null> {
    return this.prisma.period.findUnique(args);
  }
  async createPeriod(args: Prisma.PeriodCreateArgs): Promise<PrismaPeriod> {
    return this.prisma.period.create(args);
  }
  async updatePeriod(args: Prisma.PeriodUpdateArgs): Promise<PrismaPeriod> {
    return this.prisma.period.update(args);
  }
  async deletePeriod(args: Prisma.PeriodDeleteArgs): Promise<PrismaPeriod> {
    return this.prisma.period.delete(args);
  }

  async getInstallmentSaleFeePostingPeriod(
    parentId: string
  ): Promise<PrismaPaymentTerm | null> {
    return this.prisma.period
      .findUnique({
        where: { id: parentId },
      })
      .installmentSaleFeePostingPeriod();
  }

  async getPaymentTerms(parentId: string): Promise<PrismaPaymentTerm | null> {
    return this.prisma.period
      .findUnique({
        where: { id: parentId },
      })
      .paymentTerms();
  }
}
