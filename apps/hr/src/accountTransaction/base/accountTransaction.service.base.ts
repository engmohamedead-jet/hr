/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccountTransaction as PrismaAccountTransaction,
  PaymentVoucher as PrismaPaymentVoucher,
  ReceiptVoucher as PrismaReceiptVoucher,
} from "@prisma/client";

export class AccountTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountTransaction.count(args);
  }

  async accountTransactions(
    args: Prisma.AccountTransactionFindManyArgs
  ): Promise<PrismaAccountTransaction[]> {
    return this.prisma.accountTransaction.findMany(args);
  }
  async accountTransaction(
    args: Prisma.AccountTransactionFindUniqueArgs
  ): Promise<PrismaAccountTransaction | null> {
    return this.prisma.accountTransaction.findUnique(args);
  }
  async createAccountTransaction(
    args: Prisma.AccountTransactionCreateArgs
  ): Promise<PrismaAccountTransaction> {
    return this.prisma.accountTransaction.create(args);
  }
  async updateAccountTransaction(
    args: Prisma.AccountTransactionUpdateArgs
  ): Promise<PrismaAccountTransaction> {
    return this.prisma.accountTransaction.update(args);
  }
  async deleteAccountTransaction(
    args: Prisma.AccountTransactionDeleteArgs
  ): Promise<PrismaAccountTransaction> {
    return this.prisma.accountTransaction.delete(args);
  }

  async findPaymentVouchers(
    parentId: string,
    args: Prisma.PaymentVoucherFindManyArgs
  ): Promise<PrismaPaymentVoucher[]> {
    return this.prisma.accountTransaction
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentVouchers(args);
  }

  async getReceiptVouchers(
    parentId: string
  ): Promise<PrismaReceiptVoucher | null> {
    return this.prisma.accountTransaction
      .findUnique({
        where: { id: parentId },
      })
      .receiptVouchers();
  }
}
