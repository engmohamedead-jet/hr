/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeClass as PrismaEmployeeClass,
  EmployeeClassSalaryItemValue as PrismaEmployeeClassSalaryItemValue,
} from "@prisma/client";

export class EmployeeClassServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeClassCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeClass.count(args);
  }

  async employeeClasses(
    args: Prisma.EmployeeClassFindManyArgs
  ): Promise<PrismaEmployeeClass[]> {
    return this.prisma.employeeClass.findMany(args);
  }
  async employeeClass(
    args: Prisma.EmployeeClassFindUniqueArgs
  ): Promise<PrismaEmployeeClass | null> {
    return this.prisma.employeeClass.findUnique(args);
  }
  async createEmployeeClass(
    args: Prisma.EmployeeClassCreateArgs
  ): Promise<PrismaEmployeeClass> {
    return this.prisma.employeeClass.create(args);
  }
  async updateEmployeeClass(
    args: Prisma.EmployeeClassUpdateArgs
  ): Promise<PrismaEmployeeClass> {
    return this.prisma.employeeClass.update(args);
  }
  async deleteEmployeeClass(
    args: Prisma.EmployeeClassDeleteArgs
  ): Promise<PrismaEmployeeClass> {
    return this.prisma.employeeClass.delete(args);
  }

  async findEmployeeClassSalaryItemValues(
    parentId: string,
    args: Prisma.EmployeeClassSalaryItemValueFindManyArgs
  ): Promise<PrismaEmployeeClassSalaryItemValue[]> {
    return this.prisma.employeeClass
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeClassSalaryItemValues(args);
  }
}
