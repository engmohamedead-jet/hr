/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  IsBoolean,
  IsDate,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { ProductionOrder } from "../../productionOrder/base/ProductionOrder";
import { Product } from "../../product/base/Product";
import { PurchaseReturn } from "../../purchaseReturn/base/PurchaseReturn";
import { Purchase } from "../../purchase/base/Purchase";
import { SaleOrder } from "../../saleOrder/base/SaleOrder";
import { SaleReturn } from "../../saleReturn/base/SaleReturn";
import { Sale } from "../../sale/base/Sale";
import { StoreLocation } from "../../storeLocation/base/StoreLocation";
import { StoreType } from "../../storeType/base/StoreType";
import { Tenant } from "../../tenant/base/Tenant";

@ObjectType()
class Store {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  addressLine1!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowSale!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cellPhoneNumber!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fax!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  homePhoneNumber!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  isActive!: boolean;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(100)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: () => [ProductionOrder],
  })
  @ValidateNested()
  @Type(() => ProductionOrder)
  @IsOptional()
  productionOrders?: Array<ProductionOrder>;

  @ApiProperty({
    required: false,
    type: () => [Product],
  })
  @ValidateNested()
  @Type(() => Product)
  @IsOptional()
  products?: Array<Product>;

  @ApiProperty({
    required: false,
    type: () => [PurchaseReturn],
  })
  @ValidateNested()
  @Type(() => PurchaseReturn)
  @IsOptional()
  purchaseReturns?: Array<PurchaseReturn>;

  @ApiProperty({
    required: false,
    type: () => [Purchase],
  })
  @ValidateNested()
  @Type(() => Purchase)
  @IsOptional()
  purchases?: Array<Purchase>;

  @ApiProperty({
    required: false,
    type: () => [SaleOrder],
  })
  @ValidateNested()
  @Type(() => SaleOrder)
  @IsOptional()
  saleOrders?: Array<SaleOrder>;

  @ApiProperty({
    required: false,
    type: () => [SaleReturn],
  })
  @ValidateNested()
  @Type(() => SaleReturn)
  @IsOptional()
  saleReturns?: Array<SaleReturn>;

  @ApiProperty({
    required: false,
    type: () => [Sale],
  })
  @ValidateNested()
  @Type(() => Sale)
  @IsOptional()
  sales?: Array<Sale>;

  @ApiProperty({
    required: false,
    type: () => [StoreLocation],
  })
  @ValidateNested()
  @Type(() => StoreLocation)
  @IsOptional()
  storeLocations?: Array<StoreLocation>;

  @ApiProperty({
    required: false,
    type: () => StoreType,
  })
  @ValidateNested()
  @Type(() => StoreType)
  @IsOptional()
  storeTypId?: StoreType | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  street!: string | null;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenantId?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Store as Store };
