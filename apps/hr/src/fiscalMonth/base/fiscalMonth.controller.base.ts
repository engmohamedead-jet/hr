/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FiscalMonthService } from "../fiscalMonth.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FiscalMonthCreateInput } from "./FiscalMonthCreateInput";
import { FiscalMonth } from "./FiscalMonth";
import { FiscalMonthFindManyArgs } from "./FiscalMonthFindManyArgs";
import { FiscalMonthWhereUniqueInput } from "./FiscalMonthWhereUniqueInput";
import { FiscalMonthUpdateInput } from "./FiscalMonthUpdateInput";
import { EmployeeSalaryFindManyArgs } from "../../employeeSalary/base/EmployeeSalaryFindManyArgs";
import { EmployeeSalary } from "../../employeeSalary/base/EmployeeSalary";
import { EmployeeSalaryWhereUniqueInput } from "../../employeeSalary/base/EmployeeSalaryWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FiscalMonthControllerBase {
  constructor(
    protected readonly service: FiscalMonthService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FiscalMonth })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFiscalMonth(
    @common.Body() data: FiscalMonthCreateInput
  ): Promise<FiscalMonth> {
    return await this.service.createFiscalMonth({
      data: data,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        mormalizedName: true,
        name: true,
        note: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FiscalMonth] })
  @ApiNestedQuery(FiscalMonthFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async fiscalMonths(@common.Req() request: Request): Promise<FiscalMonth[]> {
    const args = plainToClass(FiscalMonthFindManyArgs, request.query);
    return this.service.fiscalMonths({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        mormalizedName: true,
        name: true,
        note: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FiscalMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async fiscalMonth(
    @common.Param() params: FiscalMonthWhereUniqueInput
  ): Promise<FiscalMonth | null> {
    const result = await this.service.fiscalMonth({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        mormalizedName: true,
        name: true,
        note: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FiscalMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFiscalMonth(
    @common.Param() params: FiscalMonthWhereUniqueInput,
    @common.Body() data: FiscalMonthUpdateInput
  ): Promise<FiscalMonth | null> {
    try {
      return await this.service.updateFiscalMonth({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          mormalizedName: true,
          name: true,
          note: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FiscalMonth })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFiscalMonth(
    @common.Param() params: FiscalMonthWhereUniqueInput
  ): Promise<FiscalMonth | null> {
    try {
      return await this.service.deleteFiscalMonth({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          mormalizedName: true,
          name: true,
          note: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeSalaries")
  @ApiNestedQuery(EmployeeSalaryFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "read",
    possession: "any",
  })
  async findEmployeeSalaries(
    @common.Req() request: Request,
    @common.Param() params: FiscalMonthWhereUniqueInput
  ): Promise<EmployeeSalary[]> {
    const query = plainToClass(EmployeeSalaryFindManyArgs, request.query);
    const results = await this.service.findEmployeeSalaries(params.id, {
      ...query,
      select: {
        createdAt: true,

        fiscalMonthId: {
          select: {
            id: true,
          },
        },

        id: true,
        netSalary: true,
        note: true,
        totalDeserved: true,
        totalDiscount: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeSalaries")
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "update",
    possession: "any",
  })
  async connectEmployeeSalaries(
    @common.Param() params: FiscalMonthWhereUniqueInput,
    @common.Body() body: EmployeeSalaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSalaries: {
        connect: body,
      },
    };
    await this.service.updateFiscalMonth({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeSalaries")
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "update",
    possession: "any",
  })
  async updateEmployeeSalaries(
    @common.Param() params: FiscalMonthWhereUniqueInput,
    @common.Body() body: EmployeeSalaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSalaries: {
        set: body,
      },
    };
    await this.service.updateFiscalMonth({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeSalaries")
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeSalaries(
    @common.Param() params: FiscalMonthWhereUniqueInput,
    @common.Body() body: EmployeeSalaryWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeSalaries: {
        disconnect: body,
      },
    };
    await this.service.updateFiscalMonth({
      where: params,
      data,
      select: { id: true },
    });
  }
}
