/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductUnit } from "./ProductUnit";
import { ProductUnitCountArgs } from "./ProductUnitCountArgs";
import { ProductUnitFindManyArgs } from "./ProductUnitFindManyArgs";
import { ProductUnitFindUniqueArgs } from "./ProductUnitFindUniqueArgs";
import { CreateProductUnitArgs } from "./CreateProductUnitArgs";
import { UpdateProductUnitArgs } from "./UpdateProductUnitArgs";
import { DeleteProductUnitArgs } from "./DeleteProductUnitArgs";
import { Unit } from "../../unit/base/Unit";
import { Product } from "../../product/base/Product";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductUnitService } from "../productUnit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductUnit)
export class ProductUnitResolverBase {
  constructor(
    protected readonly service: ProductUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "read",
    possession: "any",
  })
  async _productUnitsMeta(
    @graphql.Args() args: ProductUnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductUnit])
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "read",
    possession: "any",
  })
  async productUnits(
    @graphql.Args() args: ProductUnitFindManyArgs
  ): Promise<ProductUnit[]> {
    return this.service.productUnits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductUnit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "read",
    possession: "own",
  })
  async productUnit(
    @graphql.Args() args: ProductUnitFindUniqueArgs
  ): Promise<ProductUnit | null> {
    const result = await this.service.productUnit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductUnit)
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "create",
    possession: "any",
  })
  async createProductUnit(
    @graphql.Args() args: CreateProductUnitArgs
  ): Promise<ProductUnit> {
    return await this.service.createProductUnit({
      ...args,
      data: {
        ...args.data,

        compareUnitId: args.data.compareUnitId
          ? {
              connect: args.data.compareUnitId,
            }
          : undefined,

        productId: {
          connect: args.data.productId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        unitId: args.data.unitId
          ? {
              connect: args.data.unitId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductUnit)
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "update",
    possession: "any",
  })
  async updateProductUnit(
    @graphql.Args() args: UpdateProductUnitArgs
  ): Promise<ProductUnit | null> {
    try {
      return await this.service.updateProductUnit({
        ...args,
        data: {
          ...args.data,

          compareUnitId: args.data.compareUnitId
            ? {
                connect: args.data.compareUnitId,
              }
            : undefined,

          productId: {
            connect: args.data.productId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          unitId: args.data.unitId
            ? {
                connect: args.data.unitId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductUnit)
  @nestAccessControl.UseRoles({
    resource: "ProductUnit",
    action: "delete",
    possession: "any",
  })
  async deleteProductUnit(
    @graphql.Args() args: DeleteProductUnitArgs
  ): Promise<ProductUnit | null> {
    try {
      return await this.service.deleteProductUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "compareUnitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getCompareUnitId(
    @graphql.Parent() parent: ProductUnit
  ): Promise<Unit | null> {
    const result = await this.service.getCompareUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: ProductUnit
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: ProductUnit
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnitId(@graphql.Parent() parent: ProductUnit): Promise<Unit | null> {
    const result = await this.service.getUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
