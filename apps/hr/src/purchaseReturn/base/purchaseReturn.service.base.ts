/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  PurchaseReturn as PrismaPurchaseReturn,
  PurchaseReturnDetail as PrismaPurchaseReturnDetail,
  CashRepository as PrismaCashRepository,
  InvoiceType as PrismaInvoiceType,
  PaymentType as PrismaPaymentType,
  Purchase as PrismaPurchase,
  PurchasePriceType as PrismaPurchasePriceType,
  Store as PrismaStore,
  Supplier as PrismaSupplier,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class PurchaseReturnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PurchaseReturnCountArgs, "select">
  ): Promise<number> {
    return this.prisma.purchaseReturn.count(args);
  }

  async purchaseReturns(
    args: Prisma.PurchaseReturnFindManyArgs
  ): Promise<PrismaPurchaseReturn[]> {
    return this.prisma.purchaseReturn.findMany(args);
  }
  async purchaseReturn(
    args: Prisma.PurchaseReturnFindUniqueArgs
  ): Promise<PrismaPurchaseReturn | null> {
    return this.prisma.purchaseReturn.findUnique(args);
  }
  async createPurchaseReturn(
    args: Prisma.PurchaseReturnCreateArgs
  ): Promise<PrismaPurchaseReturn> {
    return this.prisma.purchaseReturn.create(args);
  }
  async updatePurchaseReturn(
    args: Prisma.PurchaseReturnUpdateArgs
  ): Promise<PrismaPurchaseReturn> {
    return this.prisma.purchaseReturn.update(args);
  }
  async deletePurchaseReturn(
    args: Prisma.PurchaseReturnDeleteArgs
  ): Promise<PrismaPurchaseReturn> {
    return this.prisma.purchaseReturn.delete(args);
  }

  async findPurchaseReturnDetails(
    parentId: string,
    args: Prisma.PurchaseReturnDetailFindManyArgs
  ): Promise<PrismaPurchaseReturnDetail[]> {
    return this.prisma.purchaseReturn
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .purchaseReturnDetails(args);
  }

  async getCashRepositoryId(
    parentId: string
  ): Promise<PrismaCashRepository | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .cashRepositoryId();
  }

  async getInvoiceTypeId(parentId: string): Promise<PrismaInvoiceType | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .invoiceTypeId();
  }

  async getPaymentTypeId(parentId: string): Promise<PrismaPaymentType | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .paymentTypeId();
  }

  async getPurchaseId(parentId: string): Promise<PrismaPurchase | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .purchaseId();
  }

  async getPurchasePriceTypeId(
    parentId: string
  ): Promise<PrismaPurchasePriceType | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .purchasePriceTypeId();
  }

  async getStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .storeId();
  }

  async getSupplierId(parentId: string): Promise<PrismaSupplier | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .supplierId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.purchaseReturn
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
