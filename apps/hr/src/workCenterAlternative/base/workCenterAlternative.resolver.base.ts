/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkCenterAlternative } from "./WorkCenterAlternative";
import { WorkCenterAlternativeCountArgs } from "./WorkCenterAlternativeCountArgs";
import { WorkCenterAlternativeFindManyArgs } from "./WorkCenterAlternativeFindManyArgs";
import { WorkCenterAlternativeFindUniqueArgs } from "./WorkCenterAlternativeFindUniqueArgs";
import { CreateWorkCenterAlternativeArgs } from "./CreateWorkCenterAlternativeArgs";
import { UpdateWorkCenterAlternativeArgs } from "./UpdateWorkCenterAlternativeArgs";
import { DeleteWorkCenterAlternativeArgs } from "./DeleteWorkCenterAlternativeArgs";
import { WorkCenter } from "../../workCenter/base/WorkCenter";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkCenterAlternativeService } from "../workCenterAlternative.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkCenterAlternative)
export class WorkCenterAlternativeResolverBase {
  constructor(
    protected readonly service: WorkCenterAlternativeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "read",
    possession: "any",
  })
  async _workCenterAlternativesMeta(
    @graphql.Args() args: WorkCenterAlternativeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkCenterAlternative])
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "read",
    possession: "any",
  })
  async workCenterAlternatives(
    @graphql.Args() args: WorkCenterAlternativeFindManyArgs
  ): Promise<WorkCenterAlternative[]> {
    return this.service.workCenterAlternatives(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkCenterAlternative, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "read",
    possession: "own",
  })
  async workCenterAlternative(
    @graphql.Args() args: WorkCenterAlternativeFindUniqueArgs
  ): Promise<WorkCenterAlternative | null> {
    const result = await this.service.workCenterAlternative(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterAlternative)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "create",
    possession: "any",
  })
  async createWorkCenterAlternative(
    @graphql.Args() args: CreateWorkCenterAlternativeArgs
  ): Promise<WorkCenterAlternative> {
    return await this.service.createWorkCenterAlternative({
      ...args,
      data: {
        ...args.data,

        alternativeWorkCenterId: {
          connect: args.data.alternativeWorkCenterId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,

        workCenterId: {
          connect: args.data.workCenterId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkCenterAlternative)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "update",
    possession: "any",
  })
  async updateWorkCenterAlternative(
    @graphql.Args() args: UpdateWorkCenterAlternativeArgs
  ): Promise<WorkCenterAlternative | null> {
    try {
      return await this.service.updateWorkCenterAlternative({
        ...args,
        data: {
          ...args.data,

          alternativeWorkCenterId: {
            connect: args.data.alternativeWorkCenterId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,

          workCenterId: {
            connect: args.data.workCenterId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkCenterAlternative)
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "delete",
    possession: "any",
  })
  async deleteWorkCenterAlternative(
    @graphql.Args() args: DeleteWorkCenterAlternativeArgs
  ): Promise<WorkCenterAlternative | null> {
    try {
      return await this.service.deleteWorkCenterAlternative(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkCenter, {
    nullable: true,
    name: "alternativeWorkCenterId",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenter",
    action: "read",
    possession: "any",
  })
  async getAlternativeWorkCenterId(
    @graphql.Parent() parent: WorkCenterAlternative
  ): Promise<WorkCenter | null> {
    const result = await this.service.getAlternativeWorkCenterId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: WorkCenterAlternative
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => WorkCenter, {
    nullable: true,
    name: "workCenterId",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenter",
    action: "read",
    possession: "any",
  })
  async getWorkCenterId(
    @graphql.Parent() parent: WorkCenterAlternative
  ): Promise<WorkCenter | null> {
    const result = await this.service.getWorkCenterId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
