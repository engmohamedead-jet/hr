/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TenantUser as PrismaTenantUser } from "@prisma/client";

export class TenantUserServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TenantUserCountArgs, "select">
  ): Promise<number> {
    return this.prisma.tenantUser.count(args);
  }

  async tenantUsers(
    args: Prisma.TenantUserFindManyArgs
  ): Promise<PrismaTenantUser[]> {
    return this.prisma.tenantUser.findMany(args);
  }
  async tenantUser(
    args: Prisma.TenantUserFindUniqueArgs
  ): Promise<PrismaTenantUser | null> {
    return this.prisma.tenantUser.findUnique(args);
  }
  async createTenantUser(
    args: Prisma.TenantUserCreateArgs
  ): Promise<PrismaTenantUser> {
    return this.prisma.tenantUser.create(args);
  }
  async updateTenantUser(
    args: Prisma.TenantUserUpdateArgs
  ): Promise<PrismaTenantUser> {
    return this.prisma.tenantUser.update(args);
  }
  async deleteTenantUser(
    args: Prisma.TenantUserDeleteArgs
  ): Promise<PrismaTenantUser> {
    return this.prisma.tenantUser.delete(args);
  }
}
