/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { FailureTypeService } from "../failureType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { FailureTypeCreateInput } from "./FailureTypeCreateInput";
import { FailureType } from "./FailureType";
import { FailureTypeFindManyArgs } from "./FailureTypeFindManyArgs";
import { FailureTypeWhereUniqueInput } from "./FailureTypeWhereUniqueInput";
import { FailureTypeUpdateInput } from "./FailureTypeUpdateInput";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { FailureReportingWhereUniqueInput } from "../../failureReporting/base/FailureReportingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class FailureTypeControllerBase {
  constructor(
    protected readonly service: FailureTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FailureType })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createFailureType(
    @common.Body() data: FailureTypeCreateInput
  ): Promise<FailureType> {
    return await this.service.createFailureType({
      data: data,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [FailureType] })
  @ApiNestedQuery(FailureTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failureTypes(@common.Req() request: Request): Promise<FailureType[]> {
    const args = plainToClass(FailureTypeFindManyArgs, request.query);
    return this.service.failureTypes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FailureType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async failureType(
    @common.Param() params: FailureTypeWhereUniqueInput
  ): Promise<FailureType | null> {
    const result = await this.service.failureType({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FailureType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateFailureType(
    @common.Param() params: FailureTypeWhereUniqueInput,
    @common.Body() data: FailureTypeUpdateInput
  ): Promise<FailureType | null> {
    try {
      return await this.service.updateFailureType({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FailureType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteFailureType(
    @common.Param() params: FailureTypeWhereUniqueInput
  ): Promise<FailureType | null> {
    try {
      return await this.service.deleteFailureType({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/failureReportings")
  @ApiNestedQuery(FailureReportingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @common.Req() request: Request,
    @common.Param() params: FailureTypeWhereUniqueInput
  ): Promise<FailureReporting[]> {
    const query = plainToClass(FailureReportingFindManyArgs, request.query);
    const results = await this.service.findFailureReportings(params.id, {
      ...query,
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "update",
    possession: "any",
  })
  async connectFailureReportings(
    @common.Param() params: FailureTypeWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        connect: body,
      },
    };
    await this.service.updateFailureType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "update",
    possession: "any",
  })
  async updateFailureReportings(
    @common.Param() params: FailureTypeWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        set: body,
      },
    };
    await this.service.updateFailureType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "update",
    possession: "any",
  })
  async disconnectFailureReportings(
    @common.Param() params: FailureTypeWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        disconnect: body,
      },
    };
    await this.service.updateFailureType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
