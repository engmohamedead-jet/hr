/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SaleQuotation as PrismaSaleQuotation,
  SaleOrder as PrismaSaleOrder,
  SaleQuotationDetail as PrismaSaleQuotationDetail,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SaleQuotationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SaleQuotationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.saleQuotation.count(args);
  }

  async saleQuotations(
    args: Prisma.SaleQuotationFindManyArgs
  ): Promise<PrismaSaleQuotation[]> {
    return this.prisma.saleQuotation.findMany(args);
  }
  async saleQuotation(
    args: Prisma.SaleQuotationFindUniqueArgs
  ): Promise<PrismaSaleQuotation | null> {
    return this.prisma.saleQuotation.findUnique(args);
  }
  async createSaleQuotation(
    args: Prisma.SaleQuotationCreateArgs
  ): Promise<PrismaSaleQuotation> {
    return this.prisma.saleQuotation.create(args);
  }
  async updateSaleQuotation(
    args: Prisma.SaleQuotationUpdateArgs
  ): Promise<PrismaSaleQuotation> {
    return this.prisma.saleQuotation.update(args);
  }
  async deleteSaleQuotation(
    args: Prisma.SaleQuotationDeleteArgs
  ): Promise<PrismaSaleQuotation> {
    return this.prisma.saleQuotation.delete(args);
  }

  async findSaleOrders(
    parentId: string,
    args: Prisma.SaleOrderFindManyArgs
  ): Promise<PrismaSaleOrder[]> {
    return this.prisma.saleQuotation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleOrders(args);
  }

  async findSaleQuotationDetails(
    parentId: string,
    args: Prisma.SaleQuotationDetailFindManyArgs
  ): Promise<PrismaSaleQuotationDetail[]> {
    return this.prisma.saleQuotation
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleQuotationDetails(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.saleQuotation
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
