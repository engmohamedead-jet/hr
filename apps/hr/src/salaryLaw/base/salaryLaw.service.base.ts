/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalaryLaw as PrismaSalaryLaw,
  SalaryItem as PrismaSalaryItem,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SalaryLawServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalaryLawCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salaryLaw.count(args);
  }

  async salaryLaws(
    args: Prisma.SalaryLawFindManyArgs
  ): Promise<PrismaSalaryLaw[]> {
    return this.prisma.salaryLaw.findMany(args);
  }
  async salaryLaw(
    args: Prisma.SalaryLawFindUniqueArgs
  ): Promise<PrismaSalaryLaw | null> {
    return this.prisma.salaryLaw.findUnique(args);
  }
  async createSalaryLaw(
    args: Prisma.SalaryLawCreateArgs
  ): Promise<PrismaSalaryLaw> {
    return this.prisma.salaryLaw.create(args);
  }
  async updateSalaryLaw(
    args: Prisma.SalaryLawUpdateArgs
  ): Promise<PrismaSalaryLaw> {
    return this.prisma.salaryLaw.update(args);
  }
  async deleteSalaryLaw(
    args: Prisma.SalaryLawDeleteArgs
  ): Promise<PrismaSalaryLaw> {
    return this.prisma.salaryLaw.delete(args);
  }

  async findSalaryItems(
    parentId: number,
    args: Prisma.SalaryItemFindManyArgs
  ): Promise<PrismaSalaryItem[]> {
    return this.prisma.salaryLaw
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salaryItems(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.salaryLaw
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
