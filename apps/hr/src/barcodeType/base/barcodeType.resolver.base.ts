/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { BarcodeType } from "./BarcodeType";
import { BarcodeTypeCountArgs } from "./BarcodeTypeCountArgs";
import { BarcodeTypeFindManyArgs } from "./BarcodeTypeFindManyArgs";
import { BarcodeTypeFindUniqueArgs } from "./BarcodeTypeFindUniqueArgs";
import { CreateBarcodeTypeArgs } from "./CreateBarcodeTypeArgs";
import { UpdateBarcodeTypeArgs } from "./UpdateBarcodeTypeArgs";
import { DeleteBarcodeTypeArgs } from "./DeleteBarcodeTypeArgs";
import { BarcodeTypeService } from "../barcodeType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => BarcodeType)
export class BarcodeTypeResolverBase {
  constructor(
    protected readonly service: BarcodeTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "any",
  })
  async _barcodeTypesMeta(
    @graphql.Args() args: BarcodeTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [BarcodeType])
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "any",
  })
  async barcodeTypes(
    @graphql.Args() args: BarcodeTypeFindManyArgs
  ): Promise<BarcodeType[]> {
    return this.service.barcodeTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => BarcodeType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "read",
    possession: "own",
  })
  async barcodeType(
    @graphql.Args() args: BarcodeTypeFindUniqueArgs
  ): Promise<BarcodeType | null> {
    const result = await this.service.barcodeType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BarcodeType)
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "create",
    possession: "any",
  })
  async createBarcodeType(
    @graphql.Args() args: CreateBarcodeTypeArgs
  ): Promise<BarcodeType> {
    return await this.service.createBarcodeType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => BarcodeType)
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "update",
    possession: "any",
  })
  async updateBarcodeType(
    @graphql.Args() args: UpdateBarcodeTypeArgs
  ): Promise<BarcodeType | null> {
    try {
      return await this.service.updateBarcodeType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BarcodeType)
  @nestAccessControl.UseRoles({
    resource: "BarcodeType",
    action: "delete",
    possession: "any",
  })
  async deleteBarcodeType(
    @graphql.Args() args: DeleteBarcodeTypeArgs
  ): Promise<BarcodeType | null> {
    try {
      return await this.service.deleteBarcodeType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
