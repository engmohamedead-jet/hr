/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleTeam } from "./SaleTeam";
import { SaleTeamCountArgs } from "./SaleTeamCountArgs";
import { SaleTeamFindManyArgs } from "./SaleTeamFindManyArgs";
import { SaleTeamFindUniqueArgs } from "./SaleTeamFindUniqueArgs";
import { CreateSaleTeamArgs } from "./CreateSaleTeamArgs";
import { UpdateSaleTeamArgs } from "./UpdateSaleTeamArgs";
import { DeleteSaleTeamArgs } from "./DeleteSaleTeamArgs";
import { SalePersonFindManyArgs } from "../../salePerson/base/SalePersonFindManyArgs";
import { SalePerson } from "../../salePerson/base/SalePerson";
import { Tenant } from "../../tenant/base/Tenant";
import { SaleTeamService } from "../saleTeam.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleTeam)
export class SaleTeamResolverBase {
  constructor(
    protected readonly service: SaleTeamService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "any",
  })
  async _saleTeamsMeta(
    @graphql.Args() args: SaleTeamCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleTeam])
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "any",
  })
  async saleTeams(
    @graphql.Args() args: SaleTeamFindManyArgs
  ): Promise<SaleTeam[]> {
    return this.service.saleTeams(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleTeam, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "read",
    possession: "own",
  })
  async saleTeam(
    @graphql.Args() args: SaleTeamFindUniqueArgs
  ): Promise<SaleTeam | null> {
    const result = await this.service.saleTeam(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleTeam)
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "create",
    possession: "any",
  })
  async createSaleTeam(
    @graphql.Args() args: CreateSaleTeamArgs
  ): Promise<SaleTeam> {
    return await this.service.createSaleTeam({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleTeam)
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "update",
    possession: "any",
  })
  async updateSaleTeam(
    @graphql.Args() args: UpdateSaleTeamArgs
  ): Promise<SaleTeam | null> {
    try {
      return await this.service.updateSaleTeam({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleTeam)
  @nestAccessControl.UseRoles({
    resource: "SaleTeam",
    action: "delete",
    possession: "any",
  })
  async deleteSaleTeam(
    @graphql.Args() args: DeleteSaleTeamArgs
  ): Promise<SaleTeam | null> {
    try {
      return await this.service.deleteSaleTeam(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalePerson], { name: "salePeople" })
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async findSalePeople(
    @graphql.Parent() parent: SaleTeam,
    @graphql.Args() args: SalePersonFindManyArgs
  ): Promise<SalePerson[]> {
    const results = await this.service.findSalePeople(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: SaleTeam
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
