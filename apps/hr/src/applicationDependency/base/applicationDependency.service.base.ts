/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationDependency as PrismaApplicationDependency,
  Application as PrismaApplication,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class ApplicationDependencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ApplicationDependencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.applicationDependency.count(args);
  }

  async applicationDependencies(
    args: Prisma.ApplicationDependencyFindManyArgs
  ): Promise<PrismaApplicationDependency[]> {
    return this.prisma.applicationDependency.findMany(args);
  }
  async applicationDependency(
    args: Prisma.ApplicationDependencyFindUniqueArgs
  ): Promise<PrismaApplicationDependency | null> {
    return this.prisma.applicationDependency.findUnique(args);
  }
  async createApplicationDependency(
    args: Prisma.ApplicationDependencyCreateArgs
  ): Promise<PrismaApplicationDependency> {
    return this.prisma.applicationDependency.create(args);
  }
  async updateApplicationDependency(
    args: Prisma.ApplicationDependencyUpdateArgs
  ): Promise<PrismaApplicationDependency> {
    return this.prisma.applicationDependency.update(args);
  }
  async deleteApplicationDependency(
    args: Prisma.ApplicationDependencyDeleteArgs
  ): Promise<PrismaApplicationDependency> {
    return this.prisma.applicationDependency.delete(args);
  }

  async findDependsOnApplicationId(
    parentId: string,
    args: Prisma.ApplicationFindManyArgs
  ): Promise<PrismaApplication[]> {
    return this.prisma.applicationDependency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dependsOnApplicationId(args);
  }

  async getApplicationId(parentId: string): Promise<PrismaApplication | null> {
    return this.prisma.applicationDependency
      .findUnique({
        where: { id: parentId },
      })
      .applicationId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.applicationDependency
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
