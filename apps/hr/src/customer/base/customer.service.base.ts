/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Customer as PrismaCustomer,
  ProductionOrder as PrismaProductionOrder,
  ReceiptVoucher as PrismaReceiptVoucher,
  SaleOrder as PrismaSaleOrder,
  SaleReturn as PrismaSaleReturn,
  Sale as PrismaSale,
  Supplier as PrismaSupplier,
  Currency as PrismaCurrency,
  Tenant as PrismaTenant,
} from "@prisma/client";

import { CustomerWhereUniqueInput } from "./CustomerWhereUniqueInput";
import { Customer } from "./Customer";
import { CustomerWhereInput } from "./CustomerWhereInput";

export class CustomerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CustomerCountArgs, "select">): Promise<number> {
    return this.prisma.customer.count(args);
  }

  async customers(
    args: Prisma.CustomerFindManyArgs
  ): Promise<PrismaCustomer[]> {
    return this.prisma.customer.findMany(args);
  }
  async customer(
    args: Prisma.CustomerFindUniqueArgs
  ): Promise<PrismaCustomer | null> {
    return this.prisma.customer.findUnique(args);
  }
  async createCustomer(
    args: Prisma.CustomerCreateArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.create(args);
  }
  async updateCustomer(
    args: Prisma.CustomerUpdateArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.update(args);
  }
  async deleteCustomer(
    args: Prisma.CustomerDeleteArgs
  ): Promise<PrismaCustomer> {
    return this.prisma.customer.delete(args);
  }

  async findProductionOrders(
    parentId: string,
    args: Prisma.ProductionOrderFindManyArgs
  ): Promise<PrismaProductionOrder[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productionOrders(args);
  }

  async findReceiptVouchers(
    parentId: string,
    args: Prisma.ReceiptVoucherFindManyArgs
  ): Promise<PrismaReceiptVoucher[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .receiptVouchers(args);
  }

  async findSaleOrders(
    parentId: string,
    args: Prisma.SaleOrderFindManyArgs
  ): Promise<PrismaSaleOrder[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleOrders(args);
  }

  async findSaleReturns(
    parentId: string,
    args: Prisma.SaleReturnFindManyArgs
  ): Promise<PrismaSaleReturn[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturns(args);
  }

  async findSales(
    parentId: string,
    args: Prisma.SaleFindManyArgs
  ): Promise<PrismaSale[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sales(args);
  }

  async findSuppliers(
    parentId: string,
    args: Prisma.SupplierFindManyArgs
  ): Promise<PrismaSupplier[]> {
    return this.prisma.customer
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .suppliers(args);
  }

  async getCurrencyId(parentId: string): Promise<PrismaCurrency | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .currencyId();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.customer
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
  async GetCustomerByTenantAndId(
    args: CustomerWhereUniqueInput
  ): Promise<Customer> {
    throw new Error("Not implemented");
  }
  async GetCustomersByTenant(args: CustomerWhereInput): Promise<Customer[]> {
    throw new Error("Not implemented");
  }
}
