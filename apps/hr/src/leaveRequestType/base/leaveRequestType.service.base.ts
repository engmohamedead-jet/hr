/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LeaveRequestType as PrismaLeaveRequestType,
  LeaveRequest as PrismaLeaveRequest,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class LeaveRequestTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LeaveRequestTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.leaveRequestType.count(args);
  }

  async leaveRequestTypes(
    args: Prisma.LeaveRequestTypeFindManyArgs
  ): Promise<PrismaLeaveRequestType[]> {
    return this.prisma.leaveRequestType.findMany(args);
  }
  async leaveRequestType(
    args: Prisma.LeaveRequestTypeFindUniqueArgs
  ): Promise<PrismaLeaveRequestType | null> {
    return this.prisma.leaveRequestType.findUnique(args);
  }
  async createLeaveRequestType(
    args: Prisma.LeaveRequestTypeCreateArgs
  ): Promise<PrismaLeaveRequestType> {
    return this.prisma.leaveRequestType.create(args);
  }
  async updateLeaveRequestType(
    args: Prisma.LeaveRequestTypeUpdateArgs
  ): Promise<PrismaLeaveRequestType> {
    return this.prisma.leaveRequestType.update(args);
  }
  async deleteLeaveRequestType(
    args: Prisma.LeaveRequestTypeDeleteArgs
  ): Promise<PrismaLeaveRequestType> {
    return this.prisma.leaveRequestType.delete(args);
  }

  async findLeavingPermissions(
    parentId: string,
    args: Prisma.LeaveRequestFindManyArgs
  ): Promise<PrismaLeaveRequest[]> {
    return this.prisma.leaveRequestType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .leavingPermissions(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.leaveRequestType
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
