/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FiscalMonth } from "./FiscalMonth";
import { FiscalMonthCountArgs } from "./FiscalMonthCountArgs";
import { FiscalMonthFindManyArgs } from "./FiscalMonthFindManyArgs";
import { FiscalMonthFindUniqueArgs } from "./FiscalMonthFindUniqueArgs";
import { CreateFiscalMonthArgs } from "./CreateFiscalMonthArgs";
import { UpdateFiscalMonthArgs } from "./UpdateFiscalMonthArgs";
import { DeleteFiscalMonthArgs } from "./DeleteFiscalMonthArgs";
import { EmployeeSalaryFindManyArgs } from "../../employeeSalary/base/EmployeeSalaryFindManyArgs";
import { EmployeeSalary } from "../../employeeSalary/base/EmployeeSalary";
import { FiscalMonthService } from "../fiscalMonth.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FiscalMonth)
export class FiscalMonthResolverBase {
  constructor(
    protected readonly service: FiscalMonthService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async _fiscalMonthsMeta(
    @graphql.Args() args: FiscalMonthCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FiscalMonth])
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async fiscalMonths(
    @graphql.Args() args: FiscalMonthFindManyArgs
  ): Promise<FiscalMonth[]> {
    return this.service.fiscalMonths(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FiscalMonth, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "own",
  })
  async fiscalMonth(
    @graphql.Args() args: FiscalMonthFindUniqueArgs
  ): Promise<FiscalMonth | null> {
    const result = await this.service.fiscalMonth(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalMonth)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "create",
    possession: "any",
  })
  async createFiscalMonth(
    @graphql.Args() args: CreateFiscalMonthArgs
  ): Promise<FiscalMonth> {
    return await this.service.createFiscalMonth({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FiscalMonth)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "update",
    possession: "any",
  })
  async updateFiscalMonth(
    @graphql.Args() args: UpdateFiscalMonthArgs
  ): Promise<FiscalMonth | null> {
    try {
      return await this.service.updateFiscalMonth({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FiscalMonth)
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "delete",
    possession: "any",
  })
  async deleteFiscalMonth(
    @graphql.Args() args: DeleteFiscalMonthArgs
  ): Promise<FiscalMonth | null> {
    try {
      return await this.service.deleteFiscalMonth(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeSalary], { name: "employeeSalaries" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalary",
    action: "read",
    possession: "any",
  })
  async findEmployeeSalaries(
    @graphql.Parent() parent: FiscalMonth,
    @graphql.Args() args: EmployeeSalaryFindManyArgs
  ): Promise<EmployeeSalary[]> {
    const results = await this.service.findEmployeeSalaries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
