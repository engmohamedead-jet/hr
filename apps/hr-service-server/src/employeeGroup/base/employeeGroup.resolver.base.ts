/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeGroup } from "./EmployeeGroup";
import { EmployeeGroupCountArgs } from "./EmployeeGroupCountArgs";
import { EmployeeGroupFindManyArgs } from "./EmployeeGroupFindManyArgs";
import { EmployeeGroupFindUniqueArgs } from "./EmployeeGroupFindUniqueArgs";
import { CreateEmployeeGroupArgs } from "./CreateEmployeeGroupArgs";
import { UpdateEmployeeGroupArgs } from "./UpdateEmployeeGroupArgs";
import { DeleteEmployeeGroupArgs } from "./DeleteEmployeeGroupArgs";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeGroupService } from "../employeeGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeGroup)
export class EmployeeGroupResolverBase {
  constructor(
    protected readonly service: EmployeeGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "any",
  })
  async _employeeGroupsMeta(
    @graphql.Args() args: EmployeeGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeGroup])
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "any",
  })
  async employeeGroups(
    @graphql.Args() args: EmployeeGroupFindManyArgs
  ): Promise<EmployeeGroup[]> {
    return this.service.employeeGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "own",
  })
  async employeeGroup(
    @graphql.Args() args: EmployeeGroupFindUniqueArgs
  ): Promise<EmployeeGroup | null> {
    const result = await this.service.employeeGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeGroup)
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "create",
    possession: "any",
  })
  async createEmployeeGroup(
    @graphql.Args() args: CreateEmployeeGroupArgs
  ): Promise<EmployeeGroup> {
    return await this.service.createEmployeeGroup({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeGroup)
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "update",
    possession: "any",
  })
  async updateEmployeeGroup(
    @graphql.Args() args: UpdateEmployeeGroupArgs
  ): Promise<EmployeeGroup | null> {
    try {
      return await this.service.updateEmployeeGroup({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeGroup)
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeGroup(
    @graphql.Args() args: DeleteEmployeeGroupArgs
  ): Promise<EmployeeGroup | null> {
    try {
      return await this.service.deleteEmployeeGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: EmployeeGroup,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: EmployeeGroup
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
