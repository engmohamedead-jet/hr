/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductVariant } from "./ProductVariant";
import { ProductVariantCountArgs } from "./ProductVariantCountArgs";
import { ProductVariantFindManyArgs } from "./ProductVariantFindManyArgs";
import { ProductVariantFindUniqueArgs } from "./ProductVariantFindUniqueArgs";
import { CreateProductVariantArgs } from "./CreateProductVariantArgs";
import { UpdateProductVariantArgs } from "./UpdateProductVariantArgs";
import { DeleteProductVariantArgs } from "./DeleteProductVariantArgs";
import { BillOfMaterialDetailFindManyArgs } from "../../billOfMaterialDetail/base/BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { BillOfMaterialFindManyArgs } from "../../billOfMaterial/base/BillOfMaterialFindManyArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { ProductBarcodeFindManyArgs } from "../../productBarcode/base/ProductBarcodeFindManyArgs";
import { ProductBarcode } from "../../productBarcode/base/ProductBarcode";
import { PurchaseDetailFindManyArgs } from "../../purchaseDetail/base/PurchaseDetailFindManyArgs";
import { PurchaseDetail } from "../../purchaseDetail/base/PurchaseDetail";
import { PurchaseReturnDetailFindManyArgs } from "../../purchaseReturnDetail/base/PurchaseReturnDetailFindManyArgs";
import { PurchaseReturnDetail } from "../../purchaseReturnDetail/base/PurchaseReturnDetail";
import { SaleDetailFindManyArgs } from "../../saleDetail/base/SaleDetailFindManyArgs";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SaleOrderDetailFindManyArgs } from "../../saleOrderDetail/base/SaleOrderDetailFindManyArgs";
import { SaleOrderDetail } from "../../saleOrderDetail/base/SaleOrderDetail";
import { SaleQuotationDetailFindManyArgs } from "../../saleQuotationDetail/base/SaleQuotationDetailFindManyArgs";
import { SaleQuotationDetail } from "../../saleQuotationDetail/base/SaleQuotationDetail";
import { SaleReturnDetailFindManyArgs } from "../../saleReturnDetail/base/SaleReturnDetailFindManyArgs";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { AttributeValue } from "../../attributeValue/base/AttributeValue";
import { Product } from "../../product/base/Product";
import { Tenant } from "../../tenant/base/Tenant";
import { ProductVariantService } from "../productVariant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductVariant)
export class ProductVariantResolverBase {
  constructor(
    protected readonly service: ProductVariantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async _productVariantsMeta(
    @graphql.Args() args: ProductVariantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductVariant])
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  async productVariants(
    @graphql.Args() args: ProductVariantFindManyArgs
  ): Promise<ProductVariant[]> {
    return this.service.productVariants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductVariant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "own",
  })
  async productVariant(
    @graphql.Args() args: ProductVariantFindUniqueArgs
  ): Promise<ProductVariant | null> {
    const result = await this.service.productVariant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "create",
    possession: "any",
  })
  async createProductVariant(
    @graphql.Args() args: CreateProductVariantArgs
  ): Promise<ProductVariant> {
    return await this.service.createProductVariant({
      ...args,
      data: {
        ...args.data,

        attributeValueId: {
          connect: args.data.attributeValueId,
        },

        productId: {
          connect: args.data.productId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async updateProductVariant(
    @graphql.Args() args: UpdateProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.updateProductVariant({
        ...args,
        data: {
          ...args.data,

          attributeValueId: {
            connect: args.data.attributeValueId,
          },

          productId: {
            connect: args.data.productId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductVariant)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "delete",
    possession: "any",
  })
  async deleteProductVariant(
    @graphql.Args() args: DeleteProductVariantArgs
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.deleteProductVariant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterialDetail], {
    name: "billOfMaterialDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: BillOfMaterialDetailFindManyArgs
  ): Promise<BillOfMaterialDetail[]> {
    const results = await this.service.findBillOfMaterialDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BillOfMaterial], { name: "billOfMaterials" })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterials(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: BillOfMaterialFindManyArgs
  ): Promise<BillOfMaterial[]> {
    const results = await this.service.findBillOfMaterials(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductBarcode], { name: "productBarcodes" })
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async findProductBarcodes(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: ProductBarcodeFindManyArgs
  ): Promise<ProductBarcode[]> {
    const results = await this.service.findProductBarcodes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseDetail], { name: "purchaseDetails" })
  @nestAccessControl.UseRoles({
    resource: "PurchaseDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: PurchaseDetailFindManyArgs
  ): Promise<PurchaseDetail[]> {
    const results = await this.service.findPurchaseDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PurchaseReturnDetail], {
    name: "purchaseReturnDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "PurchaseReturnDetail",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: PurchaseReturnDetailFindManyArgs
  ): Promise<PurchaseReturnDetail[]> {
    const results = await this.service.findPurchaseReturnDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleDetail], { name: "saleDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async findSaleDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: SaleDetailFindManyArgs
  ): Promise<SaleDetail[]> {
    const results = await this.service.findSaleDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleOrderDetail], { name: "saleOrderDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleOrderDetail",
    action: "read",
    possession: "any",
  })
  async findSaleOrderDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: SaleOrderDetailFindManyArgs
  ): Promise<SaleOrderDetail[]> {
    const results = await this.service.findSaleOrderDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleQuotationDetail], {
    name: "saleQuotationDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "SaleQuotationDetail",
    action: "read",
    possession: "any",
  })
  async findSaleQuotationDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: SaleQuotationDetailFindManyArgs
  ): Promise<SaleQuotationDetail[]> {
    const results = await this.service.findSaleQuotationDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleReturnDetail], { name: "saleReturnDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleReturnDetail",
    action: "read",
    possession: "any",
  })
  async findSaleReturnDetails(
    @graphql.Parent() parent: ProductVariant,
    @graphql.Args() args: SaleReturnDetailFindManyArgs
  ): Promise<SaleReturnDetail[]> {
    const results = await this.service.findSaleReturnDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AttributeValue, {
    nullable: true,
    name: "attributeValueId",
  })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "read",
    possession: "any",
  })
  async getAttributeValueId(
    @graphql.Parent() parent: ProductVariant
  ): Promise<AttributeValue | null> {
    const result = await this.service.getAttributeValueId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Product, {
    nullable: true,
    name: "productId",
  })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async getProductId(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Product | null> {
    const result = await this.service.getProductId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: ProductVariant
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
