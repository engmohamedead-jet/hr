/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Timezone } from "./Timezone";
import { TimezoneCountArgs } from "./TimezoneCountArgs";
import { TimezoneFindManyArgs } from "./TimezoneFindManyArgs";
import { TimezoneFindUniqueArgs } from "./TimezoneFindUniqueArgs";
import { CreateTimezoneArgs } from "./CreateTimezoneArgs";
import { UpdateTimezoneArgs } from "./UpdateTimezoneArgs";
import { DeleteTimezoneArgs } from "./DeleteTimezoneArgs";
import { TimezoneService } from "../timezone.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Timezone)
export class TimezoneResolverBase {
  constructor(
    protected readonly service: TimezoneService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "read",
    possession: "any",
  })
  async _timezonesMeta(
    @graphql.Args() args: TimezoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Timezone])
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "read",
    possession: "any",
  })
  async timezones(
    @graphql.Args() args: TimezoneFindManyArgs
  ): Promise<Timezone[]> {
    return this.service.timezones(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Timezone, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "read",
    possession: "own",
  })
  async timezone(
    @graphql.Args() args: TimezoneFindUniqueArgs
  ): Promise<Timezone | null> {
    const result = await this.service.timezone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Timezone)
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "create",
    possession: "any",
  })
  async createTimezone(
    @graphql.Args() args: CreateTimezoneArgs
  ): Promise<Timezone> {
    return await this.service.createTimezone({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Timezone)
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "update",
    possession: "any",
  })
  async updateTimezone(
    @graphql.Args() args: UpdateTimezoneArgs
  ): Promise<Timezone | null> {
    try {
      return await this.service.updateTimezone({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Timezone)
  @nestAccessControl.UseRoles({
    resource: "Timezone",
    action: "delete",
    possession: "any",
  })
  async deleteTimezone(
    @graphql.Args() args: DeleteTimezoneArgs
  ): Promise<Timezone | null> {
    try {
      return await this.service.deleteTimezone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
