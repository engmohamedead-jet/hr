/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ApplicationDependency } from "./ApplicationDependency";
import { ApplicationDependencyCountArgs } from "./ApplicationDependencyCountArgs";
import { ApplicationDependencyFindManyArgs } from "./ApplicationDependencyFindManyArgs";
import { ApplicationDependencyFindUniqueArgs } from "./ApplicationDependencyFindUniqueArgs";
import { CreateApplicationDependencyArgs } from "./CreateApplicationDependencyArgs";
import { UpdateApplicationDependencyArgs } from "./UpdateApplicationDependencyArgs";
import { DeleteApplicationDependencyArgs } from "./DeleteApplicationDependencyArgs";
import { ApplicationFindManyArgs } from "../../application/base/ApplicationFindManyArgs";
import { Application } from "../../application/base/Application";
import { Tenant } from "../../tenant/base/Tenant";
import { ApplicationDependencyService } from "../applicationDependency.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ApplicationDependency)
export class ApplicationDependencyResolverBase {
  constructor(
    protected readonly service: ApplicationDependencyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "any",
  })
  async _applicationDependenciesMeta(
    @graphql.Args() args: ApplicationDependencyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ApplicationDependency])
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "any",
  })
  async applicationDependencies(
    @graphql.Args() args: ApplicationDependencyFindManyArgs
  ): Promise<ApplicationDependency[]> {
    return this.service.applicationDependencies(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ApplicationDependency, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "read",
    possession: "own",
  })
  async applicationDependency(
    @graphql.Args() args: ApplicationDependencyFindUniqueArgs
  ): Promise<ApplicationDependency | null> {
    const result = await this.service.applicationDependency(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDependency)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "create",
    possession: "any",
  })
  async createApplicationDependency(
    @graphql.Args() args: CreateApplicationDependencyArgs
  ): Promise<ApplicationDependency> {
    return await this.service.createApplicationDependency({
      ...args,
      data: {
        ...args.data,

        applicationId: args.data.applicationId
          ? {
              connect: args.data.applicationId,
            }
          : undefined,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ApplicationDependency)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "update",
    possession: "any",
  })
  async updateApplicationDependency(
    @graphql.Args() args: UpdateApplicationDependencyArgs
  ): Promise<ApplicationDependency | null> {
    try {
      return await this.service.updateApplicationDependency({
        ...args,
        data: {
          ...args.data,

          applicationId: args.data.applicationId
            ? {
                connect: args.data.applicationId,
              }
            : undefined,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ApplicationDependency)
  @nestAccessControl.UseRoles({
    resource: "ApplicationDependency",
    action: "delete",
    possession: "any",
  })
  async deleteApplicationDependency(
    @graphql.Args() args: DeleteApplicationDependencyArgs
  ): Promise<ApplicationDependency | null> {
    try {
      return await this.service.deleteApplicationDependency(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Application], { name: "dependsOnApplicationId" })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async findDependsOnApplicationId(
    @graphql.Parent() parent: ApplicationDependency,
    @graphql.Args() args: ApplicationFindManyArgs
  ): Promise<Application[]> {
    const results = await this.service.findDependsOnApplicationId(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Application, {
    nullable: true,
    name: "applicationId",
  })
  @nestAccessControl.UseRoles({
    resource: "Application",
    action: "read",
    possession: "any",
  })
  async getApplicationId(
    @graphql.Parent() parent: ApplicationDependency
  ): Promise<Application | null> {
    const result = await this.service.getApplicationId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: ApplicationDependency
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
