/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ControlType as PrismaControlType,
  Elevator as PrismaElevator,
} from "@prisma/client";

export class ControlTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ControlTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.controlType.count(args);
  }

  async controlTypes(
    args: Prisma.ControlTypeFindManyArgs
  ): Promise<PrismaControlType[]> {
    return this.prisma.controlType.findMany(args);
  }
  async controlType(
    args: Prisma.ControlTypeFindUniqueArgs
  ): Promise<PrismaControlType | null> {
    return this.prisma.controlType.findUnique(args);
  }
  async createControlType(
    args: Prisma.ControlTypeCreateArgs
  ): Promise<PrismaControlType> {
    return this.prisma.controlType.create(args);
  }
  async updateControlType(
    args: Prisma.ControlTypeUpdateArgs
  ): Promise<PrismaControlType> {
    return this.prisma.controlType.update(args);
  }
  async deleteControlType(
    args: Prisma.ControlTypeDeleteArgs
  ): Promise<PrismaControlType> {
    return this.prisma.controlType.delete(args);
  }

  async findElevators(
    parentId: number,
    args: Prisma.ElevatorFindManyArgs
  ): Promise<PrismaElevator[]> {
    return this.prisma.controlType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .elevators(args);
  }
}
