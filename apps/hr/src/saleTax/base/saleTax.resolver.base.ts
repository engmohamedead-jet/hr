/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleTax } from "./SaleTax";
import { SaleTaxCountArgs } from "./SaleTaxCountArgs";
import { SaleTaxFindManyArgs } from "./SaleTaxFindManyArgs";
import { SaleTaxFindUniqueArgs } from "./SaleTaxFindUniqueArgs";
import { CreateSaleTaxArgs } from "./CreateSaleTaxArgs";
import { UpdateSaleTaxArgs } from "./UpdateSaleTaxArgs";
import { DeleteSaleTaxArgs } from "./DeleteSaleTaxArgs";
import { ProductGroupFindManyArgs } from "../../productGroup/base/ProductGroupFindManyArgs";
import { ProductGroup } from "../../productGroup/base/ProductGroup";
import { ProductFindManyArgs } from "../../product/base/ProductFindManyArgs";
import { Product } from "../../product/base/Product";
import { Store } from "../../store/base/Store";
import { SaleTaxService } from "../saleTax.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleTax)
export class SaleTaxResolverBase {
  constructor(
    protected readonly service: SaleTaxService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "any",
  })
  async _saleTaxesMeta(
    @graphql.Args() args: SaleTaxCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleTax])
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "any",
  })
  async saleTaxes(
    @graphql.Args() args: SaleTaxFindManyArgs
  ): Promise<SaleTax[]> {
    return this.service.saleTaxes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleTax, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "read",
    possession: "own",
  })
  async saleTax(
    @graphql.Args() args: SaleTaxFindUniqueArgs
  ): Promise<SaleTax | null> {
    const result = await this.service.saleTax(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleTax)
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "create",
    possession: "any",
  })
  async createSaleTax(
    @graphql.Args() args: CreateSaleTaxArgs
  ): Promise<SaleTax> {
    return await this.service.createSaleTax({
      ...args,
      data: {
        ...args.data,

        store: args.data.store
          ? {
              connect: args.data.store,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleTax)
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "update",
    possession: "any",
  })
  async updateSaleTax(
    @graphql.Args() args: UpdateSaleTaxArgs
  ): Promise<SaleTax | null> {
    try {
      return await this.service.updateSaleTax({
        ...args,
        data: {
          ...args.data,

          store: args.data.store
            ? {
                connect: args.data.store,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleTax)
  @nestAccessControl.UseRoles({
    resource: "SaleTax",
    action: "delete",
    possession: "any",
  })
  async deleteSaleTax(
    @graphql.Args() args: DeleteSaleTaxArgs
  ): Promise<SaleTax | null> {
    try {
      return await this.service.deleteSaleTax(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ProductGroup], { name: "productGroups" })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findProductGroups(
    @graphql.Parent() parent: SaleTax,
    @graphql.Args() args: ProductGroupFindManyArgs
  ): Promise<ProductGroup[]> {
    const results = await this.service.findProductGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Product], { name: "products" })
  @nestAccessControl.UseRoles({
    resource: "Product",
    action: "read",
    possession: "any",
  })
  async findProducts(
    @graphql.Parent() parent: SaleTax,
    @graphql.Args() args: ProductFindManyArgs
  ): Promise<Product[]> {
    const results = await this.service.findProducts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "store",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStore(@graphql.Parent() parent: SaleTax): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
