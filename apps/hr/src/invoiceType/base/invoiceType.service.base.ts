/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, InvoiceType as PrismaInvoiceType } from "@prisma/client";

export class InvoiceTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InvoiceTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.invoiceType.count(args);
  }

  async invoiceTypes(
    args: Prisma.InvoiceTypeFindManyArgs
  ): Promise<PrismaInvoiceType[]> {
    return this.prisma.invoiceType.findMany(args);
  }
  async invoiceType(
    args: Prisma.InvoiceTypeFindUniqueArgs
  ): Promise<PrismaInvoiceType | null> {
    return this.prisma.invoiceType.findUnique(args);
  }
  async createInvoiceType(
    args: Prisma.InvoiceTypeCreateArgs
  ): Promise<PrismaInvoiceType> {
    return this.prisma.invoiceType.create(args);
  }
  async updateInvoiceType(
    args: Prisma.InvoiceTypeUpdateArgs
  ): Promise<PrismaInvoiceType> {
    return this.prisma.invoiceType.update(args);
  }
  async deleteInvoiceType(
    args: Prisma.InvoiceTypeDeleteArgs
  ): Promise<PrismaInvoiceType> {
    return this.prisma.invoiceType.delete(args);
  }
}
