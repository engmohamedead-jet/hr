/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { JobTitle } from "./JobTitle";
import { JobTitleCountArgs } from "./JobTitleCountArgs";
import { JobTitleFindManyArgs } from "./JobTitleFindManyArgs";
import { JobTitleFindUniqueArgs } from "./JobTitleFindUniqueArgs";
import { CreateJobTitleArgs } from "./CreateJobTitleArgs";
import { UpdateJobTitleArgs } from "./UpdateJobTitleArgs";
import { DeleteJobTitleArgs } from "./DeleteJobTitleArgs";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { JobTitleService } from "../jobTitle.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => JobTitle)
export class JobTitleResolverBase {
  constructor(
    protected readonly service: JobTitleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "any",
  })
  async _jobTitlesMeta(
    @graphql.Args() args: JobTitleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [JobTitle])
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "any",
  })
  async jobTitles(
    @graphql.Args() args: JobTitleFindManyArgs
  ): Promise<JobTitle[]> {
    return this.service.jobTitles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => JobTitle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "own",
  })
  async jobTitle(
    @graphql.Args() args: JobTitleFindUniqueArgs
  ): Promise<JobTitle | null> {
    const result = await this.service.jobTitle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobTitle)
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "create",
    possession: "any",
  })
  async createJobTitle(
    @graphql.Args() args: CreateJobTitleArgs
  ): Promise<JobTitle> {
    return await this.service.createJobTitle({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => JobTitle)
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "update",
    possession: "any",
  })
  async updateJobTitle(
    @graphql.Args() args: UpdateJobTitleArgs
  ): Promise<JobTitle | null> {
    try {
      return await this.service.updateJobTitle({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => JobTitle)
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "delete",
    possession: "any",
  })
  async deleteJobTitle(
    @graphql.Args() args: DeleteJobTitleArgs
  ): Promise<JobTitle | null> {
    try {
      return await this.service.deleteJobTitle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: JobTitle,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: JobTitle
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
