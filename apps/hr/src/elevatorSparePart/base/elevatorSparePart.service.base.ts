/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ElevatorSparePart as PrismaElevatorSparePart,
  Elevator as PrismaElevator,
} from "@prisma/client";

export class ElevatorSparePartServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ElevatorSparePartCountArgs, "select">
  ): Promise<number> {
    return this.prisma.elevatorSparePart.count(args);
  }

  async elevatorSpareParts(
    args: Prisma.ElevatorSparePartFindManyArgs
  ): Promise<PrismaElevatorSparePart[]> {
    return this.prisma.elevatorSparePart.findMany(args);
  }
  async elevatorSparePart(
    args: Prisma.ElevatorSparePartFindUniqueArgs
  ): Promise<PrismaElevatorSparePart | null> {
    return this.prisma.elevatorSparePart.findUnique(args);
  }
  async createElevatorSparePart(
    args: Prisma.ElevatorSparePartCreateArgs
  ): Promise<PrismaElevatorSparePart> {
    return this.prisma.elevatorSparePart.create(args);
  }
  async updateElevatorSparePart(
    args: Prisma.ElevatorSparePartUpdateArgs
  ): Promise<PrismaElevatorSparePart> {
    return this.prisma.elevatorSparePart.update(args);
  }
  async deleteElevatorSparePart(
    args: Prisma.ElevatorSparePartDeleteArgs
  ): Promise<PrismaElevatorSparePart> {
    return this.prisma.elevatorSparePart.delete(args);
  }

  async getElevator(parentId: string): Promise<PrismaElevator | null> {
    return this.prisma.elevatorSparePart
      .findUnique({
        where: { id: parentId },
      })
      .elevator();
  }
}
