/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccountTransaction } from "./AccountTransaction";
import { AccountTransactionCountArgs } from "./AccountTransactionCountArgs";
import { AccountTransactionFindManyArgs } from "./AccountTransactionFindManyArgs";
import { AccountTransactionFindUniqueArgs } from "./AccountTransactionFindUniqueArgs";
import { CreateAccountTransactionArgs } from "./CreateAccountTransactionArgs";
import { UpdateAccountTransactionArgs } from "./UpdateAccountTransactionArgs";
import { DeleteAccountTransactionArgs } from "./DeleteAccountTransactionArgs";
import { AccountTransactionDetailFindManyArgs } from "../../accountTransactionDetail/base/AccountTransactionDetailFindManyArgs";
import { AccountTransactionDetail } from "../../accountTransactionDetail/base/AccountTransactionDetail";
import { CostCenter } from "../../costCenter/base/CostCenter";
import { Store } from "../../store/base/Store";
import { AccountTransactionService } from "../accountTransaction.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccountTransaction)
export class AccountTransactionResolverBase {
  constructor(
    protected readonly service: AccountTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async _accountTransactionsMeta(
    @graphql.Args() args: AccountTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountTransaction])
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async accountTransactions(
    @graphql.Args() args: AccountTransactionFindManyArgs
  ): Promise<AccountTransaction[]> {
    return this.service.accountTransactions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountTransaction, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "own",
  })
  async accountTransaction(
    @graphql.Args() args: AccountTransactionFindUniqueArgs
  ): Promise<AccountTransaction | null> {
    const result = await this.service.accountTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountTransaction)
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "create",
    possession: "any",
  })
  async createAccountTransaction(
    @graphql.Args() args: CreateAccountTransactionArgs
  ): Promise<AccountTransaction> {
    return await this.service.createAccountTransaction({
      ...args,
      data: {
        ...args.data,

        costCenter: args.data.costCenter
          ? {
              connect: args.data.costCenter,
            }
          : undefined,

        store: {
          connect: args.data.store,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountTransaction)
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "update",
    possession: "any",
  })
  async updateAccountTransaction(
    @graphql.Args() args: UpdateAccountTransactionArgs
  ): Promise<AccountTransaction | null> {
    try {
      return await this.service.updateAccountTransaction({
        ...args,
        data: {
          ...args.data,

          costCenter: args.data.costCenter
            ? {
                connect: args.data.costCenter,
              }
            : undefined,

          store: {
            connect: args.data.store,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountTransaction)
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "delete",
    possession: "any",
  })
  async deleteAccountTransaction(
    @graphql.Args() args: DeleteAccountTransactionArgs
  ): Promise<AccountTransaction | null> {
    try {
      return await this.service.deleteAccountTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [AccountTransactionDetail], {
    name: "accountTransactionDetails",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "any",
  })
  async findAccountTransactionDetails(
    @graphql.Parent() parent: AccountTransaction,
    @graphql.Args() args: AccountTransactionDetailFindManyArgs
  ): Promise<AccountTransactionDetail[]> {
    const results = await this.service.findAccountTransactionDetails(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CostCenter, {
    nullable: true,
    name: "costCenter",
  })
  @nestAccessControl.UseRoles({
    resource: "CostCenter",
    action: "read",
    possession: "any",
  })
  async getCostCenter(
    @graphql.Parent() parent: AccountTransaction
  ): Promise<CostCenter | null> {
    const result = await this.service.getCostCenter(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "store",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStore(
    @graphql.Parent() parent: AccountTransaction
  ): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
