/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SaleService } from "../sale.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SaleCreateInput } from "./SaleCreateInput";
import { Sale } from "./Sale";
import { SaleFindManyArgs } from "./SaleFindManyArgs";
import { SaleWhereUniqueInput } from "./SaleWhereUniqueInput";
import { SaleUpdateInput } from "./SaleUpdateInput";
import { SaleDetailFindManyArgs } from "../../saleDetail/base/SaleDetailFindManyArgs";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SaleDetailWhereUniqueInput } from "../../saleDetail/base/SaleDetailWhereUniqueInput";
import { SaleReturnFindManyArgs } from "../../saleReturn/base/SaleReturnFindManyArgs";
import { SaleReturn } from "../../saleReturn/base/SaleReturn";
import { SaleReturnWhereUniqueInput } from "../../saleReturn/base/SaleReturnWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SaleControllerBase {
  constructor(
    protected readonly service: SaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sale })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSale(@common.Body() data: SaleCreateInput): Promise<Sale> {
    return await this.service.createSale({
      data: {
        ...data,

        cashRepositoryId: {
          connect: data.cashRepositoryId,
        },

        customerId: {
          connect: data.customerId,
        },

        invoiceTypeId: data.invoiceTypeId
          ? {
              connect: data.invoiceTypeId,
            }
          : undefined,

        paymentTypeId: {
          connect: data.paymentTypeId,
        },

        salePriceTypeId: {
          connect: data.salePriceTypeId,
        },

        storeId: {
          connect: data.storeId,
        },

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        saleDate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        saleTotal: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Sale] })
  @ApiNestedQuery(SaleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sales(@common.Req() request: Request): Promise<Sale[]> {
    const args = plainToClass(SaleFindManyArgs, request.query);
    return this.service.sales({
      ...args,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        saleDate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        saleTotal: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sale(
    @common.Param() params: SaleWhereUniqueInput
  ): Promise<Sale | null> {
    const result = await this.service.sale({
      where: params,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        saleDate: true,

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        saleTotal: true,
        sequenceNumber: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSale(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() data: SaleUpdateInput
  ): Promise<Sale | null> {
    try {
      return await this.service.updateSale({
        where: params,
        data: {
          ...data,

          cashRepositoryId: {
            connect: data.cashRepositoryId,
          },

          customerId: {
            connect: data.customerId,
          },

          invoiceTypeId: data.invoiceTypeId
            ? {
                connect: data.invoiceTypeId,
              }
            : undefined,

          paymentTypeId: {
            connect: data.paymentTypeId,
          },

          salePriceTypeId: {
            connect: data.salePriceTypeId,
          },

          storeId: {
            connect: data.storeId,
          },

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          referenceNumber: true,
          remaining: true,
          saleDate: true,

          salePriceTypeId: {
            select: {
              id: true,
            },
          },

          saleTotal: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sale })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSale(
    @common.Param() params: SaleWhereUniqueInput
  ): Promise<Sale | null> {
    try {
      return await this.service.deleteSale({
        where: params,
        select: {
          cashRepositoryId: {
            select: {
              id: true,
            },
          },

          createdAt: true,

          customerId: {
            select: {
              id: true,
            },
          },

          discountTotal: true,
          id: true,

          invoiceTypeId: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isCancelled: true,
          isReplicated: true,
          netTotal: true,
          nonTaxableTotal: true,
          note: true,
          paid: true,

          paymentTypeId: {
            select: {
              id: true,
            },
          },

          referenceNumber: true,
          remaining: true,
          saleDate: true,

          salePriceTypeId: {
            select: {
              id: true,
            },
          },

          saleTotal: true,
          sequenceNumber: true,

          storeId: {
            select: {
              id: true,
            },
          },

          tax: true,
          taxRate: true,
          taxableTotal: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleDetails")
  @ApiNestedQuery(SaleDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async findSaleDetails(
    @common.Req() request: Request,
    @common.Param() params: SaleWhereUniqueInput
  ): Promise<SaleDetail[]> {
    const query = plainToClass(SaleDetailFindManyArgs, request.query);
    const results = await this.service.findSaleDetails(params.id, {
      ...query,
      select: {
        barcode: true,
        createdAt: true,
        discount: true,
        discountRate: true,
        id: true,
        isActive: true,
        isError: true,
        isReplicated: true,
        note: true,
        price: true,
        priceTotal: true,

        productId: {
          select: {
            id: true,
          },
        },

        productSerialNumber: true,

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTypeId: {
          select: {
            id: true,
          },
        },

        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async connectSaleDetails(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        connect: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async updateSaleDetails(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        set: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleDetails")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async disconnectSaleDetails(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDetails: {
        disconnect: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleReturns")
  @ApiNestedQuery(SaleReturnFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async findSaleReturns(
    @common.Req() request: Request,
    @common.Param() params: SaleWhereUniqueInput
  ): Promise<SaleReturn[]> {
    const query = plainToClass(SaleReturnFindManyArgs, request.query);
    const results = await this.service.findSaleReturns(params.id, {
      ...query,
      select: {
        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        discountTotal: true,
        id: true,

        invoiceTypeId: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isCancelled: true,
        isReplicated: true,
        netTotal: true,
        nonTaxableTotal: true,
        note: true,
        paid: true,

        paymentTypeId: {
          select: {
            id: true,
          },
        },

        referenceNumber: true,
        remaining: true,
        returnTotal: true,

        saleId: {
          select: {
            id: true,
          },
        },

        salePriceTyped: {
          select: {
            id: true,
          },
        },

        saleReturnDate: true,
        sequence: true,

        storeId: {
          select: {
            id: true,
          },
        },

        tax: true,
        taxRate: true,
        taxableTotal: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async connectSaleReturns(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        connect: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async updateSaleReturns(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        set: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleReturns")
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async disconnectSaleReturns(
    @common.Param() params: SaleWhereUniqueInput,
    @common.Body() body: SaleReturnWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleReturns: {
        disconnect: body,
      },
    };
    await this.service.updateSale({
      where: params,
      data,
      select: { id: true },
    });
  }
}
