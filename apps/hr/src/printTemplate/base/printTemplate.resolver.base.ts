/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PrintTemplate } from "./PrintTemplate";
import { PrintTemplateCountArgs } from "./PrintTemplateCountArgs";
import { PrintTemplateFindManyArgs } from "./PrintTemplateFindManyArgs";
import { PrintTemplateFindUniqueArgs } from "./PrintTemplateFindUniqueArgs";
import { CreatePrintTemplateArgs } from "./CreatePrintTemplateArgs";
import { UpdatePrintTemplateArgs } from "./UpdatePrintTemplateArgs";
import { DeletePrintTemplateArgs } from "./DeletePrintTemplateArgs";
import { PrintTemplateContentFindManyArgs } from "../../printTemplateContent/base/PrintTemplateContentFindManyArgs";
import { PrintTemplateContent } from "../../printTemplateContent/base/PrintTemplateContent";
import { PrintTemplateGroup } from "../../printTemplateGroup/base/PrintTemplateGroup";
import { PrintTemplateService } from "../printTemplate.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PrintTemplate)
export class PrintTemplateResolverBase {
  constructor(
    protected readonly service: PrintTemplateService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "read",
    possession: "any",
  })
  async _printTemplatesMeta(
    @graphql.Args() args: PrintTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PrintTemplate])
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "read",
    possession: "any",
  })
  async printTemplates(
    @graphql.Args() args: PrintTemplateFindManyArgs
  ): Promise<PrintTemplate[]> {
    return this.service.printTemplates(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PrintTemplate, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "read",
    possession: "own",
  })
  async printTemplate(
    @graphql.Args() args: PrintTemplateFindUniqueArgs
  ): Promise<PrintTemplate | null> {
    const result = await this.service.printTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrintTemplate)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "create",
    possession: "any",
  })
  async createPrintTemplate(
    @graphql.Args() args: CreatePrintTemplateArgs
  ): Promise<PrintTemplate> {
    return await this.service.createPrintTemplate({
      ...args,
      data: {
        ...args.data,

        printTemplateGroupId: {
          connect: args.data.printTemplateGroupId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PrintTemplate)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "update",
    possession: "any",
  })
  async updatePrintTemplate(
    @graphql.Args() args: UpdatePrintTemplateArgs
  ): Promise<PrintTemplate | null> {
    try {
      return await this.service.updatePrintTemplate({
        ...args,
        data: {
          ...args.data,

          printTemplateGroupId: {
            connect: args.data.printTemplateGroupId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PrintTemplate)
  @nestAccessControl.UseRoles({
    resource: "PrintTemplate",
    action: "delete",
    possession: "any",
  })
  async deletePrintTemplate(
    @graphql.Args() args: DeletePrintTemplateArgs
  ): Promise<PrintTemplate | null> {
    try {
      return await this.service.deletePrintTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [PrintTemplateContent], {
    name: "printTemplateContents",
  })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateContent",
    action: "read",
    possession: "any",
  })
  async findPrintTemplateContents(
    @graphql.Parent() parent: PrintTemplate,
    @graphql.Args() args: PrintTemplateContentFindManyArgs
  ): Promise<PrintTemplateContent[]> {
    const results = await this.service.findPrintTemplateContents(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PrintTemplateGroup, {
    nullable: true,
    name: "printTemplateGroupId",
  })
  @nestAccessControl.UseRoles({
    resource: "PrintTemplateGroup",
    action: "read",
    possession: "any",
  })
  async getPrintTemplateGroupId(
    @graphql.Parent() parent: PrintTemplate
  ): Promise<PrintTemplateGroup | null> {
    const result = await this.service.getPrintTemplateGroupId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
