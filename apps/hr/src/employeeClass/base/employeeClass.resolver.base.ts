/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeClass } from "./EmployeeClass";
import { EmployeeClassCountArgs } from "./EmployeeClassCountArgs";
import { EmployeeClassFindManyArgs } from "./EmployeeClassFindManyArgs";
import { EmployeeClassFindUniqueArgs } from "./EmployeeClassFindUniqueArgs";
import { CreateEmployeeClassArgs } from "./CreateEmployeeClassArgs";
import { UpdateEmployeeClassArgs } from "./UpdateEmployeeClassArgs";
import { DeleteEmployeeClassArgs } from "./DeleteEmployeeClassArgs";
import { EmployeeClassSalaryItemValueFindManyArgs } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValueFindManyArgs";
import { EmployeeClassSalaryItemValue } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValue";
import { EmployeeClassService } from "../employeeClass.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeClass)
export class EmployeeClassResolverBase {
  constructor(
    protected readonly service: EmployeeClassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  async _employeeClassesMeta(
    @graphql.Args() args: EmployeeClassCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeClass])
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  async employeeClasses(
    @graphql.Args() args: EmployeeClassFindManyArgs
  ): Promise<EmployeeClass[]> {
    return this.service.employeeClasses(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeClass, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "own",
  })
  async employeeClass(
    @graphql.Args() args: EmployeeClassFindUniqueArgs
  ): Promise<EmployeeClass | null> {
    const result = await this.service.employeeClass(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeClass)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "create",
    possession: "any",
  })
  async createEmployeeClass(
    @graphql.Args() args: CreateEmployeeClassArgs
  ): Promise<EmployeeClass> {
    return await this.service.createEmployeeClass({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeClass)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "update",
    possession: "any",
  })
  async updateEmployeeClass(
    @graphql.Args() args: UpdateEmployeeClassArgs
  ): Promise<EmployeeClass | null> {
    try {
      return await this.service.updateEmployeeClass({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeClass)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeClass(
    @graphql.Args() args: DeleteEmployeeClassArgs
  ): Promise<EmployeeClass | null> {
    try {
      return await this.service.deleteEmployeeClass(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeClassSalaryItemValue], {
    name: "employeeClassSalaryItemValues",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "any",
  })
  async findEmployeeClassSalaryItemValues(
    @graphql.Parent() parent: EmployeeClass,
    @graphql.Args() args: EmployeeClassSalaryItemValueFindManyArgs
  ): Promise<EmployeeClassSalaryItemValue[]> {
    const results = await this.service.findEmployeeClassSalaryItemValues(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
