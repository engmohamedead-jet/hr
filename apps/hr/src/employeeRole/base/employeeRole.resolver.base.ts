/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeRole } from "./EmployeeRole";
import { EmployeeRoleCountArgs } from "./EmployeeRoleCountArgs";
import { EmployeeRoleFindManyArgs } from "./EmployeeRoleFindManyArgs";
import { EmployeeRoleFindUniqueArgs } from "./EmployeeRoleFindUniqueArgs";
import { CreateEmployeeRoleArgs } from "./CreateEmployeeRoleArgs";
import { UpdateEmployeeRoleArgs } from "./UpdateEmployeeRoleArgs";
import { DeleteEmployeeRoleArgs } from "./DeleteEmployeeRoleArgs";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { Tenant } from "../../tenant/base/Tenant";
import { EmployeeRoleService } from "../employeeRole.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeRole)
export class EmployeeRoleResolverBase {
  constructor(
    protected readonly service: EmployeeRoleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "any",
  })
  async _employeeRolesMeta(
    @graphql.Args() args: EmployeeRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeRole])
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "any",
  })
  async employeeRoles(
    @graphql.Args() args: EmployeeRoleFindManyArgs
  ): Promise<EmployeeRole[]> {
    return this.service.employeeRoles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeRole, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "own",
  })
  async employeeRole(
    @graphql.Args() args: EmployeeRoleFindUniqueArgs
  ): Promise<EmployeeRole | null> {
    const result = await this.service.employeeRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeRole)
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "create",
    possession: "any",
  })
  async createEmployeeRole(
    @graphql.Args() args: CreateEmployeeRoleArgs
  ): Promise<EmployeeRole> {
    return await this.service.createEmployeeRole({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeRole)
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "update",
    possession: "any",
  })
  async updateEmployeeRole(
    @graphql.Args() args: UpdateEmployeeRoleArgs
  ): Promise<EmployeeRole | null> {
    try {
      return await this.service.updateEmployeeRole({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeRole)
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeRole(
    @graphql.Args() args: DeleteEmployeeRoleArgs
  ): Promise<EmployeeRole | null> {
    try {
      return await this.service.deleteEmployeeRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: EmployeeRole,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: EmployeeRole
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
