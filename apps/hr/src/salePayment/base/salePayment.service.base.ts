/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SalePayment as PrismaSalePayment,
  Bank as PrismaBank,
  BankBranch as PrismaBankBranch,
  Currency as PrismaCurrency,
  PaymentMethod as PrismaPaymentMethod,
  Sale as PrismaSale,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SalePaymentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SalePaymentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.salePayment.count(args);
  }

  async salePayments(
    args: Prisma.SalePaymentFindManyArgs
  ): Promise<PrismaSalePayment[]> {
    return this.prisma.salePayment.findMany(args);
  }
  async salePayment(
    args: Prisma.SalePaymentFindUniqueArgs
  ): Promise<PrismaSalePayment | null> {
    return this.prisma.salePayment.findUnique(args);
  }
  async createSalePayment(
    args: Prisma.SalePaymentCreateArgs
  ): Promise<PrismaSalePayment> {
    return this.prisma.salePayment.create(args);
  }
  async updateSalePayment(
    args: Prisma.SalePaymentUpdateArgs
  ): Promise<PrismaSalePayment> {
    return this.prisma.salePayment.update(args);
  }
  async deleteSalePayment(
    args: Prisma.SalePaymentDeleteArgs
  ): Promise<PrismaSalePayment> {
    return this.prisma.salePayment.delete(args);
  }

  async getBank(parentId: string): Promise<PrismaBank | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .bank();
  }

  async getBankBranch(parentId: string): Promise<PrismaBankBranch | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .bankBranch();
  }

  async getCurrencyId(parentId: string): Promise<PrismaCurrency | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .currencyId();
  }

  async getPaymentMethodId(
    parentId: string
  ): Promise<PrismaPaymentMethod | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .paymentMethodId();
  }

  async getSaleId(parentId: string): Promise<PrismaSale | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .saleId();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.salePayment
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
