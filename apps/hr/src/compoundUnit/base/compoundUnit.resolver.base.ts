/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CompoundUnit } from "./CompoundUnit";
import { CompoundUnitCountArgs } from "./CompoundUnitCountArgs";
import { CompoundUnitFindManyArgs } from "./CompoundUnitFindManyArgs";
import { CompoundUnitFindUniqueArgs } from "./CompoundUnitFindUniqueArgs";
import { CreateCompoundUnitArgs } from "./CreateCompoundUnitArgs";
import { UpdateCompoundUnitArgs } from "./UpdateCompoundUnitArgs";
import { DeleteCompoundUnitArgs } from "./DeleteCompoundUnitArgs";
import { Unit } from "../../unit/base/Unit";
import { CompoundUnitService } from "../compoundUnit.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CompoundUnit)
export class CompoundUnitResolverBase {
  constructor(
    protected readonly service: CompoundUnitService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "read",
    possession: "any",
  })
  async _compoundUnitsMeta(
    @graphql.Args() args: CompoundUnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CompoundUnit])
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "read",
    possession: "any",
  })
  async compoundUnits(
    @graphql.Args() args: CompoundUnitFindManyArgs
  ): Promise<CompoundUnit[]> {
    return this.service.compoundUnits(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CompoundUnit, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "read",
    possession: "own",
  })
  async compoundUnit(
    @graphql.Args() args: CompoundUnitFindUniqueArgs
  ): Promise<CompoundUnit | null> {
    const result = await this.service.compoundUnit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompoundUnit)
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "create",
    possession: "any",
  })
  async createCompoundUnit(
    @graphql.Args() args: CreateCompoundUnitArgs
  ): Promise<CompoundUnit> {
    return await this.service.createCompoundUnit({
      ...args,
      data: {
        ...args.data,

        baseUnitId: {
          connect: args.data.baseUnitId,
        },

        compareUnitId: {
          connect: args.data.compareUnitId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CompoundUnit)
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "update",
    possession: "any",
  })
  async updateCompoundUnit(
    @graphql.Args() args: UpdateCompoundUnitArgs
  ): Promise<CompoundUnit | null> {
    try {
      return await this.service.updateCompoundUnit({
        ...args,
        data: {
          ...args.data,

          baseUnitId: {
            connect: args.data.baseUnitId,
          },

          compareUnitId: {
            connect: args.data.compareUnitId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompoundUnit)
  @nestAccessControl.UseRoles({
    resource: "CompoundUnit",
    action: "delete",
    possession: "any",
  })
  async deleteCompoundUnit(
    @graphql.Args() args: DeleteCompoundUnitArgs
  ): Promise<CompoundUnit | null> {
    try {
      return await this.service.deleteCompoundUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "baseUnitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getBaseUnitId(
    @graphql.Parent() parent: CompoundUnit
  ): Promise<Unit | null> {
    const result = await this.service.getBaseUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "compareUnitId",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getCompareUnitId(
    @graphql.Parent() parent: CompoundUnit
  ): Promise<Unit | null> {
    const result = await this.service.getCompareUnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
