/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FailureType as PrismaFailureType,
  FailureReporting as PrismaFailureReporting,
} from "@prisma/client";

export class FailureTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FailureTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.failureType.count(args);
  }

  async failureTypes(
    args: Prisma.FailureTypeFindManyArgs
  ): Promise<PrismaFailureType[]> {
    return this.prisma.failureType.findMany(args);
  }
  async failureType(
    args: Prisma.FailureTypeFindUniqueArgs
  ): Promise<PrismaFailureType | null> {
    return this.prisma.failureType.findUnique(args);
  }
  async createFailureType(
    args: Prisma.FailureTypeCreateArgs
  ): Promise<PrismaFailureType> {
    return this.prisma.failureType.create(args);
  }
  async updateFailureType(
    args: Prisma.FailureTypeUpdateArgs
  ): Promise<PrismaFailureType> {
    return this.prisma.failureType.update(args);
  }
  async deleteFailureType(
    args: Prisma.FailureTypeDeleteArgs
  ): Promise<PrismaFailureType> {
    return this.prisma.failureType.delete(args);
  }

  async findFailureReportings(
    parentId: number,
    args: Prisma.FailureReportingFindManyArgs
  ): Promise<PrismaFailureReporting[]> {
    return this.prisma.failureType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .failureReportings(args);
  }
}
