/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransactionWhereUniqueInput } from "../../accountTransaction/base/AccountTransactionWhereUniqueInput";

import {
  ValidateNested,
  IsNumber,
  Max,
  IsOptional,
  IsString,
  MaxLength,
  IsInt,
  IsDate,
} from "class-validator";

import { Type } from "class-transformer";
import { Decimal } from "decimal.js";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";
import { TransactionTypeWhereUniqueInput } from "../../transactionType/base/TransactionTypeWhereUniqueInput";

@InputType()
class AccountTransactionDetailCreateInput {
  @ApiProperty({
    required: true,
    type: () => AccountTransactionWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AccountTransactionWhereUniqueInput)
  @Field(() => AccountTransactionWhereUniqueInput)
  accountTransactionId!: AccountTransactionWhereUniqueInput;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  credit!: Decimal;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  debit!: Decimal;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  exchangeRate?: Decimal | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  referenceNumber?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  serial?: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  statementReference?: string | null;

  @ApiProperty({
    required: true,
    type: () => StoreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreWhereUniqueInput)
  @Field(() => StoreWhereUniqueInput)
  storeId!: StoreWhereUniqueInput;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  transactionDate?: Date | null;

  @ApiProperty({
    required: true,
    type: () => TransactionTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TransactionTypeWhereUniqueInput)
  @Field(() => TransactionTypeWhereUniqueInput)
  transactionTypeId!: TransactionTypeWhereUniqueInput;
}

export { AccountTransactionDetailCreateInput as AccountTransactionDetailCreateInput };
