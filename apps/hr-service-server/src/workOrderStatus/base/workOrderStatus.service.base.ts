/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  WorkOrderStatus as PrismaWorkOrderStatus,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class WorkOrderStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkOrderStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workOrderStatus.count(args);
  }

  async workOrderStatuses(
    args: Prisma.WorkOrderStatusFindManyArgs
  ): Promise<PrismaWorkOrderStatus[]> {
    return this.prisma.workOrderStatus.findMany(args);
  }
  async workOrderStatus(
    args: Prisma.WorkOrderStatusFindUniqueArgs
  ): Promise<PrismaWorkOrderStatus | null> {
    return this.prisma.workOrderStatus.findUnique(args);
  }
  async createWorkOrderStatus(
    args: Prisma.WorkOrderStatusCreateArgs
  ): Promise<PrismaWorkOrderStatus> {
    return this.prisma.workOrderStatus.create(args);
  }
  async updateWorkOrderStatus(
    args: Prisma.WorkOrderStatusUpdateArgs
  ): Promise<PrismaWorkOrderStatus> {
    return this.prisma.workOrderStatus.update(args);
  }
  async deleteWorkOrderStatus(
    args: Prisma.WorkOrderStatusDeleteArgs
  ): Promise<PrismaWorkOrderStatus> {
    return this.prisma.workOrderStatus.delete(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.workOrderStatus
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
