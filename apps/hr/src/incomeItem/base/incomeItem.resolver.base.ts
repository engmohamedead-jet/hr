/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { IncomeItem } from "./IncomeItem";
import { IncomeItemCountArgs } from "./IncomeItemCountArgs";
import { IncomeItemFindManyArgs } from "./IncomeItemFindManyArgs";
import { IncomeItemFindUniqueArgs } from "./IncomeItemFindUniqueArgs";
import { CreateIncomeItemArgs } from "./CreateIncomeItemArgs";
import { UpdateIncomeItemArgs } from "./UpdateIncomeItemArgs";
import { DeleteIncomeItemArgs } from "./DeleteIncomeItemArgs";
import { IncomeItemService } from "../incomeItem.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => IncomeItem)
export class IncomeItemResolverBase {
  constructor(
    protected readonly service: IncomeItemService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "read",
    possession: "any",
  })
  async _incomeItemsMeta(
    @graphql.Args() args: IncomeItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [IncomeItem])
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "read",
    possession: "any",
  })
  async incomeItems(
    @graphql.Args() args: IncomeItemFindManyArgs
  ): Promise<IncomeItem[]> {
    return this.service.incomeItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => IncomeItem, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "read",
    possession: "own",
  })
  async incomeItem(
    @graphql.Args() args: IncomeItemFindUniqueArgs
  ): Promise<IncomeItem | null> {
    const result = await this.service.incomeItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeItem)
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "create",
    possession: "any",
  })
  async createIncomeItem(
    @graphql.Args() args: CreateIncomeItemArgs
  ): Promise<IncomeItem> {
    return await this.service.createIncomeItem({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => IncomeItem)
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "update",
    possession: "any",
  })
  async updateIncomeItem(
    @graphql.Args() args: UpdateIncomeItemArgs
  ): Promise<IncomeItem | null> {
    try {
      return await this.service.updateIncomeItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => IncomeItem)
  @nestAccessControl.UseRoles({
    resource: "IncomeItem",
    action: "delete",
    possession: "any",
  })
  async deleteIncomeItem(
    @graphql.Args() args: DeleteIncomeItemArgs
  ): Promise<IncomeItem | null> {
    try {
      return await this.service.deleteIncomeItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
