/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  DoorType as PrismaDoorType,
  Elevator as PrismaElevator,
} from "@prisma/client";

export class DoorTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DoorTypeCountArgs, "select">): Promise<number> {
    return this.prisma.doorType.count(args);
  }

  async doorTypes(
    args: Prisma.DoorTypeFindManyArgs
  ): Promise<PrismaDoorType[]> {
    return this.prisma.doorType.findMany(args);
  }
  async doorType(
    args: Prisma.DoorTypeFindUniqueArgs
  ): Promise<PrismaDoorType | null> {
    return this.prisma.doorType.findUnique(args);
  }
  async createDoorType(
    args: Prisma.DoorTypeCreateArgs
  ): Promise<PrismaDoorType> {
    return this.prisma.doorType.create(args);
  }
  async updateDoorType(
    args: Prisma.DoorTypeUpdateArgs
  ): Promise<PrismaDoorType> {
    return this.prisma.doorType.update(args);
  }
  async deleteDoorType(
    args: Prisma.DoorTypeDeleteArgs
  ): Promise<PrismaDoorType> {
    return this.prisma.doorType.delete(args);
  }

  async findElevators(
    parentId: number,
    args: Prisma.ElevatorFindManyArgs
  ): Promise<PrismaElevator[]> {
    return this.prisma.doorType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .elevators(args);
  }
}
