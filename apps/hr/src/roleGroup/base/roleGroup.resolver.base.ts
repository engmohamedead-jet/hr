/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { RoleGroup } from "./RoleGroup";
import { RoleGroupCountArgs } from "./RoleGroupCountArgs";
import { RoleGroupFindManyArgs } from "./RoleGroupFindManyArgs";
import { RoleGroupFindUniqueArgs } from "./RoleGroupFindUniqueArgs";
import { CreateRoleGroupArgs } from "./CreateRoleGroupArgs";
import { UpdateRoleGroupArgs } from "./UpdateRoleGroupArgs";
import { DeleteRoleGroupArgs } from "./DeleteRoleGroupArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { RoleGroupService } from "../roleGroup.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => RoleGroup)
export class RoleGroupResolverBase {
  constructor(
    protected readonly service: RoleGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "read",
    possession: "any",
  })
  async _roleGroupsMeta(
    @graphql.Args() args: RoleGroupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [RoleGroup])
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "read",
    possession: "any",
  })
  async roleGroups(
    @graphql.Args() args: RoleGroupFindManyArgs
  ): Promise<RoleGroup[]> {
    return this.service.roleGroups(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => RoleGroup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "read",
    possession: "own",
  })
  async roleGroup(
    @graphql.Args() args: RoleGroupFindUniqueArgs
  ): Promise<RoleGroup | null> {
    const result = await this.service.roleGroup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleGroup)
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "create",
    possession: "any",
  })
  async createRoleGroup(
    @graphql.Args() args: CreateRoleGroupArgs
  ): Promise<RoleGroup> {
    return await this.service.createRoleGroup({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => RoleGroup)
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "update",
    possession: "any",
  })
  async updateRoleGroup(
    @graphql.Args() args: UpdateRoleGroupArgs
  ): Promise<RoleGroup | null> {
    try {
      return await this.service.updateRoleGroup({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RoleGroup)
  @nestAccessControl.UseRoles({
    resource: "RoleGroup",
    action: "delete",
    possession: "any",
  })
  async deleteRoleGroup(
    @graphql.Args() args: DeleteRoleGroupArgs
  ): Promise<RoleGroup | null> {
    try {
      return await this.service.deleteRoleGroup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: RoleGroup
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
