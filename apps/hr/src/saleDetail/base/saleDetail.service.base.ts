/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SaleDetail as PrismaSaleDetail,
  Product as PrismaProduct,
  ProductVariant as PrismaProductVariant,
  Sale as PrismaSale,
  SalePriceType as PrismaSalePriceType,
  Tenant as PrismaTenant,
  Unit as PrismaUnit,
} from "@prisma/client";

export class SaleDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SaleDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.saleDetail.count(args);
  }

  async saleDetails(
    args: Prisma.SaleDetailFindManyArgs
  ): Promise<PrismaSaleDetail[]> {
    return this.prisma.saleDetail.findMany(args);
  }
  async saleDetail(
    args: Prisma.SaleDetailFindUniqueArgs
  ): Promise<PrismaSaleDetail | null> {
    return this.prisma.saleDetail.findUnique(args);
  }
  async createSaleDetail(
    args: Prisma.SaleDetailCreateArgs
  ): Promise<PrismaSaleDetail> {
    return this.prisma.saleDetail.create(args);
  }
  async updateSaleDetail(
    args: Prisma.SaleDetailUpdateArgs
  ): Promise<PrismaSaleDetail> {
    return this.prisma.saleDetail.update(args);
  }
  async deleteSaleDetail(
    args: Prisma.SaleDetailDeleteArgs
  ): Promise<PrismaSaleDetail> {
    return this.prisma.saleDetail.delete(args);
  }

  async getProductId(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .productId();
  }

  async getProductVariantId(
    parentId: string
  ): Promise<PrismaProductVariant | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .productVariantId();
  }

  async getSaleId(parentId: string): Promise<PrismaSale | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .saleId();
  }

  async getSalePriceTypeId(
    parentId: string
  ): Promise<PrismaSalePriceType | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .salePriceTypeId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getUnitId(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.saleDetail
      .findUnique({
        where: { id: parentId },
      })
      .unitId();
  }
}
