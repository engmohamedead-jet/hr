/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CurrencySetting as PrismaCurrencySetting,
} from "@prisma/client";

export class CurrencySettingServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CurrencySettingCountArgs, "select">
  ): Promise<number> {
    return this.prisma.currencySetting.count(args);
  }

  async currencySettings(
    args: Prisma.CurrencySettingFindManyArgs
  ): Promise<PrismaCurrencySetting[]> {
    return this.prisma.currencySetting.findMany(args);
  }
  async currencySetting(
    args: Prisma.CurrencySettingFindUniqueArgs
  ): Promise<PrismaCurrencySetting | null> {
    return this.prisma.currencySetting.findUnique(args);
  }
  async createCurrencySetting(
    args: Prisma.CurrencySettingCreateArgs
  ): Promise<PrismaCurrencySetting> {
    return this.prisma.currencySetting.create(args);
  }
  async updateCurrencySetting(
    args: Prisma.CurrencySettingUpdateArgs
  ): Promise<PrismaCurrencySetting> {
    return this.prisma.currencySetting.update(args);
  }
  async deleteCurrencySetting(
    args: Prisma.CurrencySettingDeleteArgs
  ): Promise<PrismaCurrencySetting> {
    return this.prisma.currencySetting.delete(args);
  }
}
