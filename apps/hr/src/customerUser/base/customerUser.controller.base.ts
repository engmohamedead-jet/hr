/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { CustomerUserService } from "../customerUser.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { CustomerUserCreateInput } from "./CustomerUserCreateInput";
import { CustomerUser } from "./CustomerUser";
import { CustomerUserFindManyArgs } from "./CustomerUserFindManyArgs";
import { CustomerUserWhereUniqueInput } from "./CustomerUserWhereUniqueInput";
import { CustomerUserUpdateInput } from "./CustomerUserUpdateInput";
import { FailureReportingFindManyArgs } from "../../failureReporting/base/FailureReportingFindManyArgs";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { FailureReportingWhereUniqueInput } from "../../failureReporting/base/FailureReportingWhereUniqueInput";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceContractWhereUniqueInput } from "../../maintenanceContract/base/MaintenanceContractWhereUniqueInput";
import { PeriodicMaintenanceOrderFindManyArgs } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderFindManyArgs";
import { PeriodicMaintenanceOrder } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrder";
import { PeriodicMaintenanceOrderWhereUniqueInput } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrderWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class CustomerUserControllerBase {
  constructor(
    protected readonly service: CustomerUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CustomerUser })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createCustomerUser(
    @common.Body() data: CustomerUserCreateInput
  ): Promise<CustomerUser> {
    return await this.service.createCustomerUser({
      data: {
        ...data,

        elevatorId: {
          connect: data.elevatorId,
        },
      },
      select: {
        accessFailedCount: true,
        createdAt: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        email: true,
        emailConfirmed: true,
        entityVersion: true,
        id: true,
        isActive: true,
        isExternal: true,
        lastPasswordChangeTime: true,
        lockoutEnabled: true,
        lockoutEnd: true,
        name: true,
        normalizedEmail: true,
        normalizedUserName: true,
        note: true,
        phoneNumber: true,
        phoneNumberConfirmed: true,
        securityStamp: true,
        shouldChangePasswordOnNextLogin: true,
        surname: true,
        twoFactorEnabled: true,
        updatedAt: true,
        userName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [CustomerUser] })
  @ApiNestedQuery(CustomerUserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customerUsers(@common.Req() request: Request): Promise<CustomerUser[]> {
    const args = plainToClass(CustomerUserFindManyArgs, request.query);
    return this.service.customerUsers({
      ...args,
      select: {
        accessFailedCount: true,
        createdAt: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        email: true,
        emailConfirmed: true,
        entityVersion: true,
        id: true,
        isActive: true,
        isExternal: true,
        lastPasswordChangeTime: true,
        lockoutEnabled: true,
        lockoutEnd: true,
        name: true,
        normalizedEmail: true,
        normalizedUserName: true,
        note: true,
        phoneNumber: true,
        phoneNumberConfirmed: true,
        securityStamp: true,
        shouldChangePasswordOnNextLogin: true,
        surname: true,
        twoFactorEnabled: true,
        updatedAt: true,
        userName: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CustomerUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async customerUser(
    @common.Param() params: CustomerUserWhereUniqueInput
  ): Promise<CustomerUser | null> {
    const result = await this.service.customerUser({
      where: params,
      select: {
        accessFailedCount: true,
        createdAt: true,

        elevatorId: {
          select: {
            id: true,
          },
        },

        email: true,
        emailConfirmed: true,
        entityVersion: true,
        id: true,
        isActive: true,
        isExternal: true,
        lastPasswordChangeTime: true,
        lockoutEnabled: true,
        lockoutEnd: true,
        name: true,
        normalizedEmail: true,
        normalizedUserName: true,
        note: true,
        phoneNumber: true,
        phoneNumberConfirmed: true,
        securityStamp: true,
        shouldChangePasswordOnNextLogin: true,
        surname: true,
        twoFactorEnabled: true,
        updatedAt: true,
        userName: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CustomerUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateCustomerUser(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() data: CustomerUserUpdateInput
  ): Promise<CustomerUser | null> {
    try {
      return await this.service.updateCustomerUser({
        where: params,
        data: {
          ...data,

          elevatorId: {
            connect: data.elevatorId,
          },
        },
        select: {
          accessFailedCount: true,
          createdAt: true,

          elevatorId: {
            select: {
              id: true,
            },
          },

          email: true,
          emailConfirmed: true,
          entityVersion: true,
          id: true,
          isActive: true,
          isExternal: true,
          lastPasswordChangeTime: true,
          lockoutEnabled: true,
          lockoutEnd: true,
          name: true,
          normalizedEmail: true,
          normalizedUserName: true,
          note: true,
          phoneNumber: true,
          phoneNumberConfirmed: true,
          securityStamp: true,
          shouldChangePasswordOnNextLogin: true,
          surname: true,
          twoFactorEnabled: true,
          updatedAt: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CustomerUser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteCustomerUser(
    @common.Param() params: CustomerUserWhereUniqueInput
  ): Promise<CustomerUser | null> {
    try {
      return await this.service.deleteCustomerUser({
        where: params,
        select: {
          accessFailedCount: true,
          createdAt: true,

          elevatorId: {
            select: {
              id: true,
            },
          },

          email: true,
          emailConfirmed: true,
          entityVersion: true,
          id: true,
          isActive: true,
          isExternal: true,
          lastPasswordChangeTime: true,
          lockoutEnabled: true,
          lockoutEnd: true,
          name: true,
          normalizedEmail: true,
          normalizedUserName: true,
          note: true,
          phoneNumber: true,
          phoneNumberConfirmed: true,
          securityStamp: true,
          shouldChangePasswordOnNextLogin: true,
          surname: true,
          twoFactorEnabled: true,
          updatedAt: true,
          userName: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/failureReportings")
  @ApiNestedQuery(FailureReportingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async findFailureReportings(
    @common.Req() request: Request,
    @common.Param() params: CustomerUserWhereUniqueInput
  ): Promise<FailureReporting[]> {
    const query = plainToClass(FailureReportingFindManyArgs, request.query);
    const results = await this.service.findFailureReportings(params.id, {
      ...query,
      select: {
        contactingFromTime: true,
        contactingToTime: true,
        createdAt: true,

        customerElevatorId: {
          select: {
            id: true,
          },
        },

        customerUser: {
          select: {
            id: true,
          },
        },

        elevator: {
          select: {
            id: true,
          },
        },

        failureDescription: true,

        failureTypeId: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        reportingDate: true,
        reviewDate: true,

        store: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        wasReviewed: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async connectFailureReportings(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        connect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async updateFailureReportings(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        set: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/failureReportings")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async disconnectFailureReportings(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: FailureReportingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      failureReportings: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/maintenanceContracts")
  @ApiNestedQuery(MaintenanceContractFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @common.Req() request: Request,
    @common.Param() params: CustomerUserWhereUniqueInput
  ): Promise<MaintenanceContract[]> {
    const query = plainToClass(MaintenanceContractFindManyArgs, request.query);
    const results = await this.service.findMaintenanceContracts(params.id, {
      ...query,
      select: {
        confirmDate: true,
        contactEndTime: true,
        contactStartTime: true,

        contractPeriodId: {
          select: {
            id: true,
          },
        },

        contractStartDate: true,
        createdAt: true,

        customerId: {
          select: {
            id: true,
          },
        },

        customerUserId: {
          select: {
            id: true,
          },
        },

        elevatorId: {
          select: {
            id: true,
          },
        },

        id: true,
        isConfirmed: true,
        note: true,
        orderDate: true,

        storeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async connectMaintenanceContracts(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        connect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async updateMaintenanceContracts(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        set: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/maintenanceContracts")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async disconnectMaintenanceContracts(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: MaintenanceContractWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      maintenanceContracts: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/periodicMaintenanceOrders")
  @ApiNestedQuery(PeriodicMaintenanceOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async findPeriodicMaintenanceOrders(
    @common.Req() request: Request,
    @common.Param() params: CustomerUserWhereUniqueInput
  ): Promise<PeriodicMaintenanceOrder[]> {
    const query = plainToClass(
      PeriodicMaintenanceOrderFindManyArgs,
      request.query
    );
    const results = await this.service.findPeriodicMaintenanceOrders(
      params.id,
      {
        ...query,
        select: {
          confirmDate: true,
          contractEndDate: true,
          contractStartDate: true,
          createdAt: true,

          customerElevator: {
            select: {
              id: true,
            },
          },

          customerUserId: {
            select: {
              id: true,
            },
          },

          elevatorId: {
            select: {
              id: true,
            },
          },

          id: true,
          isConfirmed: true,
          orderDate: true,

          storeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async connectPeriodicMaintenanceOrders(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        connect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async updatePeriodicMaintenanceOrders(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        set: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/periodicMaintenanceOrders")
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "update",
    possession: "any",
  })
  async disconnectPeriodicMaintenanceOrders(
    @common.Param() params: CustomerUserWhereUniqueInput,
    @common.Body() body: PeriodicMaintenanceOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      periodicMaintenanceOrders: {
        disconnect: body,
      },
    };
    await this.service.updateCustomerUser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
