/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SaleQuotationDetail as PrismaSaleQuotationDetail,
  Product as PrismaProduct,
  ProductVariant as PrismaProductVariant,
  SalePriceType as PrismaSalePriceType,
  SaleQuotation as PrismaSaleQuotation,
  Tenant as PrismaTenant,
  Unit as PrismaUnit,
} from "@prisma/client";

export class SaleQuotationDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SaleQuotationDetailCountArgs, "select">
  ): Promise<number> {
    return this.prisma.saleQuotationDetail.count(args);
  }

  async saleQuotationDetails(
    args: Prisma.SaleQuotationDetailFindManyArgs
  ): Promise<PrismaSaleQuotationDetail[]> {
    return this.prisma.saleQuotationDetail.findMany(args);
  }
  async saleQuotationDetail(
    args: Prisma.SaleQuotationDetailFindUniqueArgs
  ): Promise<PrismaSaleQuotationDetail | null> {
    return this.prisma.saleQuotationDetail.findUnique(args);
  }
  async createSaleQuotationDetail(
    args: Prisma.SaleQuotationDetailCreateArgs
  ): Promise<PrismaSaleQuotationDetail> {
    return this.prisma.saleQuotationDetail.create(args);
  }
  async updateSaleQuotationDetail(
    args: Prisma.SaleQuotationDetailUpdateArgs
  ): Promise<PrismaSaleQuotationDetail> {
    return this.prisma.saleQuotationDetail.update(args);
  }
  async deleteSaleQuotationDetail(
    args: Prisma.SaleQuotationDetailDeleteArgs
  ): Promise<PrismaSaleQuotationDetail> {
    return this.prisma.saleQuotationDetail.delete(args);
  }

  async getProductId(parentId: string): Promise<PrismaProduct | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .productId();
  }

  async getProductVariantId(
    parentId: string
  ): Promise<PrismaProductVariant | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .productVariantId();
  }

  async getSalePriceType(
    parentId: string
  ): Promise<PrismaSalePriceType | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .salePriceType();
  }

  async getSaleQuotationId(
    parentId: string
  ): Promise<PrismaSaleQuotation | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .saleQuotationId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getUnitId(parentId: string): Promise<PrismaUnit | null> {
    return this.prisma.saleQuotationDetail
      .findUnique({
        where: { id: parentId },
      })
      .unitId();
  }
}
