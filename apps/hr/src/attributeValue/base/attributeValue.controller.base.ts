/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AttributeValueService } from "../attributeValue.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AttributeValueCreateInput } from "./AttributeValueCreateInput";
import { AttributeValue } from "./AttributeValue";
import { AttributeValueFindManyArgs } from "./AttributeValueFindManyArgs";
import { AttributeValueWhereUniqueInput } from "./AttributeValueWhereUniqueInput";
import { AttributeValueUpdateInput } from "./AttributeValueUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AttributeValueControllerBase {
  constructor(
    protected readonly service: AttributeValueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AttributeValue })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAttributeValue(
    @common.Body() data: AttributeValueCreateInput
  ): Promise<AttributeValue> {
    return await this.service.createAttributeValue({
      data: {
        ...data,

        attributeId: data.attributeId
          ? {
              connect: data.attributeId,
            }
          : undefined,
      },
      select: {
        attributeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AttributeValue] })
  @ApiNestedQuery(AttributeValueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attributeValues(
    @common.Req() request: Request
  ): Promise<AttributeValue[]> {
    const args = plainToClass(AttributeValueFindManyArgs, request.query);
    return this.service.attributeValues({
      ...args,
      select: {
        attributeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async attributeValue(
    @common.Param() params: AttributeValueWhereUniqueInput
  ): Promise<AttributeValue | null> {
    const result = await this.service.attributeValue({
      where: params,
      select: {
        attributeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAttributeValue(
    @common.Param() params: AttributeValueWhereUniqueInput,
    @common.Body() data: AttributeValueUpdateInput
  ): Promise<AttributeValue | null> {
    try {
      return await this.service.updateAttributeValue({
        where: params,
        data: {
          ...data,

          attributeId: data.attributeId
            ? {
                connect: data.attributeId,
              }
            : undefined,
        },
        select: {
          attributeId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AttributeValue })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AttributeValue",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAttributeValue(
    @common.Param() params: AttributeValueWhereUniqueInput
  ): Promise<AttributeValue | null> {
    try {
      return await this.service.deleteAttributeValue({
        where: params,
        select: {
          attributeId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
