/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployeeClassService } from "../employeeClass.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployeeClassCreateInput } from "./EmployeeClassCreateInput";
import { EmployeeClass } from "./EmployeeClass";
import { EmployeeClassFindManyArgs } from "./EmployeeClassFindManyArgs";
import { EmployeeClassWhereUniqueInput } from "./EmployeeClassWhereUniqueInput";
import { EmployeeClassUpdateInput } from "./EmployeeClassUpdateInput";
import { EmployeeClassSalaryItemValueFindManyArgs } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValueFindManyArgs";
import { EmployeeClassSalaryItemValue } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValue";
import { EmployeeClassSalaryItemValueWhereUniqueInput } from "../../employeeClassSalaryItemValue/base/EmployeeClassSalaryItemValueWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployeeClassControllerBase {
  constructor(
    protected readonly service: EmployeeClassService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeClass })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmployeeClass(
    @common.Body() data: EmployeeClassCreateInput
  ): Promise<EmployeeClass> {
    return await this.service.createEmployeeClass({
      data: data,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeClass] })
  @ApiNestedQuery(EmployeeClassFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeClasses(
    @common.Req() request: Request
  ): Promise<EmployeeClass[]> {
    const args = plainToClass(EmployeeClassFindManyArgs, request.query);
    return this.service.employeeClasses({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeClass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeClass(
    @common.Param() params: EmployeeClassWhereUniqueInput
  ): Promise<EmployeeClass | null> {
    const result = await this.service.employeeClass({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        normalizedName: true,
        notes: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeClass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmployeeClass(
    @common.Param() params: EmployeeClassWhereUniqueInput,
    @common.Body() data: EmployeeClassUpdateInput
  ): Promise<EmployeeClass | null> {
    try {
      return await this.service.updateEmployeeClass({
        where: params,
        data: data,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeClass })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployeeClass(
    @common.Param() params: EmployeeClassWhereUniqueInput
  ): Promise<EmployeeClass | null> {
    try {
      return await this.service.deleteEmployeeClass({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          normalizedName: true,
          notes: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/employeeClassSalaryItemValues")
  @ApiNestedQuery(EmployeeClassSalaryItemValueFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "any",
  })
  async findEmployeeClassSalaryItemValues(
    @common.Req() request: Request,
    @common.Param() params: EmployeeClassWhereUniqueInput
  ): Promise<EmployeeClassSalaryItemValue[]> {
    const query = plainToClass(
      EmployeeClassSalaryItemValueFindManyArgs,
      request.query
    );
    const results = await this.service.findEmployeeClassSalaryItemValues(
      params.id,
      {
        ...query,
        select: {
          createdAt: true,

          employeeClassId: {
            select: {
              id: true,
            },
          },

          id: true,
          itemValue: true,

          salaryItemId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/employeeClassSalaryItemValues")
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "update",
    possession: "any",
  })
  async connectEmployeeClassSalaryItemValues(
    @common.Param() params: EmployeeClassWhereUniqueInput,
    @common.Body() body: EmployeeClassSalaryItemValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClassSalaryItemValues: {
        connect: body,
      },
    };
    await this.service.updateEmployeeClass({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/employeeClassSalaryItemValues")
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "update",
    possession: "any",
  })
  async updateEmployeeClassSalaryItemValues(
    @common.Param() params: EmployeeClassWhereUniqueInput,
    @common.Body() body: EmployeeClassSalaryItemValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClassSalaryItemValues: {
        set: body,
      },
    };
    await this.service.updateEmployeeClass({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/employeeClassSalaryItemValues")
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "update",
    possession: "any",
  })
  async disconnectEmployeeClassSalaryItemValues(
    @common.Param() params: EmployeeClassWhereUniqueInput,
    @common.Body() body: EmployeeClassSalaryItemValueWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      employeeClassSalaryItemValues: {
        disconnect: body,
      },
    };
    await this.service.updateEmployeeClass({
      where: params,
      data,
      select: { id: true },
    });
  }
}
