/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Sale } from "./Sale";
import { SaleCountArgs } from "./SaleCountArgs";
import { SaleFindManyArgs } from "./SaleFindManyArgs";
import { SaleFindUniqueArgs } from "./SaleFindUniqueArgs";
import { CreateSaleArgs } from "./CreateSaleArgs";
import { UpdateSaleArgs } from "./UpdateSaleArgs";
import { DeleteSaleArgs } from "./DeleteSaleArgs";
import { SaleDetailFindManyArgs } from "../../saleDetail/base/SaleDetailFindManyArgs";
import { SaleDetail } from "../../saleDetail/base/SaleDetail";
import { SalePaymentFindManyArgs } from "../../salePayment/base/SalePaymentFindManyArgs";
import { SalePayment } from "../../salePayment/base/SalePayment";
import { SaleReturnFindManyArgs } from "../../saleReturn/base/SaleReturnFindManyArgs";
import { SaleReturn } from "../../saleReturn/base/SaleReturn";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { Customer } from "../../customer/base/Customer";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { Store } from "../../store/base/Store";
import { Tenant } from "../../tenant/base/Tenant";
import { SaleService } from "../sale.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Sale)
export class SaleResolverBase {
  constructor(
    protected readonly service: SaleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async _salesMeta(
    @graphql.Args() args: SaleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sale])
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async sales(@graphql.Args() args: SaleFindManyArgs): Promise<Sale[]> {
    return this.service.sales(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sale, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "own",
  })
  async sale(@graphql.Args() args: SaleFindUniqueArgs): Promise<Sale | null> {
    const result = await this.service.sale(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sale)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "create",
    possession: "any",
  })
  async createSale(@graphql.Args() args: CreateSaleArgs): Promise<Sale> {
    return await this.service.createSale({
      ...args,
      data: {
        ...args.data,

        cashRepositoryId: {
          connect: args.data.cashRepositoryId,
        },

        customerId: {
          connect: args.data.customerId,
        },

        invoiceTypeId: args.data.invoiceTypeId
          ? {
              connect: args.data.invoiceTypeId,
            }
          : undefined,

        paymentTerm: args.data.paymentTerm
          ? {
              connect: args.data.paymentTerm,
            }
          : undefined,

        paymentTypeId: {
          connect: args.data.paymentTypeId,
        },

        salePriceTypeId: {
          connect: args.data.salePriceTypeId,
        },

        storeId: {
          connect: args.data.storeId,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sale)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "update",
    possession: "any",
  })
  async updateSale(@graphql.Args() args: UpdateSaleArgs): Promise<Sale | null> {
    try {
      return await this.service.updateSale({
        ...args,
        data: {
          ...args.data,

          cashRepositoryId: {
            connect: args.data.cashRepositoryId,
          },

          customerId: {
            connect: args.data.customerId,
          },

          invoiceTypeId: args.data.invoiceTypeId
            ? {
                connect: args.data.invoiceTypeId,
              }
            : undefined,

          paymentTerm: args.data.paymentTerm
            ? {
                connect: args.data.paymentTerm,
              }
            : undefined,

          paymentTypeId: {
            connect: args.data.paymentTypeId,
          },

          salePriceTypeId: {
            connect: args.data.salePriceTypeId,
          },

          storeId: {
            connect: args.data.storeId,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sale)
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "delete",
    possession: "any",
  })
  async deleteSale(@graphql.Args() args: DeleteSaleArgs): Promise<Sale | null> {
    try {
      return await this.service.deleteSale(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleDetail], { name: "saleDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleDetail",
    action: "read",
    possession: "any",
  })
  async findSaleDetails(
    @graphql.Parent() parent: Sale,
    @graphql.Args() args: SaleDetailFindManyArgs
  ): Promise<SaleDetail[]> {
    const results = await this.service.findSaleDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SalePayment], { name: "salePayments" })
  @nestAccessControl.UseRoles({
    resource: "SalePayment",
    action: "read",
    possession: "any",
  })
  async findSalePayments(
    @graphql.Parent() parent: Sale,
    @graphql.Args() args: SalePaymentFindManyArgs
  ): Promise<SalePayment[]> {
    const results = await this.service.findSalePayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleReturn], { name: "saleReturns" })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async findSaleReturns(
    @graphql.Parent() parent: Sale,
    @graphql.Args() args: SaleReturnFindManyArgs
  ): Promise<SaleReturn[]> {
    const results = await this.service.findSaleReturns(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CashRepository, {
    nullable: true,
    name: "cashRepositoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async getCashRepositoryId(
    @graphql.Parent() parent: Sale
  ): Promise<CashRepository | null> {
    const result = await this.service.getCashRepositoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customerId",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomerId(
    @graphql.Parent() parent: Sale
  ): Promise<Customer | null> {
    const result = await this.service.getCustomerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InvoiceType, {
    nullable: true,
    name: "invoiceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async getInvoiceTypeId(
    @graphql.Parent() parent: Sale
  ): Promise<InvoiceType | null> {
    const result = await this.service.getInvoiceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentTerm, {
    nullable: true,
    name: "paymentTerm",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async getPaymentTerm(
    @graphql.Parent() parent: Sale
  ): Promise<PaymentTerm | null> {
    const result = await this.service.getPaymentTerm(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentType, {
    nullable: true,
    name: "paymentTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async getPaymentTypeId(
    @graphql.Parent() parent: Sale
  ): Promise<PaymentType | null> {
    const result = await this.service.getPaymentTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalePriceType, {
    nullable: true,
    name: "salePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async getSalePriceTypeId(
    @graphql.Parent() parent: Sale
  ): Promise<SalePriceType | null> {
    const result = await this.service.getSalePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(@graphql.Parent() parent: Sale): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(@graphql.Parent() parent: Sale): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
