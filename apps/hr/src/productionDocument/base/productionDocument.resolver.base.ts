/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ProductionDocument } from "./ProductionDocument";
import { ProductionDocumentCountArgs } from "./ProductionDocumentCountArgs";
import { ProductionDocumentFindManyArgs } from "./ProductionDocumentFindManyArgs";
import { ProductionDocumentFindUniqueArgs } from "./ProductionDocumentFindUniqueArgs";
import { CreateProductionDocumentArgs } from "./CreateProductionDocumentArgs";
import { UpdateProductionDocumentArgs } from "./UpdateProductionDocumentArgs";
import { DeleteProductionDocumentArgs } from "./DeleteProductionDocumentArgs";
import { ProductionDocumentService } from "../productionDocument.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ProductionDocument)
export class ProductionDocumentResolverBase {
  constructor(
    protected readonly service: ProductionDocumentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "read",
    possession: "any",
  })
  async _productionDocumentsMeta(
    @graphql.Args() args: ProductionDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ProductionDocument])
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "read",
    possession: "any",
  })
  async productionDocuments(
    @graphql.Args() args: ProductionDocumentFindManyArgs
  ): Promise<ProductionDocument[]> {
    return this.service.productionDocuments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ProductionDocument, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "read",
    possession: "own",
  })
  async productionDocument(
    @graphql.Args() args: ProductionDocumentFindUniqueArgs
  ): Promise<ProductionDocument | null> {
    const result = await this.service.productionDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionDocument)
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "create",
    possession: "any",
  })
  async createProductionDocument(
    @graphql.Args() args: CreateProductionDocumentArgs
  ): Promise<ProductionDocument> {
    return await this.service.createProductionDocument({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ProductionDocument)
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "update",
    possession: "any",
  })
  async updateProductionDocument(
    @graphql.Args() args: UpdateProductionDocumentArgs
  ): Promise<ProductionDocument | null> {
    try {
      return await this.service.updateProductionDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProductionDocument)
  @nestAccessControl.UseRoles({
    resource: "ProductionDocument",
    action: "delete",
    possession: "any",
  })
  async deleteProductionDocument(
    @graphql.Args() args: DeleteProductionDocumentArgs
  ): Promise<ProductionDocument | null> {
    try {
      return await this.service.deleteProductionDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
