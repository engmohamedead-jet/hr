/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ElevatorType as PrismaElevatorType,
  Elevator as PrismaElevator,
} from "@prisma/client";

export class ElevatorTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ElevatorTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.elevatorType.count(args);
  }

  async elevatorTypes(
    args: Prisma.ElevatorTypeFindManyArgs
  ): Promise<PrismaElevatorType[]> {
    return this.prisma.elevatorType.findMany(args);
  }
  async elevatorType(
    args: Prisma.ElevatorTypeFindUniqueArgs
  ): Promise<PrismaElevatorType | null> {
    return this.prisma.elevatorType.findUnique(args);
  }
  async createElevatorType(
    args: Prisma.ElevatorTypeCreateArgs
  ): Promise<PrismaElevatorType> {
    return this.prisma.elevatorType.create(args);
  }
  async updateElevatorType(
    args: Prisma.ElevatorTypeUpdateArgs
  ): Promise<PrismaElevatorType> {
    return this.prisma.elevatorType.update(args);
  }
  async deleteElevatorType(
    args: Prisma.ElevatorTypeDeleteArgs
  ): Promise<PrismaElevatorType> {
    return this.prisma.elevatorType.delete(args);
  }

  async findElevators(
    parentId: number,
    args: Prisma.ElevatorFindManyArgs
  ): Promise<PrismaElevator[]> {
    return this.prisma.elevatorType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .elevators(args);
  }
}
