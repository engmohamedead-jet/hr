/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ScrapReason } from "./ScrapReason";
import { ScrapReasonCountArgs } from "./ScrapReasonCountArgs";
import { ScrapReasonFindManyArgs } from "./ScrapReasonFindManyArgs";
import { ScrapReasonFindUniqueArgs } from "./ScrapReasonFindUniqueArgs";
import { CreateScrapReasonArgs } from "./CreateScrapReasonArgs";
import { UpdateScrapReasonArgs } from "./UpdateScrapReasonArgs";
import { DeleteScrapReasonArgs } from "./DeleteScrapReasonArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { ScrapReasonService } from "../scrapReason.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ScrapReason)
export class ScrapReasonResolverBase {
  constructor(
    protected readonly service: ScrapReasonService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async _scrapReasonsMeta(
    @graphql.Args() args: ScrapReasonCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ScrapReason])
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async scrapReasons(
    @graphql.Args() args: ScrapReasonFindManyArgs
  ): Promise<ScrapReason[]> {
    return this.service.scrapReasons(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ScrapReason, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "own",
  })
  async scrapReason(
    @graphql.Args() args: ScrapReasonFindUniqueArgs
  ): Promise<ScrapReason | null> {
    const result = await this.service.scrapReason(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScrapReason)
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "create",
    possession: "any",
  })
  async createScrapReason(
    @graphql.Args() args: CreateScrapReasonArgs
  ): Promise<ScrapReason> {
    return await this.service.createScrapReason({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ScrapReason)
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "update",
    possession: "any",
  })
  async updateScrapReason(
    @graphql.Args() args: UpdateScrapReasonArgs
  ): Promise<ScrapReason | null> {
    try {
      return await this.service.updateScrapReason({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ScrapReason)
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "delete",
    possession: "any",
  })
  async deleteScrapReason(
    @graphql.Args() args: DeleteScrapReasonArgs
  ): Promise<ScrapReason | null> {
    try {
      return await this.service.deleteScrapReason(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: ScrapReason
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
