/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DayOffRequest as PrismaDayOffRequest,
  User as PrismaUser,
  Employee as PrismaEmployee,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class DayOffRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DayOffRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dayOffRequest.count(args);
  }

  async dayOffRequests(
    args: Prisma.DayOffRequestFindManyArgs
  ): Promise<PrismaDayOffRequest[]> {
    return this.prisma.dayOffRequest.findMany(args);
  }
  async dayOffRequest(
    args: Prisma.DayOffRequestFindUniqueArgs
  ): Promise<PrismaDayOffRequest | null> {
    return this.prisma.dayOffRequest.findUnique(args);
  }
  async createDayOffRequest(
    args: Prisma.DayOffRequestCreateArgs
  ): Promise<PrismaDayOffRequest> {
    return this.prisma.dayOffRequest.create(args);
  }
  async updateDayOffRequest(
    args: Prisma.DayOffRequestUpdateArgs
  ): Promise<PrismaDayOffRequest> {
    return this.prisma.dayOffRequest.update(args);
  }
  async deleteDayOffRequest(
    args: Prisma.DayOffRequestDeleteArgs
  ): Promise<PrismaDayOffRequest> {
    return this.prisma.dayOffRequest.delete(args);
  }

  async getApprovedByUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dayOffRequest
      .findUnique({
        where: { id: parentId },
      })
      .approvedByUserId();
  }

  async getEmployeeId(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.dayOffRequest
      .findUnique({
        where: { id: parentId },
      })
      .employeeId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.dayOffRequest
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
