/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { WorkOrderService } from "../workOrder.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { WorkOrderCreateInput } from "./WorkOrderCreateInput";
import { WorkOrder } from "./WorkOrder";
import { WorkOrderFindManyArgs } from "./WorkOrderFindManyArgs";
import { WorkOrderWhereUniqueInput } from "./WorkOrderWhereUniqueInput";
import { WorkOrderUpdateInput } from "./WorkOrderUpdateInput";
import { WorkOrderDependencyFindManyArgs } from "../../workOrderDependency/base/WorkOrderDependencyFindManyArgs";
import { WorkOrderDependency } from "../../workOrderDependency/base/WorkOrderDependency";
import { WorkOrderDependencyWhereUniqueInput } from "../../workOrderDependency/base/WorkOrderDependencyWhereUniqueInput";
import { WorkOrderRoutingFindManyArgs } from "../../workOrderRouting/base/WorkOrderRoutingFindManyArgs";
import { WorkOrderRouting } from "../../workOrderRouting/base/WorkOrderRouting";
import { WorkOrderRoutingWhereUniqueInput } from "../../workOrderRouting/base/WorkOrderRoutingWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class WorkOrderControllerBase {
  constructor(
    protected readonly service: WorkOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WorkOrder })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createWorkOrder(
    @common.Body() data: WorkOrderCreateInput
  ): Promise<WorkOrder> {
    return await this.service.createWorkOrder({
      data: {
        ...data,

        scrapReasonId: data.scrapReasonId
          ? {
              connect: data.scrapReasonId,
            }
          : undefined,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        barcode: true,
        code: true,
        costsPerHour: true,
        createdAt: true,
        duaration: true,
        duarationExpected: true,
        duarationPercent: true,
        duarationUnit: true,
        dueDate: true,
        endDate: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        orderQuantity: true,
        productionDate: true,
        quantityProduced: true,
        quantityReportedFromPreviouseWorkOrder: true,

        scrapReasonId: {
          select: {
            id: true,
          },
        },

        scrappedQuantity: true,
        startDate: true,
        stockQuantity: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [WorkOrder] })
  @ApiNestedQuery(WorkOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workOrders(@common.Req() request: Request): Promise<WorkOrder[]> {
    const args = plainToClass(WorkOrderFindManyArgs, request.query);
    return this.service.workOrders({
      ...args,
      select: {
        barcode: true,
        code: true,
        costsPerHour: true,
        createdAt: true,
        duaration: true,
        duarationExpected: true,
        duarationPercent: true,
        duarationUnit: true,
        dueDate: true,
        endDate: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        orderQuantity: true,
        productionDate: true,
        quantityProduced: true,
        quantityReportedFromPreviouseWorkOrder: true,

        scrapReasonId: {
          select: {
            id: true,
          },
        },

        scrappedQuantity: true,
        startDate: true,
        stockQuantity: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async workOrder(
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrder | null> {
    const result = await this.service.workOrder({
      where: params,
      select: {
        barcode: true,
        code: true,
        costsPerHour: true,
        createdAt: true,
        duaration: true,
        duarationExpected: true,
        duarationPercent: true,
        duarationUnit: true,
        dueDate: true,
        endDate: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,
        orderQuantity: true,
        productionDate: true,
        quantityProduced: true,
        quantityReportedFromPreviouseWorkOrder: true,

        scrapReasonId: {
          select: {
            id: true,
          },
        },

        scrappedQuantity: true,
        startDate: true,
        stockQuantity: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateWorkOrder(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() data: WorkOrderUpdateInput
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.updateWorkOrder({
        where: params,
        data: {
          ...data,

          scrapReasonId: data.scrapReasonId
            ? {
                connect: data.scrapReasonId,
              }
            : undefined,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          barcode: true,
          code: true,
          costsPerHour: true,
          createdAt: true,
          duaration: true,
          duarationExpected: true,
          duarationPercent: true,
          duarationUnit: true,
          dueDate: true,
          endDate: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,
          orderQuantity: true,
          productionDate: true,
          quantityProduced: true,
          quantityReportedFromPreviouseWorkOrder: true,

          scrapReasonId: {
            select: {
              id: true,
            },
          },

          scrappedQuantity: true,
          startDate: true,
          stockQuantity: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WorkOrder })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteWorkOrder(
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrder | null> {
    try {
      return await this.service.deleteWorkOrder({
        where: params,
        select: {
          barcode: true,
          code: true,
          costsPerHour: true,
          createdAt: true,
          duaration: true,
          duarationExpected: true,
          duarationPercent: true,
          duarationUnit: true,
          dueDate: true,
          endDate: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,
          orderQuantity: true,
          productionDate: true,
          quantityProduced: true,
          quantityReportedFromPreviouseWorkOrder: true,

          scrapReasonId: {
            select: {
              id: true,
            },
          },

          scrappedQuantity: true,
          startDate: true,
          stockQuantity: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workOrderBaseDependencies")
  @ApiNestedQuery(WorkOrderDependencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async findWorkOrderBaseDependencies(
    @common.Req() request: Request,
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrderDependency[]> {
    const query = plainToClass(WorkOrderDependencyFindManyArgs, request.query);
    const results = await this.service.findWorkOrderBaseDependencies(
      params.id,
      {
        ...query,
        select: {
          blockedByWorkOrderId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          isActive: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,

          workOrderId: {
            select: {
              id: true,
            },
          },
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workOrderBaseDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async connectWorkOrderBaseDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderBaseDependencies: {
        connect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workOrderBaseDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async updateWorkOrderBaseDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderBaseDependencies: {
        set: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workOrderBaseDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async disconnectWorkOrderBaseDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderBaseDependencies: {
        disconnect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workOrderDependencies")
  @ApiNestedQuery(WorkOrderDependencyFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async findWorkOrderDependencies(
    @common.Req() request: Request,
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrderDependency[]> {
    const query = plainToClass(WorkOrderDependencyFindManyArgs, request.query);
    const results = await this.service.findWorkOrderDependencies(params.id, {
      ...query,
      select: {
        blockedByWorkOrderId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        isActive: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        workOrderId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workOrderDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async connectWorkOrderDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderDependencies: {
        connect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workOrderDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async updateWorkOrderDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderDependencies: {
        set: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workOrderDependencies")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async disconnectWorkOrderDependencies(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderDependencyWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderDependencies: {
        disconnect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/workOrderRoutings")
  @ApiNestedQuery(WorkOrderRoutingFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "WorkOrderRouting",
    action: "read",
    possession: "any",
  })
  async findWorkOrderRoutings(
    @common.Req() request: Request,
    @common.Param() params: WorkOrderWhereUniqueInput
  ): Promise<WorkOrderRouting[]> {
    const query = plainToClass(WorkOrderRoutingFindManyArgs, request.query);
    const results = await this.service.findWorkOrderRoutings(params.id, {
      ...query,
      select: {
        actualCost: true,
        actualEndDate: true,
        actualResourceHours: true,
        actualStartDate: true,
        createdAt: true,
        id: true,
        isActive: true,
        note: true,
        plannedCost: true,
        scheduledEndDate: true,
        scheduledStartDate: true,
        sequence: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        workOrderId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/workOrderRoutings")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async connectWorkOrderRoutings(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderRoutings: {
        connect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/workOrderRoutings")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async updateWorkOrderRoutings(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderRoutings: {
        set: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/workOrderRoutings")
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "update",
    possession: "any",
  })
  async disconnectWorkOrderRoutings(
    @common.Param() params: WorkOrderWhereUniqueInput,
    @common.Body() body: WorkOrderRoutingWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      workOrderRoutings: {
        disconnect: body,
      },
    };
    await this.service.updateWorkOrder({
      where: params,
      data,
      select: { id: true },
    });
  }
}
