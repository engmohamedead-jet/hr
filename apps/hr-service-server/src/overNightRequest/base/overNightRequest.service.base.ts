/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  OverNightRequest as PrismaOverNightRequest,
  User as PrismaUser,
  Employee as PrismaEmployee,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class OverNightRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.OverNightRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.overNightRequest.count(args);
  }

  async overNightRequests(
    args: Prisma.OverNightRequestFindManyArgs
  ): Promise<PrismaOverNightRequest[]> {
    return this.prisma.overNightRequest.findMany(args);
  }
  async overNightRequest(
    args: Prisma.OverNightRequestFindUniqueArgs
  ): Promise<PrismaOverNightRequest | null> {
    return this.prisma.overNightRequest.findUnique(args);
  }
  async createOverNightRequest(
    args: Prisma.OverNightRequestCreateArgs
  ): Promise<PrismaOverNightRequest> {
    return this.prisma.overNightRequest.create(args);
  }
  async updateOverNightRequest(
    args: Prisma.OverNightRequestUpdateArgs
  ): Promise<PrismaOverNightRequest> {
    return this.prisma.overNightRequest.update(args);
  }
  async deleteOverNightRequest(
    args: Prisma.OverNightRequestDeleteArgs
  ): Promise<PrismaOverNightRequest> {
    return this.prisma.overNightRequest.delete(args);
  }

  async getApprovedByUserId(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.overNightRequest
      .findUnique({
        where: { id: parentId },
      })
      .approvedByUserId();
  }

  async getEmployeeId(parentId: string): Promise<PrismaEmployee | null> {
    return this.prisma.overNightRequest
      .findUnique({
        where: { id: parentId },
      })
      .employeeId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.overNightRequest
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
