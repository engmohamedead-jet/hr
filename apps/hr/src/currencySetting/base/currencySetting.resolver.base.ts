/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CurrencySetting } from "./CurrencySetting";
import { CurrencySettingCountArgs } from "./CurrencySettingCountArgs";
import { CurrencySettingFindManyArgs } from "./CurrencySettingFindManyArgs";
import { CurrencySettingFindUniqueArgs } from "./CurrencySettingFindUniqueArgs";
import { CreateCurrencySettingArgs } from "./CreateCurrencySettingArgs";
import { UpdateCurrencySettingArgs } from "./UpdateCurrencySettingArgs";
import { DeleteCurrencySettingArgs } from "./DeleteCurrencySettingArgs";
import { CurrencySettingService } from "../currencySetting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CurrencySetting)
export class CurrencySettingResolverBase {
  constructor(
    protected readonly service: CurrencySettingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "read",
    possession: "any",
  })
  async _currencySettingsMeta(
    @graphql.Args() args: CurrencySettingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CurrencySetting])
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "read",
    possession: "any",
  })
  async currencySettings(
    @graphql.Args() args: CurrencySettingFindManyArgs
  ): Promise<CurrencySetting[]> {
    return this.service.currencySettings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CurrencySetting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "read",
    possession: "own",
  })
  async currencySetting(
    @graphql.Args() args: CurrencySettingFindUniqueArgs
  ): Promise<CurrencySetting | null> {
    const result = await this.service.currencySetting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CurrencySetting)
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "create",
    possession: "any",
  })
  async createCurrencySetting(
    @graphql.Args() args: CreateCurrencySettingArgs
  ): Promise<CurrencySetting> {
    return await this.service.createCurrencySetting({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CurrencySetting)
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "update",
    possession: "any",
  })
  async updateCurrencySetting(
    @graphql.Args() args: UpdateCurrencySettingArgs
  ): Promise<CurrencySetting | null> {
    try {
      return await this.service.updateCurrencySetting({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CurrencySetting)
  @nestAccessControl.UseRoles({
    resource: "CurrencySetting",
    action: "delete",
    possession: "any",
  })
  async deleteCurrencySetting(
    @graphql.Args() args: DeleteCurrencySettingArgs
  ): Promise<CurrencySetting | null> {
    try {
      return await this.service.deleteCurrencySetting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
