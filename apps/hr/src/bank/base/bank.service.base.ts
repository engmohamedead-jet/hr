/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Bank as PrismaBank,
  BankAccount as PrismaBankAccount,
  BankBranch as PrismaBankBranch,
  City as PrismaCity,
  Country as PrismaCountry,
  State as PrismaState,
} from "@prisma/client";

export class BankServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BankCountArgs, "select">): Promise<number> {
    return this.prisma.bank.count(args);
  }

  async banks(args: Prisma.BankFindManyArgs): Promise<PrismaBank[]> {
    return this.prisma.bank.findMany(args);
  }
  async bank(args: Prisma.BankFindUniqueArgs): Promise<PrismaBank | null> {
    return this.prisma.bank.findUnique(args);
  }
  async createBank(args: Prisma.BankCreateArgs): Promise<PrismaBank> {
    return this.prisma.bank.create(args);
  }
  async updateBank(args: Prisma.BankUpdateArgs): Promise<PrismaBank> {
    return this.prisma.bank.update(args);
  }
  async deleteBank(args: Prisma.BankDeleteArgs): Promise<PrismaBank> {
    return this.prisma.bank.delete(args);
  }

  async findBankAccounts(
    parentId: string,
    args: Prisma.BankAccountFindManyArgs
  ): Promise<PrismaBankAccount[]> {
    return this.prisma.bank
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankAccounts(args);
  }

  async findBankBranches(
    parentId: string,
    args: Prisma.BankBranchFindManyArgs
  ): Promise<PrismaBankBranch[]> {
    return this.prisma.bank
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bankBranches(args);
  }

  async getCityId(parentId: string): Promise<PrismaCity | null> {
    return this.prisma.bank
      .findUnique({
        where: { id: parentId },
      })
      .cityId();
  }

  async getCountryId(parentId: string): Promise<PrismaCountry | null> {
    return this.prisma.bank
      .findUnique({
        where: { id: parentId },
      })
      .countryId();
  }

  async getStateId(parentId: string): Promise<PrismaState | null> {
    return this.prisma.bank
      .findUnique({
        where: { id: parentId },
      })
      .stateId();
  }
}
