/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FiscalMonth as PrismaFiscalMonth,
  EmployeeSalary as PrismaEmployeeSalary,
} from "@prisma/client";

export class FiscalMonthServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FiscalMonthCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fiscalMonth.count(args);
  }

  async fiscalMonths(
    args: Prisma.FiscalMonthFindManyArgs
  ): Promise<PrismaFiscalMonth[]> {
    return this.prisma.fiscalMonth.findMany(args);
  }
  async fiscalMonth(
    args: Prisma.FiscalMonthFindUniqueArgs
  ): Promise<PrismaFiscalMonth | null> {
    return this.prisma.fiscalMonth.findUnique(args);
  }
  async createFiscalMonth(
    args: Prisma.FiscalMonthCreateArgs
  ): Promise<PrismaFiscalMonth> {
    return this.prisma.fiscalMonth.create(args);
  }
  async updateFiscalMonth(
    args: Prisma.FiscalMonthUpdateArgs
  ): Promise<PrismaFiscalMonth> {
    return this.prisma.fiscalMonth.update(args);
  }
  async deleteFiscalMonth(
    args: Prisma.FiscalMonthDeleteArgs
  ): Promise<PrismaFiscalMonth> {
    return this.prisma.fiscalMonth.delete(args);
  }

  async findEmployeeSalaries(
    parentId: string,
    args: Prisma.EmployeeSalaryFindManyArgs
  ): Promise<PrismaEmployeeSalary[]> {
    return this.prisma.fiscalMonth
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeSalaries(args);
  }
}
