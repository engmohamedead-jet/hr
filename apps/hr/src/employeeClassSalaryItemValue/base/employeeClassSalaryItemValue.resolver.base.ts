/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EmployeeClassSalaryItemValue } from "./EmployeeClassSalaryItemValue";
import { EmployeeClassSalaryItemValueCountArgs } from "./EmployeeClassSalaryItemValueCountArgs";
import { EmployeeClassSalaryItemValueFindManyArgs } from "./EmployeeClassSalaryItemValueFindManyArgs";
import { EmployeeClassSalaryItemValueFindUniqueArgs } from "./EmployeeClassSalaryItemValueFindUniqueArgs";
import { CreateEmployeeClassSalaryItemValueArgs } from "./CreateEmployeeClassSalaryItemValueArgs";
import { UpdateEmployeeClassSalaryItemValueArgs } from "./UpdateEmployeeClassSalaryItemValueArgs";
import { DeleteEmployeeClassSalaryItemValueArgs } from "./DeleteEmployeeClassSalaryItemValueArgs";
import { EmployeeClass } from "../../employeeClass/base/EmployeeClass";
import { SalaryItem } from "../../salaryItem/base/SalaryItem";
import { EmployeeClassSalaryItemValueService } from "../employeeClassSalaryItemValue.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EmployeeClassSalaryItemValue)
export class EmployeeClassSalaryItemValueResolverBase {
  constructor(
    protected readonly service: EmployeeClassSalaryItemValueService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "any",
  })
  async _employeeClassSalaryItemValuesMeta(
    @graphql.Args() args: EmployeeClassSalaryItemValueCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EmployeeClassSalaryItemValue])
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "any",
  })
  async employeeClassSalaryItemValues(
    @graphql.Args() args: EmployeeClassSalaryItemValueFindManyArgs
  ): Promise<EmployeeClassSalaryItemValue[]> {
    return this.service.employeeClassSalaryItemValues(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EmployeeClassSalaryItemValue, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "read",
    possession: "own",
  })
  async employeeClassSalaryItemValue(
    @graphql.Args() args: EmployeeClassSalaryItemValueFindUniqueArgs
  ): Promise<EmployeeClassSalaryItemValue | null> {
    const result = await this.service.employeeClassSalaryItemValue(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeClassSalaryItemValue)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "create",
    possession: "any",
  })
  async createEmployeeClassSalaryItemValue(
    @graphql.Args() args: CreateEmployeeClassSalaryItemValueArgs
  ): Promise<EmployeeClassSalaryItemValue> {
    return await this.service.createEmployeeClassSalaryItemValue({
      ...args,
      data: {
        ...args.data,

        employeeClassId: {
          connect: args.data.employeeClassId,
        },

        salaryItemId: {
          connect: args.data.salaryItemId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EmployeeClassSalaryItemValue)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "update",
    possession: "any",
  })
  async updateEmployeeClassSalaryItemValue(
    @graphql.Args() args: UpdateEmployeeClassSalaryItemValueArgs
  ): Promise<EmployeeClassSalaryItemValue | null> {
    try {
      return await this.service.updateEmployeeClassSalaryItemValue({
        ...args,
        data: {
          ...args.data,

          employeeClassId: {
            connect: args.data.employeeClassId,
          },

          salaryItemId: {
            connect: args.data.salaryItemId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EmployeeClassSalaryItemValue)
  @nestAccessControl.UseRoles({
    resource: "EmployeeClassSalaryItemValue",
    action: "delete",
    possession: "any",
  })
  async deleteEmployeeClassSalaryItemValue(
    @graphql.Args() args: DeleteEmployeeClassSalaryItemValueArgs
  ): Promise<EmployeeClassSalaryItemValue | null> {
    try {
      return await this.service.deleteEmployeeClassSalaryItemValue(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => EmployeeClass, {
    nullable: true,
    name: "employeeClassId",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeClass",
    action: "read",
    possession: "any",
  })
  async getEmployeeClassId(
    @graphql.Parent() parent: EmployeeClassSalaryItemValue
  ): Promise<EmployeeClass | null> {
    const result = await this.service.getEmployeeClassId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalaryItem, {
    nullable: true,
    name: "salaryItemId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalaryItem",
    action: "read",
    possession: "any",
  })
  async getSalaryItemId(
    @graphql.Parent() parent: EmployeeClassSalaryItemValue
  ): Promise<SalaryItem | null> {
    const result = await this.service.getSalaryItemId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
