/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsNumber,
  Max,
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
  IsBoolean,
  IsInt,
  Min,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Bank } from "../../bank/base/Bank";
import { Type } from "class-transformer";
import { BankBranch } from "../../bankBranch/base/BankBranch";
import { Currency } from "../../currency/base/Currency";
import { PaymentMethod } from "../../paymentMethod/base/PaymentMethod";
import { Sale } from "../../sale/base/Sale";
import { Tenant } from "../../tenant/base/Tenant";

@ObjectType()
class SalePayment {
  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  LocalCurrencyRatl!: Decimal;

  @ApiProperty({
    required: false,
    type: () => Bank,
  })
  @ValidateNested()
  @Type(() => Bank)
  @IsOptional()
  bank?: Bank | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  bankBrach!: string;

  @ApiProperty({
    required: false,
    type: () => BankBranch,
  })
  @ValidateNested()
  @Type(() => BankBranch)
  @IsOptional()
  bankBranch?: BankBranch | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  chequeNumber!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  creditCardNumber!: string | null;

  @ApiProperty({
    required: false,
    type: () => Currency,
  })
  @ValidateNested()
  @Type(() => Currency)
  @IsOptional()
  currencyId?: Currency | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @Field(() => Float)
  foreignCurrencyRate!: Decimal;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isCheque!: boolean | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  paidValue!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  paymentDate!: Date;

  @ApiProperty({
    required: true,
    type: () => PaymentMethod,
  })
  @ValidateNested()
  @Type(() => PaymentMethod)
  paymentMethodId?: PaymentMethod;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  quantity!: number | null;

  @ApiProperty({
    required: false,
    type: () => Sale,
  })
  @ValidateNested()
  @Type(() => Sale)
  @IsOptional()
  saleId?: Sale | null;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @Field(() => Number)
  seqeunce!: number;

  @ApiProperty({
    required: false,
    type: () => Tenant,
  })
  @ValidateNested()
  @Type(() => Tenant)
  @IsOptional()
  tenant?: Tenant | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { SalePayment as SalePayment };
