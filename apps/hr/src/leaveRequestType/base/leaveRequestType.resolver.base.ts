/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { LeaveRequestType } from "./LeaveRequestType";
import { LeaveRequestTypeCountArgs } from "./LeaveRequestTypeCountArgs";
import { LeaveRequestTypeFindManyArgs } from "./LeaveRequestTypeFindManyArgs";
import { LeaveRequestTypeFindUniqueArgs } from "./LeaveRequestTypeFindUniqueArgs";
import { CreateLeaveRequestTypeArgs } from "./CreateLeaveRequestTypeArgs";
import { UpdateLeaveRequestTypeArgs } from "./UpdateLeaveRequestTypeArgs";
import { DeleteLeaveRequestTypeArgs } from "./DeleteLeaveRequestTypeArgs";
import { LeaveRequestFindManyArgs } from "../../leaveRequest/base/LeaveRequestFindManyArgs";
import { LeaveRequest } from "../../leaveRequest/base/LeaveRequest";
import { Tenant } from "../../tenant/base/Tenant";
import { LeaveRequestTypeService } from "../leaveRequestType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => LeaveRequestType)
export class LeaveRequestTypeResolverBase {
  constructor(
    protected readonly service: LeaveRequestTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "read",
    possession: "any",
  })
  async _leaveRequestTypesMeta(
    @graphql.Args() args: LeaveRequestTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [LeaveRequestType])
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "read",
    possession: "any",
  })
  async leaveRequestTypes(
    @graphql.Args() args: LeaveRequestTypeFindManyArgs
  ): Promise<LeaveRequestType[]> {
    return this.service.leaveRequestTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => LeaveRequestType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "read",
    possession: "own",
  })
  async leaveRequestType(
    @graphql.Args() args: LeaveRequestTypeFindUniqueArgs
  ): Promise<LeaveRequestType | null> {
    const result = await this.service.leaveRequestType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LeaveRequestType)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "create",
    possession: "any",
  })
  async createLeaveRequestType(
    @graphql.Args() args: CreateLeaveRequestTypeArgs
  ): Promise<LeaveRequestType> {
    return await this.service.createLeaveRequestType({
      ...args,
      data: {
        ...args.data,

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => LeaveRequestType)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "update",
    possession: "any",
  })
  async updateLeaveRequestType(
    @graphql.Args() args: UpdateLeaveRequestTypeArgs
  ): Promise<LeaveRequestType | null> {
    try {
      return await this.service.updateLeaveRequestType({
        ...args,
        data: {
          ...args.data,

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LeaveRequestType)
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "delete",
    possession: "any",
  })
  async deleteLeaveRequestType(
    @graphql.Args() args: DeleteLeaveRequestTypeArgs
  ): Promise<LeaveRequestType | null> {
    try {
      return await this.service.deleteLeaveRequestType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LeaveRequest], { name: "leavingPermissions" })
  @nestAccessControl.UseRoles({
    resource: "LeaveRequest",
    action: "read",
    possession: "any",
  })
  async findLeavingPermissions(
    @graphql.Parent() parent: LeaveRequestType,
    @graphql.Args() args: LeaveRequestFindManyArgs
  ): Promise<LeaveRequest[]> {
    const results = await this.service.findLeavingPermissions(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: LeaveRequestType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
