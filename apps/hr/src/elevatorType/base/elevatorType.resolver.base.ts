/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ElevatorType } from "./ElevatorType";
import { ElevatorTypeCountArgs } from "./ElevatorTypeCountArgs";
import { ElevatorTypeFindManyArgs } from "./ElevatorTypeFindManyArgs";
import { ElevatorTypeFindUniqueArgs } from "./ElevatorTypeFindUniqueArgs";
import { CreateElevatorTypeArgs } from "./CreateElevatorTypeArgs";
import { UpdateElevatorTypeArgs } from "./UpdateElevatorTypeArgs";
import { DeleteElevatorTypeArgs } from "./DeleteElevatorTypeArgs";
import { ElevatorFindManyArgs } from "../../elevator/base/ElevatorFindManyArgs";
import { Elevator } from "../../elevator/base/Elevator";
import { ElevatorTypeService } from "../elevatorType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ElevatorType)
export class ElevatorTypeResolverBase {
  constructor(
    protected readonly service: ElevatorTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "read",
    possession: "any",
  })
  async _elevatorTypesMeta(
    @graphql.Args() args: ElevatorTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ElevatorType])
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "read",
    possession: "any",
  })
  async elevatorTypes(
    @graphql.Args() args: ElevatorTypeFindManyArgs
  ): Promise<ElevatorType[]> {
    return this.service.elevatorTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ElevatorType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "read",
    possession: "own",
  })
  async elevatorType(
    @graphql.Args() args: ElevatorTypeFindUniqueArgs
  ): Promise<ElevatorType | null> {
    const result = await this.service.elevatorType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorType)
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "create",
    possession: "any",
  })
  async createElevatorType(
    @graphql.Args() args: CreateElevatorTypeArgs
  ): Promise<ElevatorType> {
    return await this.service.createElevatorType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ElevatorType)
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "update",
    possession: "any",
  })
  async updateElevatorType(
    @graphql.Args() args: UpdateElevatorTypeArgs
  ): Promise<ElevatorType | null> {
    try {
      return await this.service.updateElevatorType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ElevatorType)
  @nestAccessControl.UseRoles({
    resource: "ElevatorType",
    action: "delete",
    possession: "any",
  })
  async deleteElevatorType(
    @graphql.Args() args: DeleteElevatorTypeArgs
  ): Promise<ElevatorType | null> {
    try {
      return await this.service.deleteElevatorType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Elevator], { name: "elevators" })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async findElevators(
    @graphql.Parent() parent: ElevatorType,
    @graphql.Args() args: ElevatorFindManyArgs
  ): Promise<Elevator[]> {
    const results = await this.service.findElevators(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
