/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SaleTeam as PrismaSaleTeam,
  SalePerson as PrismaSalePerson,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SaleTeamServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SaleTeamCountArgs, "select">): Promise<number> {
    return this.prisma.saleTeam.count(args);
  }

  async saleTeams(
    args: Prisma.SaleTeamFindManyArgs
  ): Promise<PrismaSaleTeam[]> {
    return this.prisma.saleTeam.findMany(args);
  }
  async saleTeam(
    args: Prisma.SaleTeamFindUniqueArgs
  ): Promise<PrismaSaleTeam | null> {
    return this.prisma.saleTeam.findUnique(args);
  }
  async createSaleTeam(
    args: Prisma.SaleTeamCreateArgs
  ): Promise<PrismaSaleTeam> {
    return this.prisma.saleTeam.create(args);
  }
  async updateSaleTeam(
    args: Prisma.SaleTeamUpdateArgs
  ): Promise<PrismaSaleTeam> {
    return this.prisma.saleTeam.update(args);
  }
  async deleteSaleTeam(
    args: Prisma.SaleTeamDeleteArgs
  ): Promise<PrismaSaleTeam> {
    return this.prisma.saleTeam.delete(args);
  }

  async findSalePeople(
    parentId: string,
    args: Prisma.SalePersonFindManyArgs
  ): Promise<PrismaSalePerson[]> {
    return this.prisma.saleTeam
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .salePeople(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.saleTeam
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
