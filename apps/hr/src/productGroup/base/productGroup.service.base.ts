/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductGroup as PrismaProductGroup,
  Product as PrismaProduct,
  Account as PrismaAccount,
  SaleTax as PrismaSaleTax,
} from "@prisma/client";

export class ProductGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productGroup.count(args);
  }

  async productGroups(
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.productGroup.findMany(args);
  }
  async productGroup(
    args: Prisma.ProductGroupFindUniqueArgs
  ): Promise<PrismaProductGroup | null> {
    return this.prisma.productGroup.findUnique(args);
  }
  async createProductGroup(
    args: Prisma.ProductGroupCreateArgs
  ): Promise<PrismaProductGroup> {
    return this.prisma.productGroup.create(args);
  }
  async updateProductGroup(
    args: Prisma.ProductGroupUpdateArgs
  ): Promise<PrismaProductGroup> {
    return this.prisma.productGroup.update(args);
  }
  async deleteProductGroup(
    args: Prisma.ProductGroupDeleteArgs
  ): Promise<PrismaProductGroup> {
    return this.prisma.productGroup.delete(args);
  }

  async findProductGroups(
    parentId: string,
    args: Prisma.ProductGroupFindManyArgs
  ): Promise<PrismaProductGroup[]> {
    return this.prisma.productGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productGroups(args);
  }

  async findProducts(
    parentId: string,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.productGroup
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }

  async getCostOfGoodsSoldAccount(
    parentId: string
  ): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .costOfGoodsSoldAccount();
  }

  async getInventoryAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .inventoryAccount();
  }

  async getParentProductGroupId(
    parentId: string
  ): Promise<PrismaProductGroup | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .parentProductGroupId();
  }

  async getPurchaseAccountId(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .purchaseAccountId();
  }

  async getPurchaseDiscountAccountId(
    parentId: string
  ): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .purchaseDiscountAccountId();
  }

  async getPurchaseReturnAccountId(
    parentId: string
  ): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .purchaseReturnAccountId();
  }

  async getSaleAccountId(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .saleAccountId();
  }

  async getSaleDiscountAccountId(
    parentId: string
  ): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .saleDiscountAccountId();
  }

  async getSaleReturnAccountId(
    parentId: string
  ): Promise<PrismaAccount | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .saleReturnAccountId();
  }

  async getSaleTaxId(parentId: string): Promise<PrismaSaleTax | null> {
    return this.prisma.productGroup
      .findUnique({
        where: { id: parentId },
      })
      .saleTaxId();
  }
}
