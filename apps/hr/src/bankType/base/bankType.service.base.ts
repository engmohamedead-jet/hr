/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BankType as PrismaBankType,
  Bank as PrismaBank,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class BankTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BankTypeCountArgs, "select">): Promise<number> {
    return this.prisma.bankType.count(args);
  }

  async bankTypes(
    args: Prisma.BankTypeFindManyArgs
  ): Promise<PrismaBankType[]> {
    return this.prisma.bankType.findMany(args);
  }
  async bankType(
    args: Prisma.BankTypeFindUniqueArgs
  ): Promise<PrismaBankType | null> {
    return this.prisma.bankType.findUnique(args);
  }
  async createBankType(
    args: Prisma.BankTypeCreateArgs
  ): Promise<PrismaBankType> {
    return this.prisma.bankType.create(args);
  }
  async updateBankType(
    args: Prisma.BankTypeUpdateArgs
  ): Promise<PrismaBankType> {
    return this.prisma.bankType.update(args);
  }
  async deleteBankType(
    args: Prisma.BankTypeDeleteArgs
  ): Promise<PrismaBankType> {
    return this.prisma.bankType.delete(args);
  }

  async findBanks(
    parentId: number,
    args: Prisma.BankFindManyArgs
  ): Promise<PrismaBank[]> {
    return this.prisma.bankType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .banks(args);
  }

  async getTenant(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.bankType
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
