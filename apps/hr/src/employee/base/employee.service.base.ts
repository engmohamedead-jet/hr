/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Employee as PrismaEmployee,
  Attendance as PrismaAttendance,
  BonusRequest as PrismaBonusRequest,
  CheckInOut as PrismaCheckInOut,
  DailyMovementRequest as PrismaDailyMovementRequest,
  DayOffRequest as PrismaDayOffRequest,
  LeaveRequest as PrismaLeaveRequest,
  OverNightRequest as PrismaOverNightRequest,
  EmployeeDepartment as PrismaEmployeeDepartment,
  EmployeeGroup as PrismaEmployeeGroup,
  EmployeeRole as PrismaEmployeeRole,
  JobTitle as PrismaJobTitle,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class EmployeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.EmployeeCountArgs, "select">): Promise<number> {
    return this.prisma.employee.count(args);
  }

  async employees(
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.employee.findMany(args);
  }
  async employee(
    args: Prisma.EmployeeFindUniqueArgs
  ): Promise<PrismaEmployee | null> {
    return this.prisma.employee.findUnique(args);
  }
  async createEmployee(
    args: Prisma.EmployeeCreateArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.create(args);
  }
  async updateEmployee(
    args: Prisma.EmployeeUpdateArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.update(args);
  }
  async deleteEmployee(
    args: Prisma.EmployeeDeleteArgs
  ): Promise<PrismaEmployee> {
    return this.prisma.employee.delete(args);
  }

  async findAttendances(
    parentId: string,
    args: Prisma.AttendanceFindManyArgs
  ): Promise<PrismaAttendance[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .attendances(args);
  }

  async findBonusRequests(
    parentId: string,
    args: Prisma.BonusRequestFindManyArgs
  ): Promise<PrismaBonusRequest[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bonusRequests(args);
  }

  async findCheckInOuts(
    parentId: string,
    args: Prisma.CheckInOutFindManyArgs
  ): Promise<PrismaCheckInOut[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .checkInOuts(args);
  }

  async findDailyMovementRequests(
    parentId: string,
    args: Prisma.DailyMovementRequestFindManyArgs
  ): Promise<PrismaDailyMovementRequest[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dailyMovementRequests(args);
  }

  async findDayOffRequests(
    parentId: string,
    args: Prisma.DayOffRequestFindManyArgs
  ): Promise<PrismaDayOffRequest[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dayOffRequests(args);
  }

  async findLeavingPermissionRequests(
    parentId: string,
    args: Prisma.LeaveRequestFindManyArgs
  ): Promise<PrismaLeaveRequest[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .leavingPermissionRequests(args);
  }

  async findOverNightRequests(
    parentId: string,
    args: Prisma.OverNightRequestFindManyArgs
  ): Promise<PrismaOverNightRequest[]> {
    return this.prisma.employee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .overNightRequests(args);
  }

  async getEmployeeDepartmentId(
    parentId: string
  ): Promise<PrismaEmployeeDepartment | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .employeeDepartmentId();
  }

  async getEmployeeGroup(
    parentId: string
  ): Promise<PrismaEmployeeGroup | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .employeeGroup();
  }

  async getEmployeeRoleId(
    parentId: string
  ): Promise<PrismaEmployeeRole | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .employeeRoleId();
  }

  async getJobTitle(parentId: string): Promise<PrismaJobTitle | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .jobTitle();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.employee
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
