/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransactionDetailListRelationFilter } from "../../accountTransactionDetail/base/AccountTransactionDetailListRelationFilter";
import { ValidateNested, IsOptional } from "class-validator";
import { Type } from "class-transformer";
import { CostCenterWhereUniqueInput } from "../../costCenter/base/CostCenterWhereUniqueInput";
import { StringFilter } from "../../util/StringFilter";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";
import { DateTimeNullableFilter } from "../../util/DateTimeNullableFilter";

@InputType()
class AccountTransactionWhereInput {
  @ApiProperty({
    required: false,
    type: () => AccountTransactionDetailListRelationFilter,
  })
  @ValidateNested()
  @Type(() => AccountTransactionDetailListRelationFilter)
  @IsOptional()
  @Field(() => AccountTransactionDetailListRelationFilter, {
    nullable: true,
  })
  accountTransactionDetails?: AccountTransactionDetailListRelationFilter;

  @ApiProperty({
    required: false,
    type: () => CostCenterWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => CostCenterWhereUniqueInput)
  @IsOptional()
  @Field(() => CostCenterWhereUniqueInput, {
    nullable: true,
  })
  costCenter?: CostCenterWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  note?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  referenceNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  statementReference?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: () => StoreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreWhereUniqueInput)
  @IsOptional()
  @Field(() => StoreWhereUniqueInput, {
    nullable: true,
  })
  store?: StoreWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: DateTimeNullableFilter,
  })
  @Type(() => DateTimeNullableFilter)
  @IsOptional()
  @Field(() => DateTimeNullableFilter, {
    nullable: true,
  })
  transactionDate?: DateTimeNullableFilter;
}

export { AccountTransactionWhereInput as AccountTransactionWhereInput };
