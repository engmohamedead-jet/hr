/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CheckInOut } from "./CheckInOut";
import { CheckInOutCountArgs } from "./CheckInOutCountArgs";
import { CheckInOutFindManyArgs } from "./CheckInOutFindManyArgs";
import { CheckInOutFindUniqueArgs } from "./CheckInOutFindUniqueArgs";
import { CreateCheckInOutArgs } from "./CreateCheckInOutArgs";
import { UpdateCheckInOutArgs } from "./UpdateCheckInOutArgs";
import { DeleteCheckInOutArgs } from "./DeleteCheckInOutArgs";
import { User } from "../../user/base/User";
import { Employee } from "../../employee/base/Employee";
import { Machine } from "../../machine/base/Machine";
import { Tenant } from "../../tenant/base/Tenant";
import { CheckInOutService } from "../checkInOut.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CheckInOut)
export class CheckInOutResolverBase {
  constructor(
    protected readonly service: CheckInOutService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "any",
  })
  async _checkInOutsMeta(
    @graphql.Args() args: CheckInOutCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CheckInOut])
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "any",
  })
  async checkInOuts(
    @graphql.Args() args: CheckInOutFindManyArgs
  ): Promise<CheckInOut[]> {
    return this.service.checkInOuts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CheckInOut, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "own",
  })
  async checkInOut(
    @graphql.Args() args: CheckInOutFindUniqueArgs
  ): Promise<CheckInOut | null> {
    const result = await this.service.checkInOut(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CheckInOut)
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "create",
    possession: "any",
  })
  async createCheckInOut(
    @graphql.Args() args: CreateCheckInOutArgs
  ): Promise<CheckInOut> {
    return await this.service.createCheckInOut({
      ...args,
      data: {
        ...args.data,

        approvedByUserId: args.data.approvedByUserId
          ? {
              connect: args.data.approvedByUserId,
            }
          : undefined,

        employee: {
          connect: args.data.employee,
        },

        machine: {
          connect: args.data.machine,
        },

        tenantId: args.data.tenantId
          ? {
              connect: args.data.tenantId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CheckInOut)
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "update",
    possession: "any",
  })
  async updateCheckInOut(
    @graphql.Args() args: UpdateCheckInOutArgs
  ): Promise<CheckInOut | null> {
    try {
      return await this.service.updateCheckInOut({
        ...args,
        data: {
          ...args.data,

          approvedByUserId: args.data.approvedByUserId
            ? {
                connect: args.data.approvedByUserId,
              }
            : undefined,

          employee: {
            connect: args.data.employee,
          },

          machine: {
            connect: args.data.machine,
          },

          tenantId: args.data.tenantId
            ? {
                connect: args.data.tenantId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CheckInOut)
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "delete",
    possession: "any",
  })
  async deleteCheckInOut(
    @graphql.Args() args: DeleteCheckInOutArgs
  ): Promise<CheckInOut | null> {
    try {
      return await this.service.deleteCheckInOut(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "approvedByUserId",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getApprovedByUserId(
    @graphql.Parent() parent: CheckInOut
  ): Promise<User | null> {
    const result = await this.service.getApprovedByUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Employee, {
    nullable: true,
    name: "employee",
  })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async getEmployee(
    @graphql.Parent() parent: CheckInOut
  ): Promise<Employee | null> {
    const result = await this.service.getEmployee(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Machine, {
    nullable: true,
    name: "machine",
  })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async getMachine(
    @graphql.Parent() parent: CheckInOut
  ): Promise<Machine | null> {
    const result = await this.service.getMachine(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenantId",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenantId(
    @graphql.Parent() parent: CheckInOut
  ): Promise<Tenant | null> {
    const result = await this.service.getTenantId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
