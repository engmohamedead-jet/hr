/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountService } from "../account.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountCreateInput } from "./AccountCreateInput";
import { Account } from "./Account";
import { AccountFindManyArgs } from "./AccountFindManyArgs";
import { AccountWhereUniqueInput } from "./AccountWhereUniqueInput";
import { AccountUpdateInput } from "./AccountUpdateInput";
import { ProductGroupFindManyArgs } from "../../productGroup/base/ProductGroupFindManyArgs";
import { ProductGroup } from "../../productGroup/base/ProductGroup";
import { ProductGroupWhereUniqueInput } from "../../productGroup/base/ProductGroupWhereUniqueInput";
import { InstallmentSaleFeeFindManyArgs } from "../../installmentSaleFee/base/InstallmentSaleFeeFindManyArgs";
import { InstallmentSaleFee } from "../../installmentSaleFee/base/InstallmentSaleFee";
import { InstallmentSaleFeeWhereUniqueInput } from "../../installmentSaleFee/base/InstallmentSaleFeeWhereUniqueInput";
import { SalePersonFindManyArgs } from "../../salePerson/base/SalePersonFindManyArgs";
import { SalePerson } from "../../salePerson/base/SalePerson";
import { SalePersonWhereUniqueInput } from "../../salePerson/base/SalePersonWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountControllerBase {
  constructor(
    protected readonly service: AccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Account })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccount(
    @common.Body() data: AccountCreateInput
  ): Promise<Account> {
    return await this.service.createAccount({
      data: {
        ...data,

        parentAccountId: data.parentAccountId
          ? {
              connect: data.parentAccountId,
            }
          : undefined,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        accountNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isMasterAccount: true,
        name: true,
        normalizedName: true,
        note: true,

        parentAccountId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Account] })
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accounts(@common.Req() request: Request): Promise<Account[]> {
    const args = plainToClass(AccountFindManyArgs, request.query);
    return this.service.accounts({
      ...args,
      select: {
        accountNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isMasterAccount: true,
        name: true,
        normalizedName: true,
        note: true,

        parentAccountId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async account(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    const result = await this.service.account({
      where: params,
      select: {
        accountNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isMasterAccount: true,
        name: true,
        normalizedName: true,
        note: true,

        parentAccountId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccount(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() data: AccountUpdateInput
  ): Promise<Account | null> {
    try {
      return await this.service.updateAccount({
        where: params,
        data: {
          ...data,

          parentAccountId: data.parentAccountId
            ? {
                connect: data.parentAccountId,
              }
            : undefined,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          accountNumber: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          isMasterAccount: true,
          name: true,
          normalizedName: true,
          note: true,

          parentAccountId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Account })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccount(
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account | null> {
    try {
      return await this.service.deleteAccount({
        where: params,
        select: {
          accountNumber: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          isMasterAccount: true,
          name: true,
          normalizedName: true,
          note: true,

          parentAccountId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/SaleReturnAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findSaleReturnAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findSaleReturnAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/SaleReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectSaleReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SaleReturnAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/SaleReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateSaleReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SaleReturnAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/SaleReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectSaleReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      SaleReturnAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/aleAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findAleAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findAleAccountProductGroups(params.id, {
      ...query,
      select: {
        code: true,

        costOfGoodsSoldAccount: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccount: {
          select: {
            id: true,
          },
        },

        isActive: true,
        isDefault: true,
        name: true,
        normalizedName: true,
        note: true,

        parentProductGroupId: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/aleAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectAleAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aleAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/aleAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateAleAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aleAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/aleAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectAleAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      aleAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/costOfGoodsSoldAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findCostOfGoodsSoldAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findCostOfGoodsSoldAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/costOfGoodsSoldAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectCostOfGoodsSoldAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costOfGoodsSoldAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/costOfGoodsSoldAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateCostOfGoodsSoldAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costOfGoodsSoldAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/costOfGoodsSoldAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectCostOfGoodsSoldAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      costOfGoodsSoldAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/installmentSaleFees")
  @ApiNestedQuery(InstallmentSaleFeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "InstallmentSaleFee",
    action: "read",
    possession: "any",
  })
  async findInstallmentSaleFees(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<InstallmentSaleFee[]> {
    const query = plainToClass(InstallmentSaleFeeFindManyArgs, request.query);
    const results = await this.service.findInstallmentSaleFees(params.id, {
      ...query,
      select: {
        accountId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isFlatAmount: true,
        name: true,
        normalizedName: true,
        note: true,
        rate: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectInstallmentSaleFees(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateInstallmentSaleFees(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/installmentSaleFees")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectInstallmentSaleFees(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: InstallmentSaleFeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      installmentSaleFees: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/inventoryAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findInventoryAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findInventoryAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/inventoryAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectInventoryAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/inventoryAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateInventoryAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/inventoryAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectInventoryAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      inventoryAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parentAccounts")
  @ApiNestedQuery(AccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findParentAccounts(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<Account[]> {
    const query = plainToClass(AccountFindManyArgs, request.query);
    const results = await this.service.findParentAccounts(params.id, {
      ...query,
      select: {
        accountNumber: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        isMasterAccount: true,
        name: true,
        normalizedName: true,
        note: true,

        parentAccountId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parentAccounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectParentAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentAccounts: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parentAccounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateParentAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentAccounts: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parentAccounts")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectParentAccounts(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: AccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findPurchaseAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findPurchaseAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectPurchaseAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updatePurchaseAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseDiscountAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findPurchaseDiscountAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findPurchaseDiscountAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectPurchaseDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDiscountAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updatePurchaseDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDiscountAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseDiscountAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/purchaseReturnAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findPurchaseReturnAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findPurchaseReturnAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/purchaseReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectPurchaseReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/purchaseReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updatePurchaseReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/purchaseReturnAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectPurchaseReturnAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      purchaseReturnAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/saleDiscountAccountProductGroups")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findSaleDiscountAccountProductGroups(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findSaleDiscountAccountProductGroups(
      params.id,
      {
        ...query,
        select: {
          code: true,

          costOfGoodsSoldAccount: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccount: {
            select: {
              id: true,
            },
          },

          isActive: true,
          isDefault: true,
          name: true,
          normalizedName: true,
          note: true,

          parentProductGroupId: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/saleDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectSaleDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDiscountAccountProductGroups: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/saleDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateSaleDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDiscountAccountProductGroups: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/saleDiscountAccountProductGroups")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectSaleDiscountAccountProductGroups(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      saleDiscountAccountProductGroups: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/salePeople")
  @ApiNestedQuery(SalePersonFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SalePerson",
    action: "read",
    possession: "any",
  })
  async findSalePeople(
    @common.Req() request: Request,
    @common.Param() params: AccountWhereUniqueInput
  ): Promise<SalePerson[]> {
    const query = plainToClass(SalePersonFindManyArgs, request.query);
    const results = await this.service.findSalePeople(params.id, {
      ...query,
      select: {
        accountId: {
          select: {
            id: true,
          },
        },

        address: true,
        code: true,
        commissionRate: true,
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        phoneNumber: true,
        photo: true,

        saleTeamId: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async connectSalePeople(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        connect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async updateSalePeople(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        set: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/salePeople")
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "update",
    possession: "any",
  })
  async disconnectSalePeople(
    @common.Param() params: AccountWhereUniqueInput,
    @common.Body() body: SalePersonWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      salePeople: {
        disconnect: body,
      },
    };
    await this.service.updateAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
