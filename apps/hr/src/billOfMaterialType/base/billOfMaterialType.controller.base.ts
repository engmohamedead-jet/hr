/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { BillOfMaterialTypeService } from "../billOfMaterialType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { BillOfMaterialTypeCreateInput } from "./BillOfMaterialTypeCreateInput";
import { BillOfMaterialType } from "./BillOfMaterialType";
import { BillOfMaterialTypeFindManyArgs } from "./BillOfMaterialTypeFindManyArgs";
import { BillOfMaterialTypeWhereUniqueInput } from "./BillOfMaterialTypeWhereUniqueInput";
import { BillOfMaterialTypeUpdateInput } from "./BillOfMaterialTypeUpdateInput";
import { BillOfMaterialFindManyArgs } from "../../billOfMaterial/base/BillOfMaterialFindManyArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { BillOfMaterialWhereUniqueInput } from "../../billOfMaterial/base/BillOfMaterialWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class BillOfMaterialTypeControllerBase {
  constructor(
    protected readonly service: BillOfMaterialTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BillOfMaterialType })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createBillOfMaterialType(
    @common.Body() data: BillOfMaterialTypeCreateInput
  ): Promise<BillOfMaterialType> {
    return await this.service.createBillOfMaterialType({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [BillOfMaterialType] })
  @ApiNestedQuery(BillOfMaterialTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billOfMaterialTypes(
    @common.Req() request: Request
  ): Promise<BillOfMaterialType[]> {
    const args = plainToClass(BillOfMaterialTypeFindManyArgs, request.query);
    return this.service.billOfMaterialTypes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BillOfMaterialType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async billOfMaterialType(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput
  ): Promise<BillOfMaterialType | null> {
    const result = await this.service.billOfMaterialType({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BillOfMaterialType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateBillOfMaterialType(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput,
    @common.Body() data: BillOfMaterialTypeUpdateInput
  ): Promise<BillOfMaterialType | null> {
    try {
      return await this.service.updateBillOfMaterialType({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BillOfMaterialType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteBillOfMaterialType(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput
  ): Promise<BillOfMaterialType | null> {
    try {
      return await this.service.deleteBillOfMaterialType({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterials")
  @ApiNestedQuery(BillOfMaterialFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterials(
    @common.Req() request: Request,
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput
  ): Promise<BillOfMaterial[]> {
    const query = plainToClass(BillOfMaterialFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterials(params.id, {
      ...query,
      select: {
        billOfMaterialTypeId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        daysToPrepareManufacturingOrder: true,
        endDate: true,
        id: true,
        isActive: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,
        startDate: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterials(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        connect: body,
      },
    };
    await this.service.updateBillOfMaterialType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterials(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        set: body,
      },
    };
    await this.service.updateBillOfMaterialType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialType",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterials(
    @common.Param() params: BillOfMaterialTypeWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        disconnect: body,
      },
    };
    await this.service.updateBillOfMaterialType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
