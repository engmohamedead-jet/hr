/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  RoleGroup as PrismaRoleGroup,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class RoleGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RoleGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.roleGroup.count(args);
  }

  async roleGroups(
    args: Prisma.RoleGroupFindManyArgs
  ): Promise<PrismaRoleGroup[]> {
    return this.prisma.roleGroup.findMany(args);
  }
  async roleGroup(
    args: Prisma.RoleGroupFindUniqueArgs
  ): Promise<PrismaRoleGroup | null> {
    return this.prisma.roleGroup.findUnique(args);
  }
  async createRoleGroup(
    args: Prisma.RoleGroupCreateArgs
  ): Promise<PrismaRoleGroup> {
    return this.prisma.roleGroup.create(args);
  }
  async updateRoleGroup(
    args: Prisma.RoleGroupUpdateArgs
  ): Promise<PrismaRoleGroup> {
    return this.prisma.roleGroup.update(args);
  }
  async deleteRoleGroup(
    args: Prisma.RoleGroupDeleteArgs
  ): Promise<PrismaRoleGroup> {
    return this.prisma.roleGroup.delete(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.roleGroup
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
