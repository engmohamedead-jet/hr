/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { VoucherTypeService } from "../voucherType.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { VoucherTypeCreateInput } from "./VoucherTypeCreateInput";
import { VoucherType } from "./VoucherType";
import { VoucherTypeFindManyArgs } from "./VoucherTypeFindManyArgs";
import { VoucherTypeWhereUniqueInput } from "./VoucherTypeWhereUniqueInput";
import { VoucherTypeUpdateInput } from "./VoucherTypeUpdateInput";
import { PaymentVoucherFindManyArgs } from "../../paymentVoucher/base/PaymentVoucherFindManyArgs";
import { PaymentVoucher } from "../../paymentVoucher/base/PaymentVoucher";
import { PaymentVoucherWhereUniqueInput } from "../../paymentVoucher/base/PaymentVoucherWhereUniqueInput";
import { ReceiptVoucherFindManyArgs } from "../../receiptVoucher/base/ReceiptVoucherFindManyArgs";
import { ReceiptVoucher } from "../../receiptVoucher/base/ReceiptVoucher";
import { ReceiptVoucherWhereUniqueInput } from "../../receiptVoucher/base/ReceiptVoucherWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class VoucherTypeControllerBase {
  constructor(
    protected readonly service: VoucherTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VoucherType })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createVoucherType(
    @common.Body() data: VoucherTypeCreateInput
  ): Promise<VoucherType> {
    return await this.service.createVoucherType({
      data: {
        ...data,

        tenantId: data.tenantId
          ? {
              connect: data.tenantId,
            }
          : undefined,
      },
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [VoucherType] })
  @ApiNestedQuery(VoucherTypeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voucherTypes(@common.Req() request: Request): Promise<VoucherType[]> {
    const args = plainToClass(VoucherTypeFindManyArgs, request.query);
    return this.service.voucherTypes({
      ...args,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VoucherType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async voucherType(
    @common.Param() params: VoucherTypeWhereUniqueInput
  ): Promise<VoucherType | null> {
    const result = await this.service.voucherType({
      where: params,
      select: {
        code: true,
        createdAt: true,
        description: true,
        id: true,
        isActive: true,
        name: true,
        normalizedName: true,
        note: true,

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VoucherType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateVoucherType(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() data: VoucherTypeUpdateInput
  ): Promise<VoucherType | null> {
    try {
      return await this.service.updateVoucherType({
        where: params,
        data: {
          ...data,

          tenantId: data.tenantId
            ? {
                connect: data.tenantId,
              }
            : undefined,
        },
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VoucherType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteVoucherType(
    @common.Param() params: VoucherTypeWhereUniqueInput
  ): Promise<VoucherType | null> {
    try {
      return await this.service.deleteVoucherType({
        where: params,
        select: {
          code: true,
          createdAt: true,
          description: true,
          id: true,
          isActive: true,
          name: true,
          normalizedName: true,
          note: true,

          tenantId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/paymentVouchers")
  @ApiNestedQuery(PaymentVoucherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PaymentVoucher",
    action: "read",
    possession: "any",
  })
  async findPaymentVouchers(
    @common.Req() request: Request,
    @common.Param() params: VoucherTypeWhereUniqueInput
  ): Promise<PaymentVoucher[]> {
    const query = plainToClass(PaymentVoucherFindManyArgs, request.query);
    const results = await this.service.findPaymentVouchers(params.id, {
      ...query,
      select: {
        accountTransactionId: {
          select: {
            id: true,
          },
        },

        amount: true,

        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        createdAt: true,

        currency: {
          select: {
            id: true,
          },
        },

        employeeId: {
          select: {
            id: true,
          },
        },

        expenseItemId: {
          select: {
            id: true,
          },
        },

        id: true,
        isActive: true,
        note: true,
        paymentVoucherDate: true,
        statementReference: true,

        supplier: {
          select: {
            id: true,
          },
        },

        tenantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        voucherTypeId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async connectPaymentVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        connect: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async updatePaymentVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        set: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/paymentVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async disconnectPaymentVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: PaymentVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      paymentVouchers: {
        disconnect: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/receiptVouchers")
  @ApiNestedQuery(ReceiptVoucherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ReceiptVoucher",
    action: "read",
    possession: "any",
  })
  async findReceiptVouchers(
    @common.Req() request: Request,
    @common.Param() params: VoucherTypeWhereUniqueInput
  ): Promise<ReceiptVoucher[]> {
    const query = plainToClass(ReceiptVoucherFindManyArgs, request.query);
    const results = await this.service.findReceiptVouchers(params.id, {
      ...query,
      select: {
        accountTransactionId: {
          select: {
            id: true,
          },
        },

        amount: true,

        cashRepositoryId: {
          select: {
            id: true,
          },
        },

        chequeDueDate: true,
        chequeNumber: true,
        chequeValue: true,
        createdAt: true,

        currencyId: {
          select: {
            id: true,
          },
        },

        customerId: {
          select: {
            id: true,
          },
        },

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        isAcive: true,
        note: true,
        receiptVoucherDate: true,
        sequence: true,
        statementReference: true,

        tenant: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        voucherTypeId: {
          select: {
            id: true,
          },
        },

        wasChequePaid: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async connectReceiptVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        connect: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async updateReceiptVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        set: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/receiptVouchers")
  @nestAccessControl.UseRoles({
    resource: "VoucherType",
    action: "update",
    possession: "any",
  })
  async disconnectReceiptVouchers(
    @common.Param() params: VoucherTypeWhereUniqueInput,
    @common.Body() body: ReceiptVoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      receiptVouchers: {
        disconnect: body,
      },
    };
    await this.service.updateVoucherType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
