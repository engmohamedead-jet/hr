/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  InstallmentSaleFee as PrismaInstallmentSaleFee,
  PaymentTerm as PrismaPaymentTerm,
  Account as PrismaAccount,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class InstallmentSaleFeeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InstallmentSaleFeeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.installmentSaleFee.count(args);
  }

  async installmentSaleFees(
    args: Prisma.InstallmentSaleFeeFindManyArgs
  ): Promise<PrismaInstallmentSaleFee[]> {
    return this.prisma.installmentSaleFee.findMany(args);
  }
  async installmentSaleFee(
    args: Prisma.InstallmentSaleFeeFindUniqueArgs
  ): Promise<PrismaInstallmentSaleFee | null> {
    return this.prisma.installmentSaleFee.findUnique(args);
  }
  async createInstallmentSaleFee(
    args: Prisma.InstallmentSaleFeeCreateArgs
  ): Promise<PrismaInstallmentSaleFee> {
    return this.prisma.installmentSaleFee.create(args);
  }
  async updateInstallmentSaleFee(
    args: Prisma.InstallmentSaleFeeUpdateArgs
  ): Promise<PrismaInstallmentSaleFee> {
    return this.prisma.installmentSaleFee.update(args);
  }
  async deleteInstallmentSaleFee(
    args: Prisma.InstallmentSaleFeeDeleteArgs
  ): Promise<PrismaInstallmentSaleFee> {
    return this.prisma.installmentSaleFee.delete(args);
  }

  async findPaymentTerms(
    parentId: string,
    args: Prisma.PaymentTermFindManyArgs
  ): Promise<PrismaPaymentTerm[]> {
    return this.prisma.installmentSaleFee
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .paymentTerms(args);
  }

  async getAccountId(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.installmentSaleFee
      .findUnique({
        where: { id: parentId },
      })
      .accountId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.installmentSaleFee
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
