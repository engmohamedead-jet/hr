/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PeriodicMaintenanceOrder } from "./PeriodicMaintenanceOrder";
import { PeriodicMaintenanceOrderCountArgs } from "./PeriodicMaintenanceOrderCountArgs";
import { PeriodicMaintenanceOrderFindManyArgs } from "./PeriodicMaintenanceOrderFindManyArgs";
import { PeriodicMaintenanceOrderFindUniqueArgs } from "./PeriodicMaintenanceOrderFindUniqueArgs";
import { CreatePeriodicMaintenanceOrderArgs } from "./CreatePeriodicMaintenanceOrderArgs";
import { UpdatePeriodicMaintenanceOrderArgs } from "./UpdatePeriodicMaintenanceOrderArgs";
import { DeletePeriodicMaintenanceOrderArgs } from "./DeletePeriodicMaintenanceOrderArgs";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { CustomerUser } from "../../customerUser/base/CustomerUser";
import { Elevator } from "../../elevator/base/Elevator";
import { Store } from "../../store/base/Store";
import { PeriodicMaintenanceOrderService } from "../periodicMaintenanceOrder.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PeriodicMaintenanceOrder)
export class PeriodicMaintenanceOrderResolverBase {
  constructor(
    protected readonly service: PeriodicMaintenanceOrderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async _periodicMaintenanceOrdersMeta(
    @graphql.Args() args: PeriodicMaintenanceOrderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PeriodicMaintenanceOrder])
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "any",
  })
  async periodicMaintenanceOrders(
    @graphql.Args() args: PeriodicMaintenanceOrderFindManyArgs
  ): Promise<PeriodicMaintenanceOrder[]> {
    return this.service.periodicMaintenanceOrders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PeriodicMaintenanceOrder, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "read",
    possession: "own",
  })
  async periodicMaintenanceOrder(
    @graphql.Args() args: PeriodicMaintenanceOrderFindUniqueArgs
  ): Promise<PeriodicMaintenanceOrder | null> {
    const result = await this.service.periodicMaintenanceOrder(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodicMaintenanceOrder)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "create",
    possession: "any",
  })
  async createPeriodicMaintenanceOrder(
    @graphql.Args() args: CreatePeriodicMaintenanceOrderArgs
  ): Promise<PeriodicMaintenanceOrder> {
    return await this.service.createPeriodicMaintenanceOrder({
      ...args,
      data: {
        ...args.data,

        customerElevator: args.data.customerElevator
          ? {
              connect: args.data.customerElevator,
            }
          : undefined,

        customerUserId: args.data.customerUserId
          ? {
              connect: args.data.customerUserId,
            }
          : undefined,

        elevatorId: args.data.elevatorId
          ? {
              connect: args.data.elevatorId,
            }
          : undefined,

        storeId: {
          connect: args.data.storeId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PeriodicMaintenanceOrder)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "update",
    possession: "any",
  })
  async updatePeriodicMaintenanceOrder(
    @graphql.Args() args: UpdatePeriodicMaintenanceOrderArgs
  ): Promise<PeriodicMaintenanceOrder | null> {
    try {
      return await this.service.updatePeriodicMaintenanceOrder({
        ...args,
        data: {
          ...args.data,

          customerElevator: args.data.customerElevator
            ? {
                connect: args.data.customerElevator,
              }
            : undefined,

          customerUserId: args.data.customerUserId
            ? {
                connect: args.data.customerUserId,
              }
            : undefined,

          elevatorId: args.data.elevatorId
            ? {
                connect: args.data.elevatorId,
              }
            : undefined,

          storeId: {
            connect: args.data.storeId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PeriodicMaintenanceOrder)
  @nestAccessControl.UseRoles({
    resource: "PeriodicMaintenanceOrder",
    action: "delete",
    possession: "any",
  })
  async deletePeriodicMaintenanceOrder(
    @graphql.Args() args: DeletePeriodicMaintenanceOrderArgs
  ): Promise<PeriodicMaintenanceOrder | null> {
    try {
      return await this.service.deletePeriodicMaintenanceOrder(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerElevator, {
    nullable: true,
    name: "customerElevator",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerElevator",
    action: "read",
    possession: "any",
  })
  async getCustomerElevator(
    @graphql.Parent() parent: PeriodicMaintenanceOrder
  ): Promise<CustomerElevator | null> {
    const result = await this.service.getCustomerElevator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerUser, {
    nullable: true,
    name: "customerUserId",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  async getCustomerUserId(
    @graphql.Parent() parent: PeriodicMaintenanceOrder
  ): Promise<CustomerUser | null> {
    const result = await this.service.getCustomerUserId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Elevator, {
    nullable: true,
    name: "elevatorId",
  })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async getElevatorId(
    @graphql.Parent() parent: PeriodicMaintenanceOrder
  ): Promise<Elevator | null> {
    const result = await this.service.getElevatorId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: PeriodicMaintenanceOrder
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
