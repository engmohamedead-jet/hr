/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FailureReporting } from "./FailureReporting";
import { FailureReportingCountArgs } from "./FailureReportingCountArgs";
import { FailureReportingFindManyArgs } from "./FailureReportingFindManyArgs";
import { FailureReportingFindUniqueArgs } from "./FailureReportingFindUniqueArgs";
import { CreateFailureReportingArgs } from "./CreateFailureReportingArgs";
import { UpdateFailureReportingArgs } from "./UpdateFailureReportingArgs";
import { DeleteFailureReportingArgs } from "./DeleteFailureReportingArgs";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { CustomerUser } from "../../customerUser/base/CustomerUser";
import { Elevator } from "../../elevator/base/Elevator";
import { FailureType } from "../../failureType/base/FailureType";
import { Store } from "../../store/base/Store";
import { FailureReportingService } from "../failureReporting.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FailureReporting)
export class FailureReportingResolverBase {
  constructor(
    protected readonly service: FailureReportingService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async _failureReportingsMeta(
    @graphql.Args() args: FailureReportingCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FailureReporting])
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "any",
  })
  async failureReportings(
    @graphql.Args() args: FailureReportingFindManyArgs
  ): Promise<FailureReporting[]> {
    return this.service.failureReportings(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FailureReporting, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "read",
    possession: "own",
  })
  async failureReporting(
    @graphql.Args() args: FailureReportingFindUniqueArgs
  ): Promise<FailureReporting | null> {
    const result = await this.service.failureReporting(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailureReporting)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "create",
    possession: "any",
  })
  async createFailureReporting(
    @graphql.Args() args: CreateFailureReportingArgs
  ): Promise<FailureReporting> {
    return await this.service.createFailureReporting({
      ...args,
      data: {
        ...args.data,

        customerElevatorId: {
          connect: args.data.customerElevatorId,
        },

        customerUser: {
          connect: args.data.customerUser,
        },

        elevator: args.data.elevator
          ? {
              connect: args.data.elevator,
            }
          : undefined,

        failureTypeId: {
          connect: args.data.failureTypeId,
        },

        store: args.data.store
          ? {
              connect: args.data.store,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FailureReporting)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "update",
    possession: "any",
  })
  async updateFailureReporting(
    @graphql.Args() args: UpdateFailureReportingArgs
  ): Promise<FailureReporting | null> {
    try {
      return await this.service.updateFailureReporting({
        ...args,
        data: {
          ...args.data,

          customerElevatorId: {
            connect: args.data.customerElevatorId,
          },

          customerUser: {
            connect: args.data.customerUser,
          },

          elevator: args.data.elevator
            ? {
                connect: args.data.elevator,
              }
            : undefined,

          failureTypeId: {
            connect: args.data.failureTypeId,
          },

          store: args.data.store
            ? {
                connect: args.data.store,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FailureReporting)
  @nestAccessControl.UseRoles({
    resource: "FailureReporting",
    action: "delete",
    possession: "any",
  })
  async deleteFailureReporting(
    @graphql.Args() args: DeleteFailureReportingArgs
  ): Promise<FailureReporting | null> {
    try {
      return await this.service.deleteFailureReporting(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerElevator, {
    nullable: true,
    name: "customerElevatorId",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerElevator",
    action: "read",
    possession: "any",
  })
  async getCustomerElevatorId(
    @graphql.Parent() parent: FailureReporting
  ): Promise<CustomerElevator | null> {
    const result = await this.service.getCustomerElevatorId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerUser, {
    nullable: true,
    name: "customerUser",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerUser",
    action: "read",
    possession: "any",
  })
  async getCustomerUser(
    @graphql.Parent() parent: FailureReporting
  ): Promise<CustomerUser | null> {
    const result = await this.service.getCustomerUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Elevator, {
    nullable: true,
    name: "elevator",
  })
  @nestAccessControl.UseRoles({
    resource: "Elevator",
    action: "read",
    possession: "any",
  })
  async getElevator(
    @graphql.Parent() parent: FailureReporting
  ): Promise<Elevator | null> {
    const result = await this.service.getElevator(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => FailureType, {
    nullable: true,
    name: "failureTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "FailureType",
    action: "read",
    possession: "any",
  })
  async getFailureTypeId(
    @graphql.Parent() parent: FailureReporting
  ): Promise<FailureType | null> {
    const result = await this.service.getFailureTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "store",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStore(
    @graphql.Parent() parent: FailureReporting
  ): Promise<Store | null> {
    const result = await this.service.getStore(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
