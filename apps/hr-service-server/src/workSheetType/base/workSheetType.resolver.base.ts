/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { WorkSheetType } from "./WorkSheetType";
import { WorkSheetTypeCountArgs } from "./WorkSheetTypeCountArgs";
import { WorkSheetTypeFindManyArgs } from "./WorkSheetTypeFindManyArgs";
import { WorkSheetTypeFindUniqueArgs } from "./WorkSheetTypeFindUniqueArgs";
import { CreateWorkSheetTypeArgs } from "./CreateWorkSheetTypeArgs";
import { UpdateWorkSheetTypeArgs } from "./UpdateWorkSheetTypeArgs";
import { DeleteWorkSheetTypeArgs } from "./DeleteWorkSheetTypeArgs";
import { Tenant } from "../../tenant/base/Tenant";
import { WorkSheetTypeService } from "../workSheetType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => WorkSheetType)
export class WorkSheetTypeResolverBase {
  constructor(
    protected readonly service: WorkSheetTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "read",
    possession: "any",
  })
  async _workSheetTypesMeta(
    @graphql.Args() args: WorkSheetTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [WorkSheetType])
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "read",
    possession: "any",
  })
  async workSheetTypes(
    @graphql.Args() args: WorkSheetTypeFindManyArgs
  ): Promise<WorkSheetType[]> {
    return this.service.workSheetTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => WorkSheetType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "read",
    possession: "own",
  })
  async workSheetType(
    @graphql.Args() args: WorkSheetTypeFindUniqueArgs
  ): Promise<WorkSheetType | null> {
    const result = await this.service.workSheetType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkSheetType)
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "create",
    possession: "any",
  })
  async createWorkSheetType(
    @graphql.Args() args: CreateWorkSheetTypeArgs
  ): Promise<WorkSheetType> {
    return await this.service.createWorkSheetType({
      ...args,
      data: {
        ...args.data,

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => WorkSheetType)
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "update",
    possession: "any",
  })
  async updateWorkSheetType(
    @graphql.Args() args: UpdateWorkSheetTypeArgs
  ): Promise<WorkSheetType | null> {
    try {
      return await this.service.updateWorkSheetType({
        ...args,
        data: {
          ...args.data,

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WorkSheetType)
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "delete",
    possession: "any",
  })
  async deleteWorkSheetType(
    @graphql.Args() args: DeleteWorkSheetTypeArgs
  ): Promise<WorkSheetType | null> {
    try {
      return await this.service.deleteWorkSheetType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: WorkSheetType
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
