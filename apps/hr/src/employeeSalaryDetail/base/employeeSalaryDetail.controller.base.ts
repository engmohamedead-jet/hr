/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { EmployeeSalaryDetailService } from "../employeeSalaryDetail.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { EmployeeSalaryDetailCreateInput } from "./EmployeeSalaryDetailCreateInput";
import { EmployeeSalaryDetail } from "./EmployeeSalaryDetail";
import { EmployeeSalaryDetailFindManyArgs } from "./EmployeeSalaryDetailFindManyArgs";
import { EmployeeSalaryDetailWhereUniqueInput } from "./EmployeeSalaryDetailWhereUniqueInput";
import { EmployeeSalaryDetailUpdateInput } from "./EmployeeSalaryDetailUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class EmployeeSalaryDetailControllerBase {
  constructor(
    protected readonly service: EmployeeSalaryDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeSalaryDetail })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createEmployeeSalaryDetail(
    @common.Body() data: EmployeeSalaryDetailCreateInput
  ): Promise<EmployeeSalaryDetail> {
    return await this.service.createEmployeeSalaryDetail({
      data: {
        ...data,

        salaryItemId: {
          connect: data.salaryItemId,
        },
      },
      select: {
        createdAt: true,
        id: true,
        notes: true,

        salaryItemId: {
          select: {
            id: true,
          },
        },

        salaryItemValue: true,
        serial: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeSalaryDetail] })
  @ApiNestedQuery(EmployeeSalaryDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeSalaryDetails(
    @common.Req() request: Request
  ): Promise<EmployeeSalaryDetail[]> {
    const args = plainToClass(EmployeeSalaryDetailFindManyArgs, request.query);
    return this.service.employeeSalaryDetails({
      ...args,
      select: {
        createdAt: true,
        id: true,
        notes: true,

        salaryItemId: {
          select: {
            id: true,
          },
        },

        salaryItemValue: true,
        serial: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalaryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async employeeSalaryDetail(
    @common.Param() params: EmployeeSalaryDetailWhereUniqueInput
  ): Promise<EmployeeSalaryDetail | null> {
    const result = await this.service.employeeSalaryDetail({
      where: params,
      select: {
        createdAt: true,
        id: true,
        notes: true,

        salaryItemId: {
          select: {
            id: true,
          },
        },

        salaryItemValue: true,
        serial: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalaryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateEmployeeSalaryDetail(
    @common.Param() params: EmployeeSalaryDetailWhereUniqueInput,
    @common.Body() data: EmployeeSalaryDetailUpdateInput
  ): Promise<EmployeeSalaryDetail | null> {
    try {
      return await this.service.updateEmployeeSalaryDetail({
        where: params,
        data: {
          ...data,

          salaryItemId: {
            connect: data.salaryItemId,
          },
        },
        select: {
          createdAt: true,
          id: true,
          notes: true,

          salaryItemId: {
            select: {
              id: true,
            },
          },

          salaryItemValue: true,
          serial: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeSalaryDetail })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "EmployeeSalaryDetail",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteEmployeeSalaryDetail(
    @common.Param() params: EmployeeSalaryDetailWhereUniqueInput
  ): Promise<EmployeeSalaryDetail | null> {
    try {
      return await this.service.deleteEmployeeSalaryDetail({
        where: params,
        select: {
          createdAt: true,
          id: true,
          notes: true,

          salaryItemId: {
            select: {
              id: true,
            },
          },

          salaryItemValue: true,
          serial: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
