/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Customer } from "./Customer";
import { CustomerCountArgs } from "./CustomerCountArgs";
import { CustomerFindManyArgs } from "./CustomerFindManyArgs";
import { CustomerFindUniqueArgs } from "./CustomerFindUniqueArgs";
import { CreateCustomerArgs } from "./CreateCustomerArgs";
import { UpdateCustomerArgs } from "./UpdateCustomerArgs";
import { DeleteCustomerArgs } from "./DeleteCustomerArgs";
import { MaintenanceContractFindManyArgs } from "../../maintenanceContract/base/MaintenanceContractFindManyArgs";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { Currency } from "../../currency/base/Currency";
import { CustomerCateogry } from "../../customerCateogry/base/CustomerCateogry";
import { CustomerType } from "../../customerType/base/CustomerType";
import { Rating } from "../../rating/base/Rating";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { Supplier } from "../../supplier/base/Supplier";
import { CustomerService } from "../customer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Customer)
export class CustomerResolverBase {
  constructor(
    protected readonly service: CustomerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async _customersMeta(
    @graphql.Args() args: CustomerCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Customer])
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async customers(
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    return this.service.customers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Customer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "own",
  })
  async customer(
    @graphql.Args() args: CustomerFindUniqueArgs
  ): Promise<Customer | null> {
    const result = await this.service.customer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Customer)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "create",
    possession: "any",
  })
  async createCustomer(
    @graphql.Args() args: CreateCustomerArgs
  ): Promise<Customer> {
    return await this.service.createCustomer({
      ...args,
      data: {
        ...args.data,

        currencyId: args.data.currencyId
          ? {
              connect: args.data.currencyId,
            }
          : undefined,

        customerCateogryId: args.data.customerCateogryId
          ? {
              connect: args.data.customerCateogryId,
            }
          : undefined,

        customerTypeId: args.data.customerTypeId
          ? {
              connect: args.data.customerTypeId,
            }
          : undefined,

        guarantorRatingId: args.data.guarantorRatingId
          ? {
              connect: args.data.guarantorRatingId,
            }
          : undefined,

        rating: args.data.rating
          ? {
              connect: args.data.rating,
            }
          : undefined,

        salePriceTypeId: args.data.salePriceTypeId
          ? {
              connect: args.data.salePriceTypeId,
            }
          : undefined,

        supplierId: args.data.supplierId
          ? {
              connect: args.data.supplierId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Customer)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "update",
    possession: "any",
  })
  async updateCustomer(
    @graphql.Args() args: UpdateCustomerArgs
  ): Promise<Customer | null> {
    try {
      return await this.service.updateCustomer({
        ...args,
        data: {
          ...args.data,

          currencyId: args.data.currencyId
            ? {
                connect: args.data.currencyId,
              }
            : undefined,

          customerCateogryId: args.data.customerCateogryId
            ? {
                connect: args.data.customerCateogryId,
              }
            : undefined,

          customerTypeId: args.data.customerTypeId
            ? {
                connect: args.data.customerTypeId,
              }
            : undefined,

          guarantorRatingId: args.data.guarantorRatingId
            ? {
                connect: args.data.guarantorRatingId,
              }
            : undefined,

          rating: args.data.rating
            ? {
                connect: args.data.rating,
              }
            : undefined,

          salePriceTypeId: args.data.salePriceTypeId
            ? {
                connect: args.data.salePriceTypeId,
              }
            : undefined,

          supplierId: args.data.supplierId
            ? {
                connect: args.data.supplierId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Customer)
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "delete",
    possession: "any",
  })
  async deleteCustomer(
    @graphql.Args() args: DeleteCustomerArgs
  ): Promise<Customer | null> {
    try {
      return await this.service.deleteCustomer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [MaintenanceContract], {
    name: "maintenanceContracts",
  })
  @nestAccessControl.UseRoles({
    resource: "MaintenanceContract",
    action: "read",
    possession: "any",
  })
  async findMaintenanceContracts(
    @graphql.Parent() parent: Customer,
    @graphql.Args() args: MaintenanceContractFindManyArgs
  ): Promise<MaintenanceContract[]> {
    const results = await this.service.findMaintenanceContracts(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Currency, {
    nullable: true,
    name: "currencyId",
  })
  @nestAccessControl.UseRoles({
    resource: "Currency",
    action: "read",
    possession: "any",
  })
  async getCurrencyId(
    @graphql.Parent() parent: Customer
  ): Promise<Currency | null> {
    const result = await this.service.getCurrencyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerCateogry, {
    nullable: true,
    name: "customerCateogryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerCateogry",
    action: "read",
    possession: "any",
  })
  async getCustomerCateogryId(
    @graphql.Parent() parent: Customer
  ): Promise<CustomerCateogry | null> {
    const result = await this.service.getCustomerCateogryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CustomerType, {
    nullable: true,
    name: "customerTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "CustomerType",
    action: "read",
    possession: "any",
  })
  async getCustomerTypeId(
    @graphql.Parent() parent: Customer
  ): Promise<CustomerType | null> {
    const result = await this.service.getCustomerTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Rating, {
    nullable: true,
    name: "guarantorRatingId",
  })
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async getGuarantorRatingId(
    @graphql.Parent() parent: Customer
  ): Promise<Rating | null> {
    const result = await this.service.getGuarantorRatingId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Rating, {
    nullable: true,
    name: "rating",
  })
  @nestAccessControl.UseRoles({
    resource: "Rating",
    action: "read",
    possession: "any",
  })
  async getRating(@graphql.Parent() parent: Customer): Promise<Rating | null> {
    const result = await this.service.getRating(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalePriceType, {
    nullable: true,
    name: "salePriceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async getSalePriceTypeId(
    @graphql.Parent() parent: Customer
  ): Promise<SalePriceType | null> {
    const result = await this.service.getSalePriceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Supplier, {
    nullable: true,
    name: "supplierId",
  })
  @nestAccessControl.UseRoles({
    resource: "Supplier",
    action: "read",
    possession: "any",
  })
  async getSupplierId(
    @graphql.Parent() parent: Customer
  ): Promise<Supplier | null> {
    const result = await this.service.getSupplierId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
