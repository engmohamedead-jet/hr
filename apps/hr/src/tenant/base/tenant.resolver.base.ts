/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tenant } from "./Tenant";
import { TenantCountArgs } from "./TenantCountArgs";
import { TenantFindManyArgs } from "./TenantFindManyArgs";
import { TenantFindUniqueArgs } from "./TenantFindUniqueArgs";
import { CreateTenantArgs } from "./CreateTenantArgs";
import { UpdateTenantArgs } from "./UpdateTenantArgs";
import { DeleteTenantArgs } from "./DeleteTenantArgs";
import { AttendanceFindManyArgs } from "../../attendance/base/AttendanceFindManyArgs";
import { Attendance } from "../../attendance/base/Attendance";
import { BonusRequestFindManyArgs } from "../../bonusRequest/base/BonusRequestFindManyArgs";
import { BonusRequest } from "../../bonusRequest/base/BonusRequest";
import { CheckInOutFindManyArgs } from "../../checkInOut/base/CheckInOutFindManyArgs";
import { CheckInOut } from "../../checkInOut/base/CheckInOut";
import { DailyMovementRequestFindManyArgs } from "../../dailyMovementRequest/base/DailyMovementRequestFindManyArgs";
import { DailyMovementRequest } from "../../dailyMovementRequest/base/DailyMovementRequest";
import { DayOffRequestFindManyArgs } from "../../dayOffRequest/base/DayOffRequestFindManyArgs";
import { DayOffRequest } from "../../dayOffRequest/base/DayOffRequest";
import { EmployeeDepartmentFindManyArgs } from "../../employeeDepartment/base/EmployeeDepartmentFindManyArgs";
import { EmployeeDepartment } from "../../employeeDepartment/base/EmployeeDepartment";
import { EmployeeGroupFindManyArgs } from "../../employeeGroup/base/EmployeeGroupFindManyArgs";
import { EmployeeGroup } from "../../employeeGroup/base/EmployeeGroup";
import { EmployeeRoleFindManyArgs } from "../../employeeRole/base/EmployeeRoleFindManyArgs";
import { EmployeeRole } from "../../employeeRole/base/EmployeeRole";
import { EmployeeFindManyArgs } from "../../employee/base/EmployeeFindManyArgs";
import { Employee } from "../../employee/base/Employee";
import { MachineFindManyArgs } from "../../machine/base/MachineFindManyArgs";
import { Machine } from "../../machine/base/Machine";
import { FiscalMonthFindManyArgs } from "../../fiscalMonth/base/FiscalMonthFindManyArgs";
import { FiscalMonth } from "../../fiscalMonth/base/FiscalMonth";
import { JobTitleFindManyArgs } from "../../jobTitle/base/JobTitleFindManyArgs";
import { JobTitle } from "../../jobTitle/base/JobTitle";
import { LeaveRequestTypeFindManyArgs } from "../../leaveRequestType/base/LeaveRequestTypeFindManyArgs";
import { LeaveRequestType } from "../../leaveRequestType/base/LeaveRequestType";
import { LeaveRequestFindManyArgs } from "../../leaveRequest/base/LeaveRequestFindManyArgs";
import { LeaveRequest } from "../../leaveRequest/base/LeaveRequest";
import { OverNightRequestFindManyArgs } from "../../overNightRequest/base/OverNightRequestFindManyArgs";
import { OverNightRequest } from "../../overNightRequest/base/OverNightRequest";
import { ScrapReasonFindManyArgs } from "../../scrapReason/base/ScrapReasonFindManyArgs";
import { ScrapReason } from "../../scrapReason/base/ScrapReason";
import { TradingSummaryFindManyArgs } from "../../tradingSummary/base/TradingSummaryFindManyArgs";
import { TradingSummary } from "../../tradingSummary/base/TradingSummary";
import { WorkCenterAlternativeFindManyArgs } from "../../workCenterAlternative/base/WorkCenterAlternativeFindManyArgs";
import { WorkCenterAlternative } from "../../workCenterAlternative/base/WorkCenterAlternative";
import { WorkCenterCapacityFindManyArgs } from "../../workCenterCapacity/base/WorkCenterCapacityFindManyArgs";
import { WorkCenterCapacity } from "../../workCenterCapacity/base/WorkCenterCapacity";
import { WorkCenterProductivityFindManyArgs } from "../../workCenterProductivity/base/WorkCenterProductivityFindManyArgs";
import { WorkCenterProductivity } from "../../workCenterProductivity/base/WorkCenterProductivity";
import { WorkCenterProductivityLossTypeFindManyArgs } from "../../workCenterProductivityLossType/base/WorkCenterProductivityLossTypeFindManyArgs";
import { WorkCenterProductivityLossType } from "../../workCenterProductivityLossType/base/WorkCenterProductivityLossType";
import { WorkCenterProductivityLossFindManyArgs } from "../../workCenterProductivityLoss/base/WorkCenterProductivityLossFindManyArgs";
import { WorkCenterProductivityLoss } from "../../workCenterProductivityLoss/base/WorkCenterProductivityLoss";
import { WorkCenterRoutingFindManyArgs } from "../../workCenterRouting/base/WorkCenterRoutingFindManyArgs";
import { WorkCenterRouting } from "../../workCenterRouting/base/WorkCenterRouting";
import { WorkCenterTagFindManyArgs } from "../../workCenterTag/base/WorkCenterTagFindManyArgs";
import { WorkCenterTag } from "../../workCenterTag/base/WorkCenterTag";
import { WorkCenterWorkCenterTagFindManyArgs } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTagFindManyArgs";
import { WorkCenterWorkCenterTag } from "../../workCenterWorkCenterTag/base/WorkCenterWorkCenterTag";
import { WorkCenterFindManyArgs } from "../../workCenter/base/WorkCenterFindManyArgs";
import { WorkCenter } from "../../workCenter/base/WorkCenter";
import { WorkOrderDependencyFindManyArgs } from "../../workOrderDependency/base/WorkOrderDependencyFindManyArgs";
import { WorkOrderDependency } from "../../workOrderDependency/base/WorkOrderDependency";
import { WorkOrderRoutingFindManyArgs } from "../../workOrderRouting/base/WorkOrderRoutingFindManyArgs";
import { WorkOrderRouting } from "../../workOrderRouting/base/WorkOrderRouting";
import { WorkOrderStatusFindManyArgs } from "../../workOrderStatus/base/WorkOrderStatusFindManyArgs";
import { WorkOrderStatus } from "../../workOrderStatus/base/WorkOrderStatus";
import { WorkOrderFindManyArgs } from "../../workOrder/base/WorkOrderFindManyArgs";
import { WorkOrder } from "../../workOrder/base/WorkOrder";
import { WorkSheetTypeFindManyArgs } from "../../workSheetType/base/WorkSheetTypeFindManyArgs";
import { WorkSheetType } from "../../workSheetType/base/WorkSheetType";
import { TenantService } from "../tenant.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tenant)
export class TenantResolverBase {
  constructor(
    protected readonly service: TenantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async _tenantsMeta(
    @graphql.Args() args: TenantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tenant])
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async tenants(@graphql.Args() args: TenantFindManyArgs): Promise<Tenant[]> {
    return this.service.tenants(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tenant, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "own",
  })
  async tenant(
    @graphql.Args() args: TenantFindUniqueArgs
  ): Promise<Tenant | null> {
    const result = await this.service.tenant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "create",
    possession: "any",
  })
  async createTenant(@graphql.Args() args: CreateTenantArgs): Promise<Tenant> {
    return await this.service.createTenant({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "update",
    possession: "any",
  })
  async updateTenant(
    @graphql.Args() args: UpdateTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.updateTenant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tenant)
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "delete",
    possession: "any",
  })
  async deleteTenant(
    @graphql.Args() args: DeleteTenantArgs
  ): Promise<Tenant | null> {
    try {
      return await this.service.deleteTenant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Attendance], { name: "attendances" })
  @nestAccessControl.UseRoles({
    resource: "Attendance",
    action: "read",
    possession: "any",
  })
  async findAttendances(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: AttendanceFindManyArgs
  ): Promise<Attendance[]> {
    const results = await this.service.findAttendances(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [BonusRequest], { name: "bonusRequests" })
  @nestAccessControl.UseRoles({
    resource: "BonusRequest",
    action: "read",
    possession: "any",
  })
  async findBonusRequests(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: BonusRequestFindManyArgs
  ): Promise<BonusRequest[]> {
    const results = await this.service.findBonusRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [CheckInOut], { name: "checkInOuts" })
  @nestAccessControl.UseRoles({
    resource: "CheckInOut",
    action: "read",
    possession: "any",
  })
  async findCheckInOuts(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: CheckInOutFindManyArgs
  ): Promise<CheckInOut[]> {
    const results = await this.service.findCheckInOuts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DailyMovementRequest], {
    name: "dailyMovements",
  })
  @nestAccessControl.UseRoles({
    resource: "DailyMovementRequest",
    action: "read",
    possession: "any",
  })
  async findDailyMovements(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: DailyMovementRequestFindManyArgs
  ): Promise<DailyMovementRequest[]> {
    const results = await this.service.findDailyMovements(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [DayOffRequest], { name: "dayOffs" })
  @nestAccessControl.UseRoles({
    resource: "DayOffRequest",
    action: "read",
    possession: "any",
  })
  async findDayOffs(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: DayOffRequestFindManyArgs
  ): Promise<DayOffRequest[]> {
    const results = await this.service.findDayOffs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeDepartment], {
    name: "employeeDepartments",
  })
  @nestAccessControl.UseRoles({
    resource: "EmployeeDepartment",
    action: "read",
    possession: "any",
  })
  async findEmployeeDepartments(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeDepartmentFindManyArgs
  ): Promise<EmployeeDepartment[]> {
    const results = await this.service.findEmployeeDepartments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeGroup], { name: "employeeGroups" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeGroup",
    action: "read",
    possession: "any",
  })
  async findEmployeeGroups(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeGroupFindManyArgs
  ): Promise<EmployeeGroup[]> {
    const results = await this.service.findEmployeeGroups(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [EmployeeRole], { name: "employeeRoles" })
  @nestAccessControl.UseRoles({
    resource: "EmployeeRole",
    action: "read",
    possession: "any",
  })
  async findEmployeeRoles(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeRoleFindManyArgs
  ): Promise<EmployeeRole[]> {
    const results = await this.service.findEmployeeRoles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Employee], { name: "employees" })
  @nestAccessControl.UseRoles({
    resource: "Employee",
    action: "read",
    possession: "any",
  })
  async findEmployees(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: EmployeeFindManyArgs
  ): Promise<Employee[]> {
    const results = await this.service.findEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Machine], { name: "fingerprintMachines" })
  @nestAccessControl.UseRoles({
    resource: "Machine",
    action: "read",
    possession: "any",
  })
  async findFingerprintMachines(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: MachineFindManyArgs
  ): Promise<Machine[]> {
    const results = await this.service.findFingerprintMachines(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [FiscalMonth], { name: "fiscalMonths" })
  @nestAccessControl.UseRoles({
    resource: "FiscalMonth",
    action: "read",
    possession: "any",
  })
  async findFiscalMonths(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: FiscalMonthFindManyArgs
  ): Promise<FiscalMonth[]> {
    const results = await this.service.findFiscalMonths(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [JobTitle], { name: "jobTitles" })
  @nestAccessControl.UseRoles({
    resource: "JobTitle",
    action: "read",
    possession: "any",
  })
  async findJobTitles(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: JobTitleFindManyArgs
  ): Promise<JobTitle[]> {
    const results = await this.service.findJobTitles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LeaveRequestType], { name: "leaveRequestTypes" })
  @nestAccessControl.UseRoles({
    resource: "LeaveRequestType",
    action: "read",
    possession: "any",
  })
  async findLeaveRequestTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: LeaveRequestTypeFindManyArgs
  ): Promise<LeaveRequestType[]> {
    const results = await this.service.findLeaveRequestTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [LeaveRequest], { name: "leaveRequests" })
  @nestAccessControl.UseRoles({
    resource: "LeaveRequest",
    action: "read",
    possession: "any",
  })
  async findLeaveRequests(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: LeaveRequestFindManyArgs
  ): Promise<LeaveRequest[]> {
    const results = await this.service.findLeaveRequests(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [OverNightRequest], { name: "overNights" })
  @nestAccessControl.UseRoles({
    resource: "OverNightRequest",
    action: "read",
    possession: "any",
  })
  async findOverNights(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: OverNightRequestFindManyArgs
  ): Promise<OverNightRequest[]> {
    const results = await this.service.findOverNights(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ScrapReason], { name: "scrapReasons" })
  @nestAccessControl.UseRoles({
    resource: "ScrapReason",
    action: "read",
    possession: "any",
  })
  async findScrapReasons(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: ScrapReasonFindManyArgs
  ): Promise<ScrapReason[]> {
    const results = await this.service.findScrapReasons(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [TradingSummary], { name: "tradingSummaries" })
  @nestAccessControl.UseRoles({
    resource: "TradingSummary",
    action: "read",
    possession: "any",
  })
  async findTradingSummaries(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: TradingSummaryFindManyArgs
  ): Promise<TradingSummary[]> {
    const results = await this.service.findTradingSummaries(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterAlternative], {
    name: "workCenterAlternatives",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterAlternative",
    action: "read",
    possession: "any",
  })
  async findWorkCenterAlternatives(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterAlternativeFindManyArgs
  ): Promise<WorkCenterAlternative[]> {
    const results = await this.service.findWorkCenterAlternatives(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterCapacity], {
    name: "workCenterCapacities",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterCapacity",
    action: "read",
    possession: "any",
  })
  async findWorkCenterCapacities(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterCapacityFindManyArgs
  ): Promise<WorkCenterCapacity[]> {
    const results = await this.service.findWorkCenterCapacities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterProductivity], {
    name: "workCenterProductivities",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivity",
    action: "read",
    possession: "any",
  })
  async findWorkCenterProductivities(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterProductivityFindManyArgs
  ): Promise<WorkCenterProductivity[]> {
    const results = await this.service.findWorkCenterProductivities(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterProductivityLossType], {
    name: "workCenterProductivityLossTypes",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLossType",
    action: "read",
    possession: "any",
  })
  async findWorkCenterProductivityLossTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterProductivityLossTypeFindManyArgs
  ): Promise<WorkCenterProductivityLossType[]> {
    const results = await this.service.findWorkCenterProductivityLossTypes(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterProductivityLoss], {
    name: "workCenterProductivityLosses",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterProductivityLoss",
    action: "read",
    possession: "any",
  })
  async findWorkCenterProductivityLosses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterProductivityLossFindManyArgs
  ): Promise<WorkCenterProductivityLoss[]> {
    const results = await this.service.findWorkCenterProductivityLosses(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterRouting], {
    name: "workCenterRoutings",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterRouting",
    action: "read",
    possession: "any",
  })
  async findWorkCenterRoutings(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterRoutingFindManyArgs
  ): Promise<WorkCenterRouting[]> {
    const results = await this.service.findWorkCenterRoutings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterTag], { name: "workCenterTags" })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterTag",
    action: "read",
    possession: "any",
  })
  async findWorkCenterTags(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterTagFindManyArgs
  ): Promise<WorkCenterTag[]> {
    const results = await this.service.findWorkCenterTags(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenterWorkCenterTag], {
    name: "workCenterWorkCenterTags",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkCenterWorkCenterTag",
    action: "read",
    possession: "any",
  })
  async findWorkCenterWorkCenterTags(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterWorkCenterTagFindManyArgs
  ): Promise<WorkCenterWorkCenterTag[]> {
    const results = await this.service.findWorkCenterWorkCenterTags(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkCenter], { name: "workCenters" })
  @nestAccessControl.UseRoles({
    resource: "WorkCenter",
    action: "read",
    possession: "any",
  })
  async findWorkCenters(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkCenterFindManyArgs
  ): Promise<WorkCenter[]> {
    const results = await this.service.findWorkCenters(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderDependency], {
    name: "workOrderDependencies",
  })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderDependency",
    action: "read",
    possession: "any",
  })
  async findWorkOrderDependencies(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkOrderDependencyFindManyArgs
  ): Promise<WorkOrderDependency[]> {
    const results = await this.service.findWorkOrderDependencies(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderRouting], { name: "workOrderRoutings" })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderRouting",
    action: "read",
    possession: "any",
  })
  async findWorkOrderRoutings(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkOrderRoutingFindManyArgs
  ): Promise<WorkOrderRouting[]> {
    const results = await this.service.findWorkOrderRoutings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrderStatus], { name: "workOrderStatuses" })
  @nestAccessControl.UseRoles({
    resource: "WorkOrderStatus",
    action: "read",
    possession: "any",
  })
  async findWorkOrderStatuses(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkOrderStatusFindManyArgs
  ): Promise<WorkOrderStatus[]> {
    const results = await this.service.findWorkOrderStatuses(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkOrder], { name: "workOrders" })
  @nestAccessControl.UseRoles({
    resource: "WorkOrder",
    action: "read",
    possession: "any",
  })
  async findWorkOrders(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkOrderFindManyArgs
  ): Promise<WorkOrder[]> {
    const results = await this.service.findWorkOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [WorkSheetType], { name: "workSheetTypes" })
  @nestAccessControl.UseRoles({
    resource: "WorkSheetType",
    action: "read",
    possession: "any",
  })
  async findWorkSheetTypes(
    @graphql.Parent() parent: Tenant,
    @graphql.Args() args: WorkSheetTypeFindManyArgs
  ): Promise<WorkSheetType[]> {
    const results = await this.service.findWorkSheetTypes(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
