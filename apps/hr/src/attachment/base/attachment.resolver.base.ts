/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Attachment } from "./Attachment";
import { AttachmentCountArgs } from "./AttachmentCountArgs";
import { AttachmentFindManyArgs } from "./AttachmentFindManyArgs";
import { AttachmentFindUniqueArgs } from "./AttachmentFindUniqueArgs";
import { CreateAttachmentArgs } from "./CreateAttachmentArgs";
import { UpdateAttachmentArgs } from "./UpdateAttachmentArgs";
import { DeleteAttachmentArgs } from "./DeleteAttachmentArgs";
import { AttachmentService } from "../attachment.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Attachment)
export class AttachmentResolverBase {
  constructor(
    protected readonly service: AttachmentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "read",
    possession: "any",
  })
  async _attachmentsMeta(
    @graphql.Args() args: AttachmentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Attachment])
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "read",
    possession: "any",
  })
  async attachments(
    @graphql.Args() args: AttachmentFindManyArgs
  ): Promise<Attachment[]> {
    return this.service.attachments(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Attachment, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "read",
    possession: "own",
  })
  async attachment(
    @graphql.Args() args: AttachmentFindUniqueArgs
  ): Promise<Attachment | null> {
    const result = await this.service.attachment(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attachment)
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "create",
    possession: "any",
  })
  async createAttachment(
    @graphql.Args() args: CreateAttachmentArgs
  ): Promise<Attachment> {
    return await this.service.createAttachment({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Attachment)
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "update",
    possession: "any",
  })
  async updateAttachment(
    @graphql.Args() args: UpdateAttachmentArgs
  ): Promise<Attachment | null> {
    try {
      return await this.service.updateAttachment({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Attachment)
  @nestAccessControl.UseRoles({
    resource: "Attachment",
    action: "delete",
    possession: "any",
  })
  async deleteAttachment(
    @graphql.Args() args: DeleteAttachmentArgs
  ): Promise<Attachment | null> {
    try {
      return await this.service.deleteAttachment(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
