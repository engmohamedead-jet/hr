/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccountTransactionDetail } from "./AccountTransactionDetail";
import { AccountTransactionDetailCountArgs } from "./AccountTransactionDetailCountArgs";
import { AccountTransactionDetailFindManyArgs } from "./AccountTransactionDetailFindManyArgs";
import { AccountTransactionDetailFindUniqueArgs } from "./AccountTransactionDetailFindUniqueArgs";
import { CreateAccountTransactionDetailArgs } from "./CreateAccountTransactionDetailArgs";
import { UpdateAccountTransactionDetailArgs } from "./UpdateAccountTransactionDetailArgs";
import { DeleteAccountTransactionDetailArgs } from "./DeleteAccountTransactionDetailArgs";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";
import { Store } from "../../store/base/Store";
import { TransactionType } from "../../transactionType/base/TransactionType";
import { AccountTransactionDetailService } from "../accountTransactionDetail.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccountTransactionDetail)
export class AccountTransactionDetailResolverBase {
  constructor(
    protected readonly service: AccountTransactionDetailService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "any",
  })
  async _accountTransactionDetailsMeta(
    @graphql.Args() args: AccountTransactionDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountTransactionDetail])
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "any",
  })
  async accountTransactionDetails(
    @graphql.Args() args: AccountTransactionDetailFindManyArgs
  ): Promise<AccountTransactionDetail[]> {
    return this.service.accountTransactionDetails(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountTransactionDetail, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "own",
  })
  async accountTransactionDetail(
    @graphql.Args() args: AccountTransactionDetailFindUniqueArgs
  ): Promise<AccountTransactionDetail | null> {
    const result = await this.service.accountTransactionDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "create",
    possession: "any",
  })
  async createAccountTransactionDetail(
    @graphql.Args() args: CreateAccountTransactionDetailArgs
  ): Promise<AccountTransactionDetail> {
    return await this.service.createAccountTransactionDetail({
      ...args,
      data: {
        ...args.data,

        accountTransactionId: {
          connect: args.data.accountTransactionId,
        },

        storeId: {
          connect: args.data.storeId,
        },

        transactionTypeId: {
          connect: args.data.transactionTypeId,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "update",
    possession: "any",
  })
  async updateAccountTransactionDetail(
    @graphql.Args() args: UpdateAccountTransactionDetailArgs
  ): Promise<AccountTransactionDetail | null> {
    try {
      return await this.service.updateAccountTransactionDetail({
        ...args,
        data: {
          ...args.data,

          accountTransactionId: {
            connect: args.data.accountTransactionId,
          },

          storeId: {
            connect: args.data.storeId,
          },

          transactionTypeId: {
            connect: args.data.transactionTypeId,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountTransactionDetail)
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "delete",
    possession: "any",
  })
  async deleteAccountTransactionDetail(
    @graphql.Args() args: DeleteAccountTransactionDetailArgs
  ): Promise<AccountTransactionDetail | null> {
    try {
      return await this.service.deleteAccountTransactionDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => AccountTransaction, {
    nullable: true,
    name: "accountTransactionId",
  })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  async getAccountTransactionId(
    @graphql.Parent() parent: AccountTransactionDetail
  ): Promise<AccountTransaction | null> {
    const result = await this.service.getAccountTransactionId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: AccountTransactionDetail
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => TransactionType, {
    nullable: true,
    name: "transactionTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "TransactionType",
    action: "read",
    possession: "any",
  })
  async getTransactionTypeId(
    @graphql.Parent() parent: AccountTransactionDetail
  ): Promise<TransactionType | null> {
    const result = await this.service.getTransactionTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
