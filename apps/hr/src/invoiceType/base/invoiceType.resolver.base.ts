/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { InvoiceType } from "./InvoiceType";
import { InvoiceTypeCountArgs } from "./InvoiceTypeCountArgs";
import { InvoiceTypeFindManyArgs } from "./InvoiceTypeFindManyArgs";
import { InvoiceTypeFindUniqueArgs } from "./InvoiceTypeFindUniqueArgs";
import { CreateInvoiceTypeArgs } from "./CreateInvoiceTypeArgs";
import { UpdateInvoiceTypeArgs } from "./UpdateInvoiceTypeArgs";
import { DeleteInvoiceTypeArgs } from "./DeleteInvoiceTypeArgs";
import { InvoiceTypeService } from "../invoiceType.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => InvoiceType)
export class InvoiceTypeResolverBase {
  constructor(
    protected readonly service: InvoiceTypeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async _invoiceTypesMeta(
    @graphql.Args() args: InvoiceTypeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [InvoiceType])
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async invoiceTypes(
    @graphql.Args() args: InvoiceTypeFindManyArgs
  ): Promise<InvoiceType[]> {
    return this.service.invoiceTypes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => InvoiceType, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "own",
  })
  async invoiceType(
    @graphql.Args() args: InvoiceTypeFindUniqueArgs
  ): Promise<InvoiceType | null> {
    const result = await this.service.invoiceType(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvoiceType)
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "create",
    possession: "any",
  })
  async createInvoiceType(
    @graphql.Args() args: CreateInvoiceTypeArgs
  ): Promise<InvoiceType> {
    return await this.service.createInvoiceType({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => InvoiceType)
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "update",
    possession: "any",
  })
  async updateInvoiceType(
    @graphql.Args() args: UpdateInvoiceTypeArgs
  ): Promise<InvoiceType | null> {
    try {
      return await this.service.updateInvoiceType({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvoiceType)
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "delete",
    possession: "any",
  })
  async deleteInvoiceType(
    @graphql.Args() args: DeleteInvoiceTypeArgs
  ): Promise<InvoiceType | null> {
    try {
      return await this.service.deleteInvoiceType(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
