/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TimeoffType as PrismaTimeoffType,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class TimeoffTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TimeoffTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.timeoffType.count(args);
  }

  async timeoffTypes(
    args: Prisma.TimeoffTypeFindManyArgs
  ): Promise<PrismaTimeoffType[]> {
    return this.prisma.timeoffType.findMany(args);
  }
  async timeoffType(
    args: Prisma.TimeoffTypeFindUniqueArgs
  ): Promise<PrismaTimeoffType | null> {
    return this.prisma.timeoffType.findUnique(args);
  }
  async createTimeoffType(
    args: Prisma.TimeoffTypeCreateArgs
  ): Promise<PrismaTimeoffType> {
    return this.prisma.timeoffType.create(args);
  }
  async updateTimeoffType(
    args: Prisma.TimeoffTypeUpdateArgs
  ): Promise<PrismaTimeoffType> {
    return this.prisma.timeoffType.update(args);
  }
  async deleteTimeoffType(
    args: Prisma.TimeoffTypeDeleteArgs
  ): Promise<PrismaTimeoffType> {
    return this.prisma.timeoffType.delete(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.timeoffType
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
