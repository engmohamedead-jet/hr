/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  EmployeeDepartment as PrismaEmployeeDepartment,
  Employee as PrismaEmployee,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class EmployeeDepartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EmployeeDepartmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.employeeDepartment.count(args);
  }

  async employeeDepartments(
    args: Prisma.EmployeeDepartmentFindManyArgs
  ): Promise<PrismaEmployeeDepartment[]> {
    return this.prisma.employeeDepartment.findMany(args);
  }
  async employeeDepartment(
    args: Prisma.EmployeeDepartmentFindUniqueArgs
  ): Promise<PrismaEmployeeDepartment | null> {
    return this.prisma.employeeDepartment.findUnique(args);
  }
  async createEmployeeDepartment(
    args: Prisma.EmployeeDepartmentCreateArgs
  ): Promise<PrismaEmployeeDepartment> {
    return this.prisma.employeeDepartment.create(args);
  }
  async updateEmployeeDepartment(
    args: Prisma.EmployeeDepartmentUpdateArgs
  ): Promise<PrismaEmployeeDepartment> {
    return this.prisma.employeeDepartment.update(args);
  }
  async deleteEmployeeDepartment(
    args: Prisma.EmployeeDepartmentDeleteArgs
  ): Promise<PrismaEmployeeDepartment> {
    return this.prisma.employeeDepartment.delete(args);
  }

  async findEmployeeDepartments(
    parentId: string,
    args: Prisma.EmployeeDepartmentFindManyArgs
  ): Promise<PrismaEmployeeDepartment[]> {
    return this.prisma.employeeDepartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employeeDepartments(args);
  }

  async findEmployees(
    parentId: string,
    args: Prisma.EmployeeFindManyArgs
  ): Promise<PrismaEmployee[]> {
    return this.prisma.employeeDepartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .employees(args);
  }

  async getParentEmployeeDepartmentId(
    parentId: string
  ): Promise<PrismaEmployeeDepartment | null> {
    return this.prisma.employeeDepartment
      .findUnique({
        where: { id: parentId },
      })
      .parentEmployeeDepartmentId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.employeeDepartment
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
