/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ElevatorStatus as PrismaElevatorStatus } from "@prisma/client";

export class ElevatorStatusServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ElevatorStatusCountArgs, "select">
  ): Promise<number> {
    return this.prisma.elevatorStatus.count(args);
  }

  async elevatorStatuses(
    args: Prisma.ElevatorStatusFindManyArgs
  ): Promise<PrismaElevatorStatus[]> {
    return this.prisma.elevatorStatus.findMany(args);
  }
  async elevatorStatus(
    args: Prisma.ElevatorStatusFindUniqueArgs
  ): Promise<PrismaElevatorStatus | null> {
    return this.prisma.elevatorStatus.findUnique(args);
  }
  async createElevatorStatus(
    args: Prisma.ElevatorStatusCreateArgs
  ): Promise<PrismaElevatorStatus> {
    return this.prisma.elevatorStatus.create(args);
  }
  async updateElevatorStatus(
    args: Prisma.ElevatorStatusUpdateArgs
  ): Promise<PrismaElevatorStatus> {
    return this.prisma.elevatorStatus.update(args);
  }
  async deleteElevatorStatus(
    args: Prisma.ElevatorStatusDeleteArgs
  ): Promise<PrismaElevatorStatus> {
    return this.prisma.elevatorStatus.delete(args);
  }
}
