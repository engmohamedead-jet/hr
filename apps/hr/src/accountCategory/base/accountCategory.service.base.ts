/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AccountCategory as PrismaAccountCategory,
  Account as PrismaAccount,
} from "@prisma/client";

export class AccountCategoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountCategoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountCategory.count(args);
  }

  async accountCategories(
    args: Prisma.AccountCategoryFindManyArgs
  ): Promise<PrismaAccountCategory[]> {
    return this.prisma.accountCategory.findMany(args);
  }
  async accountCategory(
    args: Prisma.AccountCategoryFindUniqueArgs
  ): Promise<PrismaAccountCategory | null> {
    return this.prisma.accountCategory.findUnique(args);
  }
  async createAccountCategory(
    args: Prisma.AccountCategoryCreateArgs
  ): Promise<PrismaAccountCategory> {
    return this.prisma.accountCategory.create(args);
  }
  async updateAccountCategory(
    args: Prisma.AccountCategoryUpdateArgs
  ): Promise<PrismaAccountCategory> {
    return this.prisma.accountCategory.update(args);
  }
  async deleteAccountCategory(
    args: Prisma.AccountCategoryDeleteArgs
  ): Promise<PrismaAccountCategory> {
    return this.prisma.accountCategory.delete(args);
  }

  async findAccounts(
    parentId: string,
    args: Prisma.AccountFindManyArgs
  ): Promise<PrismaAccount[]> {
    return this.prisma.accountCategory
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accounts(args);
  }
}
