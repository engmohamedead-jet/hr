/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ProductDepartment as PrismaProductDepartment,
  ProductCategory as PrismaProductCategory,
  Product as PrismaProduct,
} from "@prisma/client";

export class ProductDepartmentServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProductDepartmentCountArgs, "select">
  ): Promise<number> {
    return this.prisma.productDepartment.count(args);
  }

  async productDepartments(
    args: Prisma.ProductDepartmentFindManyArgs
  ): Promise<PrismaProductDepartment[]> {
    return this.prisma.productDepartment.findMany(args);
  }
  async productDepartment(
    args: Prisma.ProductDepartmentFindUniqueArgs
  ): Promise<PrismaProductDepartment | null> {
    return this.prisma.productDepartment.findUnique(args);
  }
  async createProductDepartment(
    args: Prisma.ProductDepartmentCreateArgs
  ): Promise<PrismaProductDepartment> {
    return this.prisma.productDepartment.create(args);
  }
  async updateProductDepartment(
    args: Prisma.ProductDepartmentUpdateArgs
  ): Promise<PrismaProductDepartment> {
    return this.prisma.productDepartment.update(args);
  }
  async deleteProductDepartment(
    args: Prisma.ProductDepartmentDeleteArgs
  ): Promise<PrismaProductDepartment> {
    return this.prisma.productDepartment.delete(args);
  }

  async findProductCategories(
    parentId: number,
    args: Prisma.ProductCategoryFindManyArgs
  ): Promise<PrismaProductCategory[]> {
    return this.prisma.productDepartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .productCategories(args);
  }

  async findProducts(
    parentId: number,
    args: Prisma.ProductFindManyArgs
  ): Promise<PrismaProduct[]> {
    return this.prisma.productDepartment
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .products(args);
  }
}
