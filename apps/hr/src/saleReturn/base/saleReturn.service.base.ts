/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SaleReturn as PrismaSaleReturn,
  SaleReturnDetail as PrismaSaleReturnDetail,
  CashRepository as PrismaCashRepository,
  Customer as PrismaCustomer,
  InvoiceType as PrismaInvoiceType,
  PaymentTerm as PrismaPaymentTerm,
  PaymentType as PrismaPaymentType,
  Sale as PrismaSale,
  SalePriceType as PrismaSalePriceType,
  Store as PrismaStore,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SaleReturnServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SaleReturnCountArgs, "select">
  ): Promise<number> {
    return this.prisma.saleReturn.count(args);
  }

  async saleReturns(
    args: Prisma.SaleReturnFindManyArgs
  ): Promise<PrismaSaleReturn[]> {
    return this.prisma.saleReturn.findMany(args);
  }
  async saleReturn(
    args: Prisma.SaleReturnFindUniqueArgs
  ): Promise<PrismaSaleReturn | null> {
    return this.prisma.saleReturn.findUnique(args);
  }
  async createSaleReturn(
    args: Prisma.SaleReturnCreateArgs
  ): Promise<PrismaSaleReturn> {
    return this.prisma.saleReturn.create(args);
  }
  async updateSaleReturn(
    args: Prisma.SaleReturnUpdateArgs
  ): Promise<PrismaSaleReturn> {
    return this.prisma.saleReturn.update(args);
  }
  async deleteSaleReturn(
    args: Prisma.SaleReturnDeleteArgs
  ): Promise<PrismaSaleReturn> {
    return this.prisma.saleReturn.delete(args);
  }

  async findSaleReturnDetails(
    parentId: string,
    args: Prisma.SaleReturnDetailFindManyArgs
  ): Promise<PrismaSaleReturnDetail[]> {
    return this.prisma.saleReturn
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .saleReturnDetails(args);
  }

  async getCashRepositoryId(
    parentId: string
  ): Promise<PrismaCashRepository | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .cashRepositoryId();
  }

  async getCustomerId(parentId: string): Promise<PrismaCustomer | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .customerId();
  }

  async getInvoiceTypeId(parentId: string): Promise<PrismaInvoiceType | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .invoiceTypeId();
  }

  async getPaymentTermId(parentId: string): Promise<PrismaPaymentTerm | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .paymentTermId();
  }

  async getPaymentTypeId(parentId: string): Promise<PrismaPaymentType | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .paymentTypeId();
  }

  async getSaleId(parentId: string): Promise<PrismaSale | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .saleId();
  }

  async getSalePriceTyped(
    parentId: string
  ): Promise<PrismaSalePriceType | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .salePriceTyped();
  }

  async getStoreId(parentId: string): Promise<PrismaStore | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .storeId();
  }

  async getTenant(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.saleReturn
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
