/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsOptional,
  ValidateNested,
  IsNumber,
  Max,
  IsInt,
  Min,
} from "class-validator";
import { ControlTypeWhereUniqueInput } from "../../controlType/base/ControlTypeWhereUniqueInput";
import { Type } from "class-transformer";
import { CustomerElevatorUpdateManyWithoutElevatorsInput } from "./CustomerElevatorUpdateManyWithoutElevatorsInput";
import { CustomerUserUpdateManyWithoutElevatorsInput } from "./CustomerUserUpdateManyWithoutElevatorsInput";
import { Decimal } from "decimal.js";
import { DoorTypeWhereUniqueInput } from "../../doorType/base/DoorTypeWhereUniqueInput";
import { ElevatorSparePartUpdateManyWithoutElevatorsInput } from "./ElevatorSparePartUpdateManyWithoutElevatorsInput";
import { ElevatorTypeWhereUniqueInput } from "../../elevatorType/base/ElevatorTypeWhereUniqueInput";
import { FailureReportingUpdateManyWithoutElevatorsInput } from "./FailureReportingUpdateManyWithoutElevatorsInput";
import { InstallationContractUpdateManyWithoutElevatorsInput } from "./InstallationContractUpdateManyWithoutElevatorsInput";
import { MaintenanceContractUpdateManyWithoutElevatorsInput } from "./MaintenanceContractUpdateManyWithoutElevatorsInput";
import { MaintenanceVisitUpdateManyWithoutElevatorsInput } from "./MaintenanceVisitUpdateManyWithoutElevatorsInput";
import { MotorTypeWhereUniqueInput } from "../../motorType/base/MotorTypeWhereUniqueInput";
import { PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput } from "./PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput";
import { StoreWhereUniqueInput } from "../../store/base/StoreWhereUniqueInput";

@InputType()
class ElevatorUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  bannerSize?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cabinetSize?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: () => ControlTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ControlTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => ControlTypeWhereUniqueInput, {
    nullable: true,
  })
  controlTypeId?: ControlTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => CustomerElevatorUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => CustomerElevatorUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => CustomerElevatorUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  customerElevators?: CustomerElevatorUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => CustomerUserUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => CustomerUserUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => CustomerUserUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  customerUsers?: CustomerUserUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  doorSize?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => DoorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => DoorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => DoorTypeWhereUniqueInput, {
    nullable: true,
  })
  doorTypeId?: DoorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => ElevatorSparePartUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => ElevatorSparePartUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => ElevatorSparePartUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  elevatorSpareParts?: ElevatorSparePartUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => ElevatorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ElevatorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => ElevatorTypeWhereUniqueInput, {
    nullable: true,
  })
  elevatorTypeId?: ElevatorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => FailureReportingUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => FailureReportingUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => FailureReportingUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  failureReportings?: FailureReportingUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  freight?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => InstallationContractUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => InstallationContractUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => InstallationContractUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  installationContracts?: InstallationContractUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => MaintenanceContractUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceContractUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => MaintenanceContractUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  maintenanceContracts?: MaintenanceContractUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: () => MaintenanceVisitUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => MaintenanceVisitUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => MaintenanceVisitUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  maintenanceVisits?: MaintenanceVisitUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  motorPower?: string | null;

  @ApiProperty({
    required: false,
    type: () => MotorTypeWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => MotorTypeWhereUniqueInput)
  @IsOptional()
  @Field(() => MotorTypeWhereUniqueInput, {
    nullable: true,
  })
  motorTypeId?: MotorTypeWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedName?: string;

  @ApiProperty({
    required: false,
    type: () => PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput,
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput)
  @IsOptional()
  @Field(() => PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput, {
    nullable: true,
  })
  periodicMaintenanceOrders?: PeriodicMaintenanceOrderUpdateManyWithoutElevatorsInput;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  personsCount?: number | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsInt()
  @Min(1)
  @Max(99999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  stationsCount?: number | null;

  @ApiProperty({
    required: false,
    type: () => StoreWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => StoreWhereUniqueInput)
  @IsOptional()
  @Field(() => StoreWhereUniqueInput, {
    nullable: true,
  })
  storeId?: StoreWhereUniqueInput;
}

export { ElevatorUpdateInput as ElevatorUpdateInput };
