/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CashTransfer } from "./CashTransfer";
import { CashTransferCountArgs } from "./CashTransferCountArgs";
import { CashTransferFindManyArgs } from "./CashTransferFindManyArgs";
import { CashTransferFindUniqueArgs } from "./CashTransferFindUniqueArgs";
import { CreateCashTransferArgs } from "./CreateCashTransferArgs";
import { UpdateCashTransferArgs } from "./UpdateCashTransferArgs";
import { DeleteCashTransferArgs } from "./DeleteCashTransferArgs";
import { CashTransferService } from "../cashTransfer.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => CashTransfer)
export class CashTransferResolverBase {
  constructor(
    protected readonly service: CashTransferService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "read",
    possession: "any",
  })
  async _cashTransfersMeta(
    @graphql.Args() args: CashTransferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [CashTransfer])
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "read",
    possession: "any",
  })
  async cashTransfers(
    @graphql.Args() args: CashTransferFindManyArgs
  ): Promise<CashTransfer[]> {
    return this.service.cashTransfers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => CashTransfer, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "read",
    possession: "own",
  })
  async cashTransfer(
    @graphql.Args() args: CashTransferFindUniqueArgs
  ): Promise<CashTransfer | null> {
    const result = await this.service.cashTransfer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CashTransfer)
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "create",
    possession: "any",
  })
  async createCashTransfer(
    @graphql.Args() args: CreateCashTransferArgs
  ): Promise<CashTransfer> {
    return await this.service.createCashTransfer({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => CashTransfer)
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "update",
    possession: "any",
  })
  async updateCashTransfer(
    @graphql.Args() args: UpdateCashTransferArgs
  ): Promise<CashTransfer | null> {
    try {
      return await this.service.updateCashTransfer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CashTransfer)
  @nestAccessControl.UseRoles({
    resource: "CashTransfer",
    action: "delete",
    possession: "any",
  })
  async deleteCashTransfer(
    @graphql.Args() args: DeleteCashTransferArgs
  ): Promise<CashTransfer | null> {
    try {
      return await this.service.deleteCashTransfer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
