/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkCenterAlternative as PrismaWorkCenterAlternative,
  WorkCenter as PrismaWorkCenter,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class WorkCenterAlternativeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkCenterAlternativeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workCenterAlternative.count(args);
  }

  async workCenterAlternatives(
    args: Prisma.WorkCenterAlternativeFindManyArgs
  ): Promise<PrismaWorkCenterAlternative[]> {
    return this.prisma.workCenterAlternative.findMany(args);
  }
  async workCenterAlternative(
    args: Prisma.WorkCenterAlternativeFindUniqueArgs
  ): Promise<PrismaWorkCenterAlternative | null> {
    return this.prisma.workCenterAlternative.findUnique(args);
  }
  async createWorkCenterAlternative(
    args: Prisma.WorkCenterAlternativeCreateArgs
  ): Promise<PrismaWorkCenterAlternative> {
    return this.prisma.workCenterAlternative.create(args);
  }
  async updateWorkCenterAlternative(
    args: Prisma.WorkCenterAlternativeUpdateArgs
  ): Promise<PrismaWorkCenterAlternative> {
    return this.prisma.workCenterAlternative.update(args);
  }
  async deleteWorkCenterAlternative(
    args: Prisma.WorkCenterAlternativeDeleteArgs
  ): Promise<PrismaWorkCenterAlternative> {
    return this.prisma.workCenterAlternative.delete(args);
  }

  async getAlternativeWorkCenterId(
    parentId: string
  ): Promise<PrismaWorkCenter | null> {
    return this.prisma.workCenterAlternative
      .findUnique({
        where: { id: parentId },
      })
      .alternativeWorkCenterId();
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.workCenterAlternative
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getWorkCenterId(parentId: string): Promise<PrismaWorkCenter | null> {
    return this.prisma.workCenterAlternative
      .findUnique({
        where: { id: parentId },
      })
      .workCenterId();
  }
}
