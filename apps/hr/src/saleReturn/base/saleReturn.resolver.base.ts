/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SaleReturn } from "./SaleReturn";
import { SaleReturnCountArgs } from "./SaleReturnCountArgs";
import { SaleReturnFindManyArgs } from "./SaleReturnFindManyArgs";
import { SaleReturnFindUniqueArgs } from "./SaleReturnFindUniqueArgs";
import { CreateSaleReturnArgs } from "./CreateSaleReturnArgs";
import { UpdateSaleReturnArgs } from "./UpdateSaleReturnArgs";
import { DeleteSaleReturnArgs } from "./DeleteSaleReturnArgs";
import { SaleReturnDetailFindManyArgs } from "../../saleReturnDetail/base/SaleReturnDetailFindManyArgs";
import { SaleReturnDetail } from "../../saleReturnDetail/base/SaleReturnDetail";
import { CashRepository } from "../../cashRepository/base/CashRepository";
import { Customer } from "../../customer/base/Customer";
import { InvoiceType } from "../../invoiceType/base/InvoiceType";
import { PaymentTerm } from "../../paymentTerm/base/PaymentTerm";
import { PaymentType } from "../../paymentType/base/PaymentType";
import { Sale } from "../../sale/base/Sale";
import { SalePriceType } from "../../salePriceType/base/SalePriceType";
import { Store } from "../../store/base/Store";
import { Tenant } from "../../tenant/base/Tenant";
import { SaleReturnService } from "../saleReturn.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SaleReturn)
export class SaleReturnResolverBase {
  constructor(
    protected readonly service: SaleReturnService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async _saleReturnsMeta(
    @graphql.Args() args: SaleReturnCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SaleReturn])
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "any",
  })
  async saleReturns(
    @graphql.Args() args: SaleReturnFindManyArgs
  ): Promise<SaleReturn[]> {
    return this.service.saleReturns(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SaleReturn, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "read",
    possession: "own",
  })
  async saleReturn(
    @graphql.Args() args: SaleReturnFindUniqueArgs
  ): Promise<SaleReturn | null> {
    const result = await this.service.saleReturn(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleReturn)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "create",
    possession: "any",
  })
  async createSaleReturn(
    @graphql.Args() args: CreateSaleReturnArgs
  ): Promise<SaleReturn> {
    return await this.service.createSaleReturn({
      ...args,
      data: {
        ...args.data,

        cashRepositoryId: {
          connect: args.data.cashRepositoryId,
        },

        customerId: {
          connect: args.data.customerId,
        },

        invoiceTypeId: args.data.invoiceTypeId
          ? {
              connect: args.data.invoiceTypeId,
            }
          : undefined,

        paymentTermId: args.data.paymentTermId
          ? {
              connect: args.data.paymentTermId,
            }
          : undefined,

        paymentTypeId: {
          connect: args.data.paymentTypeId,
        },

        saleId: args.data.saleId
          ? {
              connect: args.data.saleId,
            }
          : undefined,

        salePriceTyped: {
          connect: args.data.salePriceTyped,
        },

        storeId: {
          connect: args.data.storeId,
        },

        tenant: args.data.tenant
          ? {
              connect: args.data.tenant,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SaleReturn)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "update",
    possession: "any",
  })
  async updateSaleReturn(
    @graphql.Args() args: UpdateSaleReturnArgs
  ): Promise<SaleReturn | null> {
    try {
      return await this.service.updateSaleReturn({
        ...args,
        data: {
          ...args.data,

          cashRepositoryId: {
            connect: args.data.cashRepositoryId,
          },

          customerId: {
            connect: args.data.customerId,
          },

          invoiceTypeId: args.data.invoiceTypeId
            ? {
                connect: args.data.invoiceTypeId,
              }
            : undefined,

          paymentTermId: args.data.paymentTermId
            ? {
                connect: args.data.paymentTermId,
              }
            : undefined,

          paymentTypeId: {
            connect: args.data.paymentTypeId,
          },

          saleId: args.data.saleId
            ? {
                connect: args.data.saleId,
              }
            : undefined,

          salePriceTyped: {
            connect: args.data.salePriceTyped,
          },

          storeId: {
            connect: args.data.storeId,
          },

          tenant: args.data.tenant
            ? {
                connect: args.data.tenant,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SaleReturn)
  @nestAccessControl.UseRoles({
    resource: "SaleReturn",
    action: "delete",
    possession: "any",
  })
  async deleteSaleReturn(
    @graphql.Args() args: DeleteSaleReturnArgs
  ): Promise<SaleReturn | null> {
    try {
      return await this.service.deleteSaleReturn(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SaleReturnDetail], { name: "saleReturnDetails" })
  @nestAccessControl.UseRoles({
    resource: "SaleReturnDetail",
    action: "read",
    possession: "any",
  })
  async findSaleReturnDetails(
    @graphql.Parent() parent: SaleReturn,
    @graphql.Args() args: SaleReturnDetailFindManyArgs
  ): Promise<SaleReturnDetail[]> {
    const results = await this.service.findSaleReturnDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => CashRepository, {
    nullable: true,
    name: "cashRepositoryId",
  })
  @nestAccessControl.UseRoles({
    resource: "CashRepository",
    action: "read",
    possession: "any",
  })
  async getCashRepositoryId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<CashRepository | null> {
    const result = await this.service.getCashRepositoryId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Customer, {
    nullable: true,
    name: "customerId",
  })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async getCustomerId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<Customer | null> {
    const result = await this.service.getCustomerId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => InvoiceType, {
    nullable: true,
    name: "invoiceTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "InvoiceType",
    action: "read",
    possession: "any",
  })
  async getInvoiceTypeId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<InvoiceType | null> {
    const result = await this.service.getInvoiceTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentTerm, {
    nullable: true,
    name: "paymentTermId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentTerm",
    action: "read",
    possession: "any",
  })
  async getPaymentTermId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<PaymentTerm | null> {
    const result = await this.service.getPaymentTermId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => PaymentType, {
    nullable: true,
    name: "paymentTypeId",
  })
  @nestAccessControl.UseRoles({
    resource: "PaymentType",
    action: "read",
    possession: "any",
  })
  async getPaymentTypeId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<PaymentType | null> {
    const result = await this.service.getPaymentTypeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Sale, {
    nullable: true,
    name: "saleId",
  })
  @nestAccessControl.UseRoles({
    resource: "Sale",
    action: "read",
    possession: "any",
  })
  async getSaleId(@graphql.Parent() parent: SaleReturn): Promise<Sale | null> {
    const result = await this.service.getSaleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SalePriceType, {
    nullable: true,
    name: "salePriceTyped",
  })
  @nestAccessControl.UseRoles({
    resource: "SalePriceType",
    action: "read",
    possession: "any",
  })
  async getSalePriceTyped(
    @graphql.Parent() parent: SaleReturn
  ): Promise<SalePriceType | null> {
    const result = await this.service.getSalePriceTyped(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Store, {
    nullable: true,
    name: "storeId",
  })
  @nestAccessControl.UseRoles({
    resource: "Store",
    action: "read",
    possession: "any",
  })
  async getStoreId(
    @graphql.Parent() parent: SaleReturn
  ): Promise<Store | null> {
    const result = await this.service.getStoreId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Tenant, {
    nullable: true,
    name: "tenant",
  })
  @nestAccessControl.UseRoles({
    resource: "Tenant",
    action: "read",
    possession: "any",
  })
  async getTenant(
    @graphql.Parent() parent: SaleReturn
  ): Promise<Tenant | null> {
    const result = await this.service.getTenant(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
