/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SettingGroup as PrismaSettingGroup,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class SettingGroupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SettingGroupCountArgs, "select">
  ): Promise<number> {
    return this.prisma.settingGroup.count(args);
  }

  async settingGroups(
    args: Prisma.SettingGroupFindManyArgs
  ): Promise<PrismaSettingGroup[]> {
    return this.prisma.settingGroup.findMany(args);
  }
  async settingGroup(
    args: Prisma.SettingGroupFindUniqueArgs
  ): Promise<PrismaSettingGroup | null> {
    return this.prisma.settingGroup.findUnique(args);
  }
  async createSettingGroup(
    args: Prisma.SettingGroupCreateArgs
  ): Promise<PrismaSettingGroup> {
    return this.prisma.settingGroup.create(args);
  }
  async updateSettingGroup(
    args: Prisma.SettingGroupUpdateArgs
  ): Promise<PrismaSettingGroup> {
    return this.prisma.settingGroup.update(args);
  }
  async deleteSettingGroup(
    args: Prisma.SettingGroupDeleteArgs
  ): Promise<PrismaSettingGroup> {
    return this.prisma.settingGroup.delete(args);
  }

  async getTenant(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.settingGroup
      .findUnique({
        where: { id: parentId },
      })
      .tenant();
  }
}
