/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field, Float } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsOptional,
  IsNumber,
  Max,
  IsDate,
  IsBoolean,
  ValidateNested,
} from "class-validator";

import { Decimal } from "decimal.js";
import { Type } from "class-transformer";
import { ScrapReasonWhereUniqueInput } from "../../scrapReason/base/ScrapReasonWhereUniqueInput";
import { TenantWhereUniqueInput } from "../../tenant/base/TenantWhereUniqueInput";
import { WorkOrderDependencyUpdateManyWithoutWorkOrdersInput } from "./WorkOrderDependencyUpdateManyWithoutWorkOrdersInput";
import { WorkOrderRoutingUpdateManyWithoutWorkOrdersInput } from "./WorkOrderRoutingUpdateManyWithoutWorkOrdersInput";

@InputType()
class WorkOrderUpdateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  barcode?: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  code?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  costsPerHour?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duaration?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationExpected?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(100)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationPercent?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  duarationUnit?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dueDate?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  endDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Boolean,
  })
  @IsBoolean()
  @IsOptional()
  @Field(() => Boolean, {
    nullable: true,
  })
  isActive?: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  normalizedName?: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note?: string | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  orderQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  productionDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  quantityProduced?: Decimal | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  quantityReportedFromPreviouseWorkOrder?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => ScrapReasonWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ScrapReasonWhereUniqueInput)
  @IsOptional()
  @Field(() => ScrapReasonWhereUniqueInput, {
    nullable: true,
  })
  scrapReasonId?: ScrapReasonWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  scrappedQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  startDate?: Date | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Max(99999999999)
  @IsOptional()
  @Field(() => Float, {
    nullable: true,
  })
  stockQuantity?: Decimal | null;

  @ApiProperty({
    required: false,
    type: () => TenantWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TenantWhereUniqueInput)
  @IsOptional()
  @Field(() => TenantWhereUniqueInput, {
    nullable: true,
  })
  tenantId?: TenantWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderBaseDependencies?: WorkOrderDependencyUpdateManyWithoutWorkOrdersInput;

  @ApiProperty({
    required: false,
    type: () => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderDependencyUpdateManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderDependencies?: WorkOrderDependencyUpdateManyWithoutWorkOrdersInput;

  @ApiProperty({
    required: false,
    type: () => WorkOrderRoutingUpdateManyWithoutWorkOrdersInput,
  })
  @ValidateNested()
  @Type(() => WorkOrderRoutingUpdateManyWithoutWorkOrdersInput)
  @IsOptional()
  @Field(() => WorkOrderRoutingUpdateManyWithoutWorkOrdersInput, {
    nullable: true,
  })
  workOrderRoutings?: WorkOrderRoutingUpdateManyWithoutWorkOrdersInput;
}

export { WorkOrderUpdateInput as WorkOrderUpdateInput };
