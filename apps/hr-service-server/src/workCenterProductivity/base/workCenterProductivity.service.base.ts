/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkCenterProductivity as PrismaWorkCenterProductivity,
  Tenant as PrismaTenant,
  WorkCenter as PrismaWorkCenter,
} from "@prisma/client";

export class WorkCenterProductivityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkCenterProductivityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workCenterProductivity.count(args);
  }

  async workCenterProductivities(
    args: Prisma.WorkCenterProductivityFindManyArgs
  ): Promise<PrismaWorkCenterProductivity[]> {
    return this.prisma.workCenterProductivity.findMany(args);
  }
  async workCenterProductivity(
    args: Prisma.WorkCenterProductivityFindUniqueArgs
  ): Promise<PrismaWorkCenterProductivity | null> {
    return this.prisma.workCenterProductivity.findUnique(args);
  }
  async createWorkCenterProductivity(
    args: Prisma.WorkCenterProductivityCreateArgs
  ): Promise<PrismaWorkCenterProductivity> {
    return this.prisma.workCenterProductivity.create(args);
  }
  async updateWorkCenterProductivity(
    args: Prisma.WorkCenterProductivityUpdateArgs
  ): Promise<PrismaWorkCenterProductivity> {
    return this.prisma.workCenterProductivity.update(args);
  }
  async deleteWorkCenterProductivity(
    args: Prisma.WorkCenterProductivityDeleteArgs
  ): Promise<PrismaWorkCenterProductivity> {
    return this.prisma.workCenterProductivity.delete(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.workCenterProductivity
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getWorkCenterId(parentId: string): Promise<PrismaWorkCenter | null> {
    return this.prisma.workCenterProductivity
      .findUnique({
        where: { id: parentId },
      })
      .workCenterId();
  }
}
