/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AccountTransactionService } from "../accountTransaction.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AccountTransactionCreateInput } from "./AccountTransactionCreateInput";
import { AccountTransaction } from "./AccountTransaction";
import { AccountTransactionFindManyArgs } from "./AccountTransactionFindManyArgs";
import { AccountTransactionWhereUniqueInput } from "./AccountTransactionWhereUniqueInput";
import { AccountTransactionUpdateInput } from "./AccountTransactionUpdateInput";
import { AccountTransactionDetailFindManyArgs } from "../../accountTransactionDetail/base/AccountTransactionDetailFindManyArgs";
import { AccountTransactionDetail } from "../../accountTransactionDetail/base/AccountTransactionDetail";
import { AccountTransactionDetailWhereUniqueInput } from "../../accountTransactionDetail/base/AccountTransactionDetailWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AccountTransactionControllerBase {
  constructor(
    protected readonly service: AccountTransactionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AccountTransaction })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAccountTransaction(
    @common.Body() data: AccountTransactionCreateInput
  ): Promise<AccountTransaction> {
    return await this.service.createAccountTransaction({
      data: {
        ...data,

        costCenter: data.costCenter
          ? {
              connect: data.costCenter,
            }
          : undefined,

        store: {
          connect: data.store,
        },
      },
      select: {
        costCenter: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        referenceNumber: true,
        statementReference: true,

        store: {
          select: {
            id: true,
          },
        },

        transactionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AccountTransaction] })
  @ApiNestedQuery(AccountTransactionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountTransactions(
    @common.Req() request: Request
  ): Promise<AccountTransaction[]> {
    const args = plainToClass(AccountTransactionFindManyArgs, request.query);
    return this.service.accountTransactions({
      ...args,
      select: {
        costCenter: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        referenceNumber: true,
        statementReference: true,

        store: {
          select: {
            id: true,
          },
        },

        transactionDate: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AccountTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async accountTransaction(
    @common.Param() params: AccountTransactionWhereUniqueInput
  ): Promise<AccountTransaction | null> {
    const result = await this.service.accountTransaction({
      where: params,
      select: {
        costCenter: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,
        referenceNumber: true,
        statementReference: true,

        store: {
          select: {
            id: true,
          },
        },

        transactionDate: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AccountTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAccountTransaction(
    @common.Param() params: AccountTransactionWhereUniqueInput,
    @common.Body() data: AccountTransactionUpdateInput
  ): Promise<AccountTransaction | null> {
    try {
      return await this.service.updateAccountTransaction({
        where: params,
        data: {
          ...data,

          costCenter: data.costCenter
            ? {
                connect: data.costCenter,
              }
            : undefined,

          store: {
            connect: data.store,
          },
        },
        select: {
          costCenter: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,
          referenceNumber: true,
          statementReference: true,

          store: {
            select: {
              id: true,
            },
          },

          transactionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AccountTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAccountTransaction(
    @common.Param() params: AccountTransactionWhereUniqueInput
  ): Promise<AccountTransaction | null> {
    try {
      return await this.service.deleteAccountTransaction({
        where: params,
        select: {
          costCenter: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,
          referenceNumber: true,
          statementReference: true,

          store: {
            select: {
              id: true,
            },
          },

          transactionDate: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/accountTransactionDetails")
  @ApiNestedQuery(AccountTransactionDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AccountTransactionDetail",
    action: "read",
    possession: "any",
  })
  async findAccountTransactionDetails(
    @common.Req() request: Request,
    @common.Param() params: AccountTransactionWhereUniqueInput
  ): Promise<AccountTransactionDetail[]> {
    const query = plainToClass(
      AccountTransactionDetailFindManyArgs,
      request.query
    );
    const results = await this.service.findAccountTransactionDetails(
      params.id,
      {
        ...query,
        select: {
          accountTransactionId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          credit: true,
          debit: true,
          exchangeRate: true,
          id: true,
          note: true,
          referenceNumber: true,
          serial: true,
          statementReference: true,

          storeId: {
            select: {
              id: true,
            },
          },

          transactionDate: true,

          transactionTypeId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/accountTransactionDetails")
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "update",
    possession: "any",
  })
  async connectAccountTransactionDetails(
    @common.Param() params: AccountTransactionWhereUniqueInput,
    @common.Body() body: AccountTransactionDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountTransactionDetails: {
        connect: body,
      },
    };
    await this.service.updateAccountTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/accountTransactionDetails")
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "update",
    possession: "any",
  })
  async updateAccountTransactionDetails(
    @common.Param() params: AccountTransactionWhereUniqueInput,
    @common.Body() body: AccountTransactionDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountTransactionDetails: {
        set: body,
      },
    };
    await this.service.updateAccountTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/accountTransactionDetails")
  @nestAccessControl.UseRoles({
    resource: "AccountTransaction",
    action: "update",
    possession: "any",
  })
  async disconnectAccountTransactionDetails(
    @common.Param() params: AccountTransactionWhereUniqueInput,
    @common.Body() body: AccountTransactionDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      accountTransactionDetails: {
        disconnect: body,
      },
    };
    await this.service.updateAccountTransaction({
      where: params,
      data,
      select: { id: true },
    });
  }
}
