/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkCenterWorkCenterTag as PrismaWorkCenterWorkCenterTag,
  Tenant as PrismaTenant,
  WorkCenter as PrismaWorkCenter,
  WorkCenterTag as PrismaWorkCenterTag,
} from "@prisma/client";

export class WorkCenterWorkCenterTagServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkCenterWorkCenterTagCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workCenterWorkCenterTag.count(args);
  }

  async workCenterWorkCenterTags(
    args: Prisma.WorkCenterWorkCenterTagFindManyArgs
  ): Promise<PrismaWorkCenterWorkCenterTag[]> {
    return this.prisma.workCenterWorkCenterTag.findMany(args);
  }
  async workCenterWorkCenterTag(
    args: Prisma.WorkCenterWorkCenterTagFindUniqueArgs
  ): Promise<PrismaWorkCenterWorkCenterTag | null> {
    return this.prisma.workCenterWorkCenterTag.findUnique(args);
  }
  async createWorkCenterWorkCenterTag(
    args: Prisma.WorkCenterWorkCenterTagCreateArgs
  ): Promise<PrismaWorkCenterWorkCenterTag> {
    return this.prisma.workCenterWorkCenterTag.create(args);
  }
  async updateWorkCenterWorkCenterTag(
    args: Prisma.WorkCenterWorkCenterTagUpdateArgs
  ): Promise<PrismaWorkCenterWorkCenterTag> {
    return this.prisma.workCenterWorkCenterTag.update(args);
  }
  async deleteWorkCenterWorkCenterTag(
    args: Prisma.WorkCenterWorkCenterTagDeleteArgs
  ): Promise<PrismaWorkCenterWorkCenterTag> {
    return this.prisma.workCenterWorkCenterTag.delete(args);
  }

  async getTenantId(parentId: string): Promise<PrismaTenant | null> {
    return this.prisma.workCenterWorkCenterTag
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }

  async getWorkCenter(parentId: string): Promise<PrismaWorkCenter | null> {
    return this.prisma.workCenterWorkCenterTag
      .findUnique({
        where: { id: parentId },
      })
      .workCenter();
  }

  async getWorkCenterTagId(
    parentId: string
  ): Promise<PrismaWorkCenterTag | null> {
    return this.prisma.workCenterWorkCenterTag
      .findUnique({
        where: { id: parentId },
      })
      .workCenterTagId();
  }
}
