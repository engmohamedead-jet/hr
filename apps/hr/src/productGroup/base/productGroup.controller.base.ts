/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductGroupService } from "../productGroup.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductGroupCreateInput } from "./ProductGroupCreateInput";
import { ProductGroup } from "./ProductGroup";
import { ProductGroupFindManyArgs } from "./ProductGroupFindManyArgs";
import { ProductGroupWhereUniqueInput } from "./ProductGroupWhereUniqueInput";
import { ProductGroupUpdateInput } from "./ProductGroupUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductGroupControllerBase {
  constructor(
    protected readonly service: ProductGroupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductGroup })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProductGroup(
    @common.Body() data: ProductGroupCreateInput
  ): Promise<ProductGroup> {
    return await this.service.createProductGroup({
      data: {
        ...data,

        PurchaseDiscountAccountId: data.PurchaseDiscountAccountId
          ? {
              connect: data.PurchaseDiscountAccountId,
            }
          : undefined,

        SaleReturnAccountId: data.SaleReturnAccountId
          ? {
              connect: data.SaleReturnAccountId,
            }
          : undefined,

        account: data.account
          ? {
              connect: data.account,
            }
          : undefined,

        inventoryAccountId: data.inventoryAccountId
          ? {
              connect: data.inventoryAccountId,
            }
          : undefined,

        productGroups: data.productGroups
          ? {
              connect: data.productGroups,
            }
          : undefined,

        purchaseAccountId: data.purchaseAccountId
          ? {
              connect: data.purchaseAccountId,
            }
          : undefined,

        purchaseReturnAccountId: data.purchaseReturnAccountId
          ? {
              connect: data.purchaseReturnAccountId,
            }
          : undefined,

        saleAccountId: data.saleAccountId
          ? {
              connect: data.saleAccountId,
            }
          : undefined,

        saleDiscountAccountId: data.saleDiscountAccountId
          ? {
              connect: data.saleDiscountAccountId,
            }
          : undefined,

        saleTaxId: data.saleTaxId
          ? {
              connect: data.saleTaxId,
            }
          : undefined,
      },
      select: {
        PurchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        SaleReturnAccountId: {
          select: {
            id: true,
          },
        },

        account: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccountId: {
          select: {
            id: true,
          },
        },

        isDefault: true,
        name: true,
        normalizedName: true,
        notes: true,

        productGroups: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductGroup] })
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productGroups(@common.Req() request: Request): Promise<ProductGroup[]> {
    const args = plainToClass(ProductGroupFindManyArgs, request.query);
    return this.service.productGroups({
      ...args,
      select: {
        PurchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        SaleReturnAccountId: {
          select: {
            id: true,
          },
        },

        account: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccountId: {
          select: {
            id: true,
          },
        },

        isDefault: true,
        name: true,
        normalizedName: true,
        notes: true,

        productGroups: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productGroup(
    @common.Param() params: ProductGroupWhereUniqueInput
  ): Promise<ProductGroup | null> {
    const result = await this.service.productGroup({
      where: params,
      select: {
        PurchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        SaleReturnAccountId: {
          select: {
            id: true,
          },
        },

        account: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccountId: {
          select: {
            id: true,
          },
        },

        isDefault: true,
        name: true,
        normalizedName: true,
        notes: true,

        productGroups: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProductGroup(
    @common.Param() params: ProductGroupWhereUniqueInput,
    @common.Body() data: ProductGroupUpdateInput
  ): Promise<ProductGroup | null> {
    try {
      return await this.service.updateProductGroup({
        where: params,
        data: {
          ...data,

          PurchaseDiscountAccountId: data.PurchaseDiscountAccountId
            ? {
                connect: data.PurchaseDiscountAccountId,
              }
            : undefined,

          SaleReturnAccountId: data.SaleReturnAccountId
            ? {
                connect: data.SaleReturnAccountId,
              }
            : undefined,

          account: data.account
            ? {
                connect: data.account,
              }
            : undefined,

          inventoryAccountId: data.inventoryAccountId
            ? {
                connect: data.inventoryAccountId,
              }
            : undefined,

          productGroups: data.productGroups
            ? {
                connect: data.productGroups,
              }
            : undefined,

          purchaseAccountId: data.purchaseAccountId
            ? {
                connect: data.purchaseAccountId,
              }
            : undefined,

          purchaseReturnAccountId: data.purchaseReturnAccountId
            ? {
                connect: data.purchaseReturnAccountId,
              }
            : undefined,

          saleAccountId: data.saleAccountId
            ? {
                connect: data.saleAccountId,
              }
            : undefined,

          saleDiscountAccountId: data.saleDiscountAccountId
            ? {
                connect: data.saleDiscountAccountId,
              }
            : undefined,

          saleTaxId: data.saleTaxId
            ? {
                connect: data.saleTaxId,
              }
            : undefined,
        },
        select: {
          PurchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          SaleReturnAccountId: {
            select: {
              id: true,
            },
          },

          account: {
            select: {
              id: true,
            },
          },

          code: true,
          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccountId: {
            select: {
              id: true,
            },
          },

          isDefault: true,
          name: true,
          normalizedName: true,
          notes: true,

          productGroups: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductGroup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProductGroup(
    @common.Param() params: ProductGroupWhereUniqueInput
  ): Promise<ProductGroup | null> {
    try {
      return await this.service.deleteProductGroup({
        where: params,
        select: {
          PurchaseDiscountAccountId: {
            select: {
              id: true,
            },
          },

          SaleReturnAccountId: {
            select: {
              id: true,
            },
          },

          account: {
            select: {
              id: true,
            },
          },

          code: true,
          createdAt: true,
          description: true,
          excludeFromPurchase: true,
          excludeFromSale: true,
          id: true,

          inventoryAccountId: {
            select: {
              id: true,
            },
          },

          isDefault: true,
          name: true,
          normalizedName: true,
          notes: true,

          productGroups: {
            select: {
              id: true,
            },
          },

          purchaseAccountId: {
            select: {
              id: true,
            },
          },

          purchaseReturnAccountId: {
            select: {
              id: true,
            },
          },

          saleAccountId: {
            select: {
              id: true,
            },
          },

          saleDiscountAccountId: {
            select: {
              id: true,
            },
          },

          saleTaxId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/parentProductGroupId")
  @ApiNestedQuery(ProductGroupFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "read",
    possession: "any",
  })
  async findParentProductGroupId(
    @common.Req() request: Request,
    @common.Param() params: ProductGroupWhereUniqueInput
  ): Promise<ProductGroup[]> {
    const query = plainToClass(ProductGroupFindManyArgs, request.query);
    const results = await this.service.findParentProductGroupId(params.id, {
      ...query,
      select: {
        PurchaseDiscountAccountId: {
          select: {
            id: true,
          },
        },

        SaleReturnAccountId: {
          select: {
            id: true,
          },
        },

        account: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        description: true,
        excludeFromPurchase: true,
        excludeFromSale: true,
        id: true,

        inventoryAccountId: {
          select: {
            id: true,
          },
        },

        isDefault: true,
        name: true,
        normalizedName: true,
        notes: true,

        productGroups: {
          select: {
            id: true,
          },
        },

        purchaseAccountId: {
          select: {
            id: true,
          },
        },

        purchaseReturnAccountId: {
          select: {
            id: true,
          },
        },

        saleAccountId: {
          select: {
            id: true,
          },
        },

        saleDiscountAccountId: {
          select: {
            id: true,
          },
        },

        saleTaxId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/parentProductGroupId")
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "update",
    possession: "any",
  })
  async connectParentProductGroupId(
    @common.Param() params: ProductGroupWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentProductGroupId: {
        connect: body,
      },
    };
    await this.service.updateProductGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/parentProductGroupId")
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "update",
    possession: "any",
  })
  async updateParentProductGroupId(
    @common.Param() params: ProductGroupWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentProductGroupId: {
        set: body,
      },
    };
    await this.service.updateProductGroup({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/parentProductGroupId")
  @nestAccessControl.UseRoles({
    resource: "ProductGroup",
    action: "update",
    possession: "any",
  })
  async disconnectParentProductGroupId(
    @common.Param() params: ProductGroupWhereUniqueInput,
    @common.Body() body: ProductGroupWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      parentProductGroupId: {
        disconnect: body,
      },
    };
    await this.service.updateProductGroup({
      where: params,
      data,
      select: { id: true },
    });
  }
}
