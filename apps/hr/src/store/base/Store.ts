/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AccountTransactionDetail } from "../../accountTransactionDetail/base/AccountTransactionDetail";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsBoolean,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { AccountTransaction } from "../../accountTransaction/base/AccountTransaction";
import { CustomerElevator } from "../../customerElevator/base/CustomerElevator";
import { Elevator } from "../../elevator/base/Elevator";
import { FailureReporting } from "../../failureReporting/base/FailureReporting";
import { MaintenanceContract } from "../../maintenanceContract/base/MaintenanceContract";
import { MaintenanceVisit } from "../../maintenanceVisit/base/MaintenanceVisit";
import { Notification } from "../../notification/base/Notification";
import { Office } from "../../office/base/Office";
import { PeriodicMaintenanceOrder } from "../../periodicMaintenanceOrder/base/PeriodicMaintenanceOrder";
import { Product } from "../../product/base/Product";
import { SaleTax } from "../../saleTax/base/SaleTax";
import { StoreType } from "../../storeType/base/StoreType";

@ObjectType()
class Store {
  @ApiProperty({
    required: false,
    type: () => [AccountTransactionDetail],
  })
  @ValidateNested()
  @Type(() => AccountTransactionDetail)
  @IsOptional()
  accountTransactionDetails?: Array<AccountTransactionDetail>;

  @ApiProperty({
    required: false,
    type: () => [AccountTransaction],
  })
  @ValidateNested()
  @Type(() => AccountTransaction)
  @IsOptional()
  accountTransactions?: Array<AccountTransaction>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  addressLine1!: string | null;

  @ApiProperty({
    required: true,
    type: Boolean,
  })
  @IsBoolean()
  @Field(() => Boolean)
  allowSale!: boolean;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  cellPhoneNumber!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  code!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [CustomerElevator],
  })
  @ValidateNested()
  @Type(() => CustomerElevator)
  @IsOptional()
  customerElevators?: Array<CustomerElevator>;

  @ApiProperty({
    required: false,
    type: () => [Elevator],
  })
  @ValidateNested()
  @Type(() => Elevator)
  @IsOptional()
  elevators?: Array<Elevator>;

  @ApiProperty({
    required: false,
    type: () => [FailureReporting],
  })
  @ValidateNested()
  @Type(() => FailureReporting)
  @IsOptional()
  failureReportings?: Array<FailureReporting>;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  fax!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  homePhoneNumber!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: false,
    type: () => [MaintenanceContract],
  })
  @ValidateNested()
  @Type(() => MaintenanceContract)
  @IsOptional()
  maintenanceContracts?: Array<MaintenanceContract>;

  @ApiProperty({
    required: false,
    type: () => [MaintenanceVisit],
  })
  @ValidateNested()
  @Type(() => MaintenanceVisit)
  @IsOptional()
  maintenanceVisits?: Array<MaintenanceVisit>;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  name!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  normalizedName!: string;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  note!: string | null;

  @ApiProperty({
    required: false,
    type: () => [Notification],
  })
  @ValidateNested()
  @Type(() => Notification)
  @IsOptional()
  notifications?: Array<Notification>;

  @ApiProperty({
    required: true,
    type: () => Office,
  })
  @ValidateNested()
  @Type(() => Office)
  office?: Office;

  @ApiProperty({
    required: false,
    type: () => [PeriodicMaintenanceOrder],
  })
  @ValidateNested()
  @Type(() => PeriodicMaintenanceOrder)
  @IsOptional()
  periodicMaintenanceOrders?: Array<PeriodicMaintenanceOrder>;

  @ApiProperty({
    required: false,
    type: () => [Product],
  })
  @ValidateNested()
  @Type(() => Product)
  @IsOptional()
  products?: Array<Product>;

  @ApiProperty({
    required: false,
    type: () => [SaleTax],
  })
  @ValidateNested()
  @Type(() => SaleTax)
  @IsOptional()
  saleTaxes?: Array<SaleTax>;

  @ApiProperty({
    required: true,
    type: () => StoreType,
  })
  @ValidateNested()
  @Type(() => StoreType)
  storeType?: StoreType;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  street!: string | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;
}

export { Store as Store };
