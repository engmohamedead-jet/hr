/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WorkCenterProductivityLossType as PrismaWorkCenterProductivityLossType,
  WorkCenterProductivityLoss as PrismaWorkCenterProductivityLoss,
  Tenant as PrismaTenant,
} from "@prisma/client";

export class WorkCenterProductivityLossTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WorkCenterProductivityLossTypeCountArgs, "select">
  ): Promise<number> {
    return this.prisma.workCenterProductivityLossType.count(args);
  }

  async workCenterProductivityLossTypes(
    args: Prisma.WorkCenterProductivityLossTypeFindManyArgs
  ): Promise<PrismaWorkCenterProductivityLossType[]> {
    return this.prisma.workCenterProductivityLossType.findMany(args);
  }
  async workCenterProductivityLossType(
    args: Prisma.WorkCenterProductivityLossTypeFindUniqueArgs
  ): Promise<PrismaWorkCenterProductivityLossType | null> {
    return this.prisma.workCenterProductivityLossType.findUnique(args);
  }
  async createWorkCenterProductivityLossType(
    args: Prisma.WorkCenterProductivityLossTypeCreateArgs
  ): Promise<PrismaWorkCenterProductivityLossType> {
    return this.prisma.workCenterProductivityLossType.create(args);
  }
  async updateWorkCenterProductivityLossType(
    args: Prisma.WorkCenterProductivityLossTypeUpdateArgs
  ): Promise<PrismaWorkCenterProductivityLossType> {
    return this.prisma.workCenterProductivityLossType.update(args);
  }
  async deleteWorkCenterProductivityLossType(
    args: Prisma.WorkCenterProductivityLossTypeDeleteArgs
  ): Promise<PrismaWorkCenterProductivityLossType> {
    return this.prisma.workCenterProductivityLossType.delete(args);
  }

  async findWorkCenterProductivityLosses(
    parentId: number,
    args: Prisma.WorkCenterProductivityLossFindManyArgs
  ): Promise<PrismaWorkCenterProductivityLoss[]> {
    return this.prisma.workCenterProductivityLossType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .workCenterProductivityLosses(args);
  }

  async getTenantId(parentId: number): Promise<PrismaTenant | null> {
    return this.prisma.workCenterProductivityLossType
      .findUnique({
        where: { id: parentId },
      })
      .tenantId();
  }
}
