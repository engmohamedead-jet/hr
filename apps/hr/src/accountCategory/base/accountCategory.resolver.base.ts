/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccountCategory } from "./AccountCategory";
import { AccountCategoryCountArgs } from "./AccountCategoryCountArgs";
import { AccountCategoryFindManyArgs } from "./AccountCategoryFindManyArgs";
import { AccountCategoryFindUniqueArgs } from "./AccountCategoryFindUniqueArgs";
import { CreateAccountCategoryArgs } from "./CreateAccountCategoryArgs";
import { UpdateAccountCategoryArgs } from "./UpdateAccountCategoryArgs";
import { DeleteAccountCategoryArgs } from "./DeleteAccountCategoryArgs";
import { AccountFindManyArgs } from "../../account/base/AccountFindManyArgs";
import { Account } from "../../account/base/Account";
import { AccountCategoryService } from "../accountCategory.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccountCategory)
export class AccountCategoryResolverBase {
  constructor(
    protected readonly service: AccountCategoryService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "read",
    possession: "any",
  })
  async _accountCategoriesMeta(
    @graphql.Args() args: AccountCategoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccountCategory])
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "read",
    possession: "any",
  })
  async accountCategories(
    @graphql.Args() args: AccountCategoryFindManyArgs
  ): Promise<AccountCategory[]> {
    return this.service.accountCategories(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccountCategory, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "read",
    possession: "own",
  })
  async accountCategory(
    @graphql.Args() args: AccountCategoryFindUniqueArgs
  ): Promise<AccountCategory | null> {
    const result = await this.service.accountCategory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountCategory)
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "create",
    possession: "any",
  })
  async createAccountCategory(
    @graphql.Args() args: CreateAccountCategoryArgs
  ): Promise<AccountCategory> {
    return await this.service.createAccountCategory({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccountCategory)
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "update",
    possession: "any",
  })
  async updateAccountCategory(
    @graphql.Args() args: UpdateAccountCategoryArgs
  ): Promise<AccountCategory | null> {
    try {
      return await this.service.updateAccountCategory({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccountCategory)
  @nestAccessControl.UseRoles({
    resource: "AccountCategory",
    action: "delete",
    possession: "any",
  })
  async deleteAccountCategory(
    @graphql.Args() args: DeleteAccountCategoryArgs
  ): Promise<AccountCategory | null> {
    try {
      return await this.service.deleteAccountCategory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Account], { name: "accounts" })
  @nestAccessControl.UseRoles({
    resource: "Account",
    action: "read",
    possession: "any",
  })
  async findAccounts(
    @graphql.Parent() parent: AccountCategory,
    @graphql.Args() args: AccountFindManyArgs
  ): Promise<Account[]> {
    const results = await this.service.findAccounts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
