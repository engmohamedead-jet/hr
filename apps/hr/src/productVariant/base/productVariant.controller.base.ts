/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ProductVariantService } from "../productVariant.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ProductVariantCreateInput } from "./ProductVariantCreateInput";
import { ProductVariant } from "./ProductVariant";
import { ProductVariantFindManyArgs } from "./ProductVariantFindManyArgs";
import { ProductVariantWhereUniqueInput } from "./ProductVariantWhereUniqueInput";
import { ProductVariantUpdateInput } from "./ProductVariantUpdateInput";
import { BillOfMaterialDetailFindManyArgs } from "../../billOfMaterialDetail/base/BillOfMaterialDetailFindManyArgs";
import { BillOfMaterialDetail } from "../../billOfMaterialDetail/base/BillOfMaterialDetail";
import { BillOfMaterialDetailWhereUniqueInput } from "../../billOfMaterialDetail/base/BillOfMaterialDetailWhereUniqueInput";
import { BillOfMaterialFindManyArgs } from "../../billOfMaterial/base/BillOfMaterialFindManyArgs";
import { BillOfMaterial } from "../../billOfMaterial/base/BillOfMaterial";
import { BillOfMaterialWhereUniqueInput } from "../../billOfMaterial/base/BillOfMaterialWhereUniqueInput";
import { ProductBarcodeFindManyArgs } from "../../productBarcode/base/ProductBarcodeFindManyArgs";
import { ProductBarcode } from "../../productBarcode/base/ProductBarcode";
import { ProductBarcodeWhereUniqueInput } from "../../productBarcode/base/ProductBarcodeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ProductVariantControllerBase {
  constructor(
    protected readonly service: ProductVariantService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProductVariant })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createProductVariant(
    @common.Body() data: ProductVariantCreateInput
  ): Promise<ProductVariant> {
    return await this.service.createProductVariant({
      data: {
        ...data,

        attributeValueId: {
          connect: data.attributeValueId,
        },

        productId: {
          connect: data.productId,
        },
      },
      select: {
        attributeValueId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ProductVariant] })
  @ApiNestedQuery(ProductVariantFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productVariants(
    @common.Req() request: Request
  ): Promise<ProductVariant[]> {
    const args = plainToClass(ProductVariantFindManyArgs, request.query);
    return this.service.productVariants({
      ...args,
      select: {
        attributeValueId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async productVariant(
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductVariant | null> {
    const result = await this.service.productVariant({
      where: params,
      select: {
        attributeValueId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateProductVariant(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() data: ProductVariantUpdateInput
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.updateProductVariant({
        where: params,
        data: {
          ...data,

          attributeValueId: {
            connect: data.attributeValueId,
          },

          productId: {
            connect: data.productId,
          },
        },
        select: {
          attributeValueId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,

          productId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProductVariant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteProductVariant(
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductVariant | null> {
    try {
      return await this.service.deleteProductVariant({
        where: params,
        select: {
          attributeValueId: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          note: true,

          productId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterialDetails")
  @ApiNestedQuery(BillOfMaterialDetailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterialDetail",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterialDetails(
    @common.Req() request: Request,
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<BillOfMaterialDetail[]> {
    const query = plainToClass(BillOfMaterialDetailFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterialDetails(params.id, {
      ...query,
      select: {
        billOfMaterial: {
          select: {
            id: true,
          },
        },

        costShare: true,
        createdAt: true,
        id: true,
        isActive: true,
        isManualConsumption: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        workCenterRoutingId: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterialDetails(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        connect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterialDetails(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        set: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterialDetails")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterialDetails(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialDetailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterialDetails: {
        disconnect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/billOfMaterials")
  @ApiNestedQuery(BillOfMaterialFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BillOfMaterial",
    action: "read",
    possession: "any",
  })
  async findBillOfMaterials(
    @common.Req() request: Request,
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<BillOfMaterial[]> {
    const query = plainToClass(BillOfMaterialFindManyArgs, request.query);
    const results = await this.service.findBillOfMaterials(params.id, {
      ...query,
      select: {
        billOfMaterialTypeId: {
          select: {
            id: true,
          },
        },

        code: true,
        createdAt: true,
        daysToPrepareManufacturingOrder: true,
        endDate: true,
        id: true,
        isActive: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        quantity: true,
        sequence: true,
        startDate: true,

        unitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async connectBillOfMaterials(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        connect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async updateBillOfMaterials(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        set: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/billOfMaterials")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async disconnectBillOfMaterials(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: BillOfMaterialWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      billOfMaterials: {
        disconnect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/productBarcodes")
  @ApiNestedQuery(ProductBarcodeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ProductBarcode",
    action: "read",
    possession: "any",
  })
  async findProductBarcodes(
    @common.Req() request: Request,
    @common.Param() params: ProductVariantWhereUniqueInput
  ): Promise<ProductBarcode[]> {
    const query = plainToClass(ProductBarcodeFindManyArgs, request.query);
    const results = await this.service.findProductBarcodes(params.id, {
      ...query,
      select: {
        barcode: true,

        barcodeTypeId: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        note: true,

        productId: {
          select: {
            id: true,
          },
        },

        productVariantId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async connectProductBarcodes(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        connect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async updateProductBarcodes(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        set: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/productBarcodes")
  @nestAccessControl.UseRoles({
    resource: "ProductVariant",
    action: "update",
    possession: "any",
  })
  async disconnectProductBarcodes(
    @common.Param() params: ProductVariantWhereUniqueInput,
    @common.Body() body: ProductBarcodeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      productBarcodes: {
        disconnect: body,
      },
    };
    await this.service.updateProductVariant({
      where: params,
      data,
      select: { id: true },
    });
  }
}
